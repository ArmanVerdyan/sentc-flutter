// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class SentcFlutter {
  ///
  ///# Check if the identifier is available for this app
  ///
  Future<bool> checkUserIdentifierAvailable(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCheckUserIdentifierAvailableConstMeta;

  ///
  ///# Check if the identifier is available
  ///
  ///but without making a request
  ///
  Future<String> prepareCheckUserIdentifierAvailable(
      {required String userIdentifier, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPrepareCheckUserIdentifierAvailableConstMeta;

  ///
  ///# Validates the response if the identifier is available
  ///
  ///but without making a request
  ///
  Future<bool> doneCheckUserIdentifierAvailable(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneCheckUserIdentifierAvailableConstMeta;

  ///
  ///Generates identifier and password for a user or device
  ///
  Future<GeneratedRegisterData> generateUserRegisterData({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateUserRegisterDataConstMeta;

  ///
  ///# Get the user input from the user client
  ///
  ///This is used when the register endpoint should only be called from the backend and not the clients.
  ///
  ///For full register see register()
  ///
  Future<String> prepareRegister(
      {required String userIdentifier, required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterConstMeta;

  ///
  ///# Validates the response of register
  ///
  ///Returns the new user id
  ///
  Future<String> doneRegister({required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneRegisterConstMeta;

  ///
  ///# Register a new user for the app
  ///
  ///Do the full req incl. req.
  ///No checking about spamming and just return the user id.
  ///
  Future<String> register(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterConstMeta;

  Future<String> prepareRegisterDeviceStart(
      {required String deviceIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterDeviceStartConstMeta;

  Future<void> doneRegisterDeviceStart(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneRegisterDeviceStartConstMeta;

  Future<String> registerDeviceStart(
      {required String baseUrl,
      required String authToken,
      required String deviceIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceStartConstMeta;

  Future<PreRegisterDeviceData> prepareRegisterDevice(
      {required String serverOutput,
      required String userKeys,
      required int keyCount,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterDeviceConstMeta;

  Future<RegisterDeviceData> registerDevice(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String serverOutput,
      required int keyCount,
      required String userKeys,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceConstMeta;

  Future<void> userDeviceKeySessionUpload(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String sessionId,
      required String userPublicKey,
      required String groupKeys,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserDeviceKeySessionUploadConstMeta;

  Future<String> prepareLoginStart(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareLoginStartConstMeta;

  Future<PrepareLoginOutput> prepareLogin(
      {required String userIdentifier,
      required String password,
      required String serverOutput,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareLoginConstMeta;

  Future<UserData> doneLogin(
      {required String masterKeyEncryption,
      required String serverOutput,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneLoginConstMeta;

  ///
  ///# Login the user to this app
  ///
  ///Does the login requests. 1. for auth, 2nd to get the keys.
  ///
  ///If there are more data in the backend, then it is possible to call it via the jwt what is returned by the done login request.
  ///
  ///The other backend can validate the jwt
  ///
  Future<UserData> login(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta;

  Future<UserKeyData> doneFetchUserKey(
      {required String privateKey, required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneFetchUserKeyConstMeta;

  Future<UserKeyData> fetchUserKey(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String keyId,
      required String privateKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchUserKeyConstMeta;

  Future<String> refreshJwt(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String refreshToken,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRefreshJwtConstMeta;

  Future<UserInitServerOutput> initUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String refreshToken,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitUserConstMeta;

  Future<List<UserDeviceList>> getUserDevices(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUserDevicesConstMeta;

  Future<void> resetPassword(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String newPassword,
      required String decryptedPrivateKey,
      required String decryptedSignKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetPasswordConstMeta;

  Future<void> changePassword(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String oldPassword,
      required String newPassword,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangePasswordConstMeta;

  Future<void> deleteUser(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteUserConstMeta;

  Future<void> deleteDevice(
      {required String baseUrl,
      required String authToken,
      required String deviceIdentifier,
      required String password,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteDeviceConstMeta;

  Future<void> updateUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String userIdentifier,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateUserConstMeta;

  Future<UserPublicKeyData> userFetchPublicKey(
      {required String baseUrl,
      required String authToken,
      required String userId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserFetchPublicKeyConstMeta;

  Future<String> userFetchVerifyKey(
      {required String baseUrl,
      required String authToken,
      required String userId,
      required String verifyKeyId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserFetchVerifyKeyConstMeta;

  Future<String> userKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String publicDeviceKey,
      required String preUserKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserKeyRotationConstMeta;

  Future<List<KeyRotationGetOut>> userPreDoneKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserPreDoneKeyRotationConstMeta;

  Future<KeyRotationInput> userGetDoneKeyRotationServerInput(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kUserGetDoneKeyRotationServerInputConstMeta;

  Future<void> userFinishKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String serverOutput,
      required String preGroupKey,
      required String publicKey,
      required String privateKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserFinishKeyRotationConstMeta;
}

class DeviceKeyData {
  final String privateKey;
  final String publicKey;
  final String signKey;
  final String verifyKey;
  final String exportedPublicKey;
  final String exportedVerifyKey;

  DeviceKeyData({
    required this.privateKey,
    required this.publicKey,
    required this.signKey,
    required this.verifyKey,
    required this.exportedPublicKey,
    required this.exportedVerifyKey,
  });
}

class GeneratedRegisterData {
  final String identifier;
  final String password;

  GeneratedRegisterData({
    required this.identifier,
    required this.password,
  });
}

class GroupInviteReqList {
  final String groupId;
  final String time;

  GroupInviteReqList({
    required this.groupId,
    required this.time,
  });
}

class KeyRotationGetOut {
  final String preGroupKeyId;
  final String newGroupKeyId;
  final String encryptedEphKeyKeyId;
  final String serverOutput;

  KeyRotationGetOut({
    required this.preGroupKeyId,
    required this.newGroupKeyId,
    required this.encryptedEphKeyKeyId,
    required this.serverOutput,
  });
}

class KeyRotationInput {
  final String encryptedEphemeralKeyByGroupKeyAndPublicKey;
  final String encryptedGroupKeyByEphemeral;
  final String ephemeralAlg;
  final String encryptedEphKeyKeyId;
  final String previousGroupKeyId;
  final String time;
  final String newGroupKeyId;

  KeyRotationInput({
    required this.encryptedEphemeralKeyByGroupKeyAndPublicKey,
    required this.encryptedGroupKeyByEphemeral,
    required this.ephemeralAlg,
    required this.encryptedEphKeyKeyId,
    required this.previousGroupKeyId,
    required this.time,
    required this.newGroupKeyId,
  });
}

class PreRegisterDeviceData {
  final String input;
  final String exportedPublicKey;

  PreRegisterDeviceData({
    required this.input,
    required this.exportedPublicKey,
  });
}

class PrepareLoginOutput {
  final String authKey;
  final String masterKeyEncryptionKey;

  PrepareLoginOutput({
    required this.authKey,
    required this.masterKeyEncryptionKey,
  });
}

class RegisterDeviceData {
  final String sessionId;
  final String exportedPublicKey;

  RegisterDeviceData({
    required this.sessionId,
    required this.exportedPublicKey,
  });
}

class UserData {
  final String jwt;
  final String userId;
  final String deviceId;
  final String refreshToken;
  final DeviceKeyData keys;
  final List<UserKeyData> userKeys;

  UserData({
    required this.jwt,
    required this.userId,
    required this.deviceId,
    required this.refreshToken,
    required this.keys,
    required this.userKeys,
  });
}

class UserDeviceList {
  final String deviceId;
  final String time;
  final String deviceIdentifier;

  UserDeviceList({
    required this.deviceId,
    required this.time,
    required this.deviceIdentifier,
  });
}

class UserInitServerOutput {
  final String jwt;
  final List<GroupInviteReqList> invites;

  UserInitServerOutput({
    required this.jwt,
    required this.invites,
  });
}

class UserKeyData {
  final String privateKey;
  final String publicKey;
  final String groupKey;
  final String time;
  final String groupKeyId;
  final String signKey;
  final String verifyKey;
  final String exportedPublicKey;
  final String exportedVerifyKey;

  UserKeyData({
    required this.privateKey,
    required this.publicKey,
    required this.groupKey,
    required this.time,
    required this.groupKeyId,
    required this.signKey,
    required this.verifyKey,
    required this.exportedPublicKey,
    required this.exportedVerifyKey,
  });
}

class UserPublicKeyData {
  final String publicKey;
  final String publicKeyId;

  UserPublicKeyData({
    required this.publicKey,
    required this.publicKeyId,
  });
}

class SentcFlutterImpl extends FlutterRustBridgeBase<SentcFlutterWire>
    implements SentcFlutter {
  factory SentcFlutterImpl(ffi.DynamicLibrary dylib) =>
      SentcFlutterImpl.raw(SentcFlutterWire(dylib));

  SentcFlutterImpl.raw(SentcFlutterWire inner) : super(inner);

  Future<bool> checkUserIdentifierAvailable(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_check_user_identifier_available(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier)),
        parseSuccessData: _wire2api_bool,
        constMeta: kCheckUserIdentifierAvailableConstMeta,
        argValues: [baseUrl, authToken, userIdentifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCheckUserIdentifierAvailableConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "check_user_identifier_available",
        argNames: ["baseUrl", "authToken", "userIdentifier"],
      );

  Future<String> prepareCheckUserIdentifierAvailable(
          {required String userIdentifier, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_check_user_identifier_available(
            port_, _api2wire_String(userIdentifier)),
        parseSuccessData: _wire2api_String,
        constMeta: kPrepareCheckUserIdentifierAvailableConstMeta,
        argValues: [userIdentifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kPrepareCheckUserIdentifierAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "prepare_check_user_identifier_available",
            argNames: ["userIdentifier"],
          );

  Future<bool> doneCheckUserIdentifierAvailable(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_done_check_user_identifier_available(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_bool,
        constMeta: kDoneCheckUserIdentifierAvailableConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kDoneCheckUserIdentifierAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "done_check_user_identifier_available",
            argNames: ["serverOutput"],
          );

  Future<GeneratedRegisterData> generateUserRegisterData({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_generate_user_register_data(port_),
        parseSuccessData: _wire2api_generated_register_data,
        constMeta: kGenerateUserRegisterDataConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateUserRegisterDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_user_register_data",
        argNames: [],
      );

  Future<String> prepareRegister(
          {required String userIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_register(port_,
            _api2wire_String(userIdentifier), _api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kPrepareRegisterConstMeta,
        argValues: [userIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_register",
        argNames: ["userIdentifier", "password"],
      );

  Future<String> doneRegister({required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_done_register(port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_String,
        constMeta: kDoneRegisterConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDoneRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_register",
        argNames: ["serverOutput"],
      );

  Future<String> register(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_register(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kRegisterConstMeta,
        argValues: [baseUrl, authToken, userIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register",
        argNames: ["baseUrl", "authToken", "userIdentifier", "password"],
      );

  Future<String> prepareRegisterDeviceStart(
          {required String deviceIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_register_device_start(port_,
            _api2wire_String(deviceIdentifier), _api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kPrepareRegisterDeviceStartConstMeta,
        argValues: [deviceIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterDeviceStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_register_device_start",
        argNames: ["deviceIdentifier", "password"],
      );

  Future<void> doneRegisterDeviceStart(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_done_register_device_start(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_unit,
        constMeta: kDoneRegisterDeviceStartConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDoneRegisterDeviceStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_register_device_start",
        argNames: ["serverOutput"],
      );

  Future<String> registerDeviceStart(
          {required String baseUrl,
          required String authToken,
          required String deviceIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_register_device_start(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(deviceIdentifier),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kRegisterDeviceStartConstMeta,
        argValues: [baseUrl, authToken, deviceIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_device_start",
        argNames: ["baseUrl", "authToken", "deviceIdentifier", "password"],
      );

  Future<PreRegisterDeviceData> prepareRegisterDevice(
          {required String serverOutput,
          required String userKeys,
          required int keyCount,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_register_device(
            port_,
            _api2wire_String(serverOutput),
            _api2wire_String(userKeys),
            _api2wire_i32(keyCount)),
        parseSuccessData: _wire2api_pre_register_device_data,
        constMeta: kPrepareRegisterDeviceConstMeta,
        argValues: [serverOutput, userKeys, keyCount],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_register_device",
        argNames: ["serverOutput", "userKeys", "keyCount"],
      );

  Future<RegisterDeviceData> registerDevice(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String serverOutput,
          required int keyCount,
          required String userKeys,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_register_device(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(serverOutput),
            _api2wire_i32(keyCount),
            _api2wire_String(userKeys)),
        parseSuccessData: _wire2api_register_device_data,
        constMeta: kRegisterDeviceConstMeta,
        argValues: [baseUrl, authToken, jwt, serverOutput, keyCount, userKeys],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_device",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "serverOutput",
          "keyCount",
          "userKeys"
        ],
      );

  Future<void> userDeviceKeySessionUpload(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String sessionId,
          required String userPublicKey,
          required String groupKeys,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_device_key_session_upload(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(sessionId),
            _api2wire_String(userPublicKey),
            _api2wire_String(groupKeys)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUserDeviceKeySessionUploadConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          sessionId,
          userPublicKey,
          groupKeys
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserDeviceKeySessionUploadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_device_key_session_upload",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "sessionId",
          "userPublicKey",
          "groupKeys"
        ],
      );

  Future<String> prepareLoginStart(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_login_start(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier)),
        parseSuccessData: _wire2api_String,
        constMeta: kPrepareLoginStartConstMeta,
        argValues: [baseUrl, authToken, userIdentifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareLoginStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_login_start",
        argNames: ["baseUrl", "authToken", "userIdentifier"],
      );

  Future<PrepareLoginOutput> prepareLogin(
          {required String userIdentifier,
          required String password,
          required String serverOutput,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_login(
            port_,
            _api2wire_String(userIdentifier),
            _api2wire_String(password),
            _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_prepare_login_output,
        constMeta: kPrepareLoginConstMeta,
        argValues: [userIdentifier, password, serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_login",
        argNames: ["userIdentifier", "password", "serverOutput"],
      );

  Future<UserData> doneLogin(
          {required String masterKeyEncryption,
          required String serverOutput,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_done_login(
            port_,
            _api2wire_String(masterKeyEncryption),
            _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_user_data,
        constMeta: kDoneLoginConstMeta,
        argValues: [masterKeyEncryption, serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDoneLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_login",
        argNames: ["masterKeyEncryption", "serverOutput"],
      );

  Future<UserData> login(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_login(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_user_data,
        constMeta: kLoginConstMeta,
        argValues: [baseUrl, authToken, userIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "login",
        argNames: ["baseUrl", "authToken", "userIdentifier", "password"],
      );

  Future<UserKeyData> doneFetchUserKey(
          {required String privateKey,
          required String serverOutput,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_done_fetch_user_key(port_,
            _api2wire_String(privateKey), _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_user_key_data,
        constMeta: kDoneFetchUserKeyConstMeta,
        argValues: [privateKey, serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDoneFetchUserKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_fetch_user_key",
        argNames: ["privateKey", "serverOutput"],
      );

  Future<UserKeyData> fetchUserKey(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String keyId,
          required String privateKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_fetch_user_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(keyId),
            _api2wire_String(privateKey)),
        parseSuccessData: _wire2api_user_key_data,
        constMeta: kFetchUserKeyConstMeta,
        argValues: [baseUrl, authToken, jwt, keyId, privateKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFetchUserKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_user_key",
        argNames: ["baseUrl", "authToken", "jwt", "keyId", "privateKey"],
      );

  Future<String> refreshJwt(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String refreshToken,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_refresh_jwt(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(refreshToken)),
        parseSuccessData: _wire2api_String,
        constMeta: kRefreshJwtConstMeta,
        argValues: [baseUrl, authToken, jwt, refreshToken],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRefreshJwtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "refresh_jwt",
        argNames: ["baseUrl", "authToken", "jwt", "refreshToken"],
      );

  Future<UserInitServerOutput> initUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String refreshToken,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_init_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(refreshToken)),
        parseSuccessData: _wire2api_user_init_server_output,
        constMeta: kInitUserConstMeta,
        argValues: [baseUrl, authToken, jwt, refreshToken],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_user",
        argNames: ["baseUrl", "authToken", "jwt", "refreshToken"],
      );

  Future<List<UserDeviceList>> getUserDevices(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String lastFetchedTime,
          required String lastFetchedId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_user_devices(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedId)),
        parseSuccessData: _wire2api_list_user_device_list,
        constMeta: kGetUserDevicesConstMeta,
        argValues: [baseUrl, authToken, jwt, lastFetchedTime, lastFetchedId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetUserDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_user_devices",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedId"
        ],
      );

  Future<void> resetPassword(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String newPassword,
          required String decryptedPrivateKey,
          required String decryptedSignKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_reset_password(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(newPassword),
            _api2wire_String(decryptedPrivateKey),
            _api2wire_String(decryptedSignKey)),
        parseSuccessData: _wire2api_unit,
        constMeta: kResetPasswordConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          newPassword,
          decryptedPrivateKey,
          decryptedSignKey
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kResetPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_password",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "newPassword",
          "decryptedPrivateKey",
          "decryptedSignKey"
        ],
      );

  Future<void> changePassword(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          required String oldPassword,
          required String newPassword,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_change_password(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier),
            _api2wire_String(oldPassword),
            _api2wire_String(newPassword)),
        parseSuccessData: _wire2api_unit,
        constMeta: kChangePasswordConstMeta,
        argValues: [
          baseUrl,
          authToken,
          userIdentifier,
          oldPassword,
          newPassword
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kChangePasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_password",
        argNames: [
          "baseUrl",
          "authToken",
          "userIdentifier",
          "oldPassword",
          "newPassword"
        ],
      );

  Future<void> deleteUser(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_delete_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_unit,
        constMeta: kDeleteUserConstMeta,
        argValues: [baseUrl, authToken, userIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDeleteUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_user",
        argNames: ["baseUrl", "authToken", "userIdentifier", "password"],
      );

  Future<void> deleteDevice(
          {required String baseUrl,
          required String authToken,
          required String deviceIdentifier,
          required String password,
          required String deviceId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_delete_device(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(deviceIdentifier),
            _api2wire_String(password),
            _api2wire_String(deviceId)),
        parseSuccessData: _wire2api_unit,
        constMeta: kDeleteDeviceConstMeta,
        argValues: [baseUrl, authToken, deviceIdentifier, password, deviceId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDeleteDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_device",
        argNames: [
          "baseUrl",
          "authToken",
          "deviceIdentifier",
          "password",
          "deviceId"
        ],
      );

  Future<void> updateUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String userIdentifier,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_update_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(userIdentifier)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUpdateUserConstMeta,
        argValues: [baseUrl, authToken, jwt, userIdentifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUpdateUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_user",
        argNames: ["baseUrl", "authToken", "jwt", "userIdentifier"],
      );

  Future<UserPublicKeyData> userFetchPublicKey(
          {required String baseUrl,
          required String authToken,
          required String userId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_fetch_public_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userId)),
        parseSuccessData: _wire2api_user_public_key_data,
        constMeta: kUserFetchPublicKeyConstMeta,
        argValues: [baseUrl, authToken, userId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserFetchPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_fetch_public_key",
        argNames: ["baseUrl", "authToken", "userId"],
      );

  Future<String> userFetchVerifyKey(
          {required String baseUrl,
          required String authToken,
          required String userId,
          required String verifyKeyId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_fetch_verify_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userId),
            _api2wire_String(verifyKeyId)),
        parseSuccessData: _wire2api_String,
        constMeta: kUserFetchVerifyKeyConstMeta,
        argValues: [baseUrl, authToken, userId, verifyKeyId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserFetchVerifyKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_fetch_verify_key",
        argNames: ["baseUrl", "authToken", "userId", "verifyKeyId"],
      );

  Future<String> userKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String publicDeviceKey,
          required String preUserKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(publicDeviceKey),
            _api2wire_String(preUserKey)),
        parseSuccessData: _wire2api_String,
        constMeta: kUserKeyRotationConstMeta,
        argValues: [baseUrl, authToken, jwt, publicDeviceKey, preUserKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_key_rotation",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "publicDeviceKey",
          "preUserKey"
        ],
      );

  Future<List<KeyRotationGetOut>> userPreDoneKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_pre_done_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt)),
        parseSuccessData: _wire2api_list_key_rotation_get_out,
        constMeta: kUserPreDoneKeyRotationConstMeta,
        argValues: [baseUrl, authToken, jwt],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserPreDoneKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_pre_done_key_rotation",
        argNames: ["baseUrl", "authToken", "jwt"],
      );

  Future<KeyRotationInput> userGetDoneKeyRotationServerInput(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_get_done_key_rotation_server_input(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_key_rotation_input,
        constMeta: kUserGetDoneKeyRotationServerInputConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kUserGetDoneKeyRotationServerInputConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "user_get_done_key_rotation_server_input",
            argNames: ["serverOutput"],
          );

  Future<void> userFinishKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String serverOutput,
          required String preGroupKey,
          required String publicKey,
          required String privateKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_finish_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(serverOutput),
            _api2wire_String(preGroupKey),
            _api2wire_String(publicKey),
            _api2wire_String(privateKey)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUserFinishKeyRotationConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          serverOutput,
          preGroupKey,
          publicKey,
          privateKey
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserFinishKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_finish_key_rotation",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "serverOutput",
          "preGroupKey",
          "publicKey",
          "privateKey"
        ],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

DeviceKeyData _wire2api_device_key_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 6)
    throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
  return DeviceKeyData(
    privateKey: _wire2api_String(arr[0]),
    publicKey: _wire2api_String(arr[1]),
    signKey: _wire2api_String(arr[2]),
    verifyKey: _wire2api_String(arr[3]),
    exportedPublicKey: _wire2api_String(arr[4]),
    exportedVerifyKey: _wire2api_String(arr[5]),
  );
}

GeneratedRegisterData _wire2api_generated_register_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return GeneratedRegisterData(
    identifier: _wire2api_String(arr[0]),
    password: _wire2api_String(arr[1]),
  );
}

GroupInviteReqList _wire2api_group_invite_req_list(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return GroupInviteReqList(
    groupId: _wire2api_String(arr[0]),
    time: _wire2api_String(arr[1]),
  );
}

KeyRotationGetOut _wire2api_key_rotation_get_out(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return KeyRotationGetOut(
    preGroupKeyId: _wire2api_String(arr[0]),
    newGroupKeyId: _wire2api_String(arr[1]),
    encryptedEphKeyKeyId: _wire2api_String(arr[2]),
    serverOutput: _wire2api_String(arr[3]),
  );
}

KeyRotationInput _wire2api_key_rotation_input(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 7)
    throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
  return KeyRotationInput(
    encryptedEphemeralKeyByGroupKeyAndPublicKey: _wire2api_String(arr[0]),
    encryptedGroupKeyByEphemeral: _wire2api_String(arr[1]),
    ephemeralAlg: _wire2api_String(arr[2]),
    encryptedEphKeyKeyId: _wire2api_String(arr[3]),
    previousGroupKeyId: _wire2api_String(arr[4]),
    time: _wire2api_String(arr[5]),
    newGroupKeyId: _wire2api_String(arr[6]),
  );
}

List<GroupInviteReqList> _wire2api_list_group_invite_req_list(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_group_invite_req_list).toList();
}

List<KeyRotationGetOut> _wire2api_list_key_rotation_get_out(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_key_rotation_get_out).toList();
}

List<UserDeviceList> _wire2api_list_user_device_list(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_user_device_list).toList();
}

List<UserKeyData> _wire2api_list_user_key_data(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_user_key_data).toList();
}

PreRegisterDeviceData _wire2api_pre_register_device_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PreRegisterDeviceData(
    input: _wire2api_String(arr[0]),
    exportedPublicKey: _wire2api_String(arr[1]),
  );
}

PrepareLoginOutput _wire2api_prepare_login_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PrepareLoginOutput(
    authKey: _wire2api_String(arr[0]),
    masterKeyEncryptionKey: _wire2api_String(arr[1]),
  );
}

RegisterDeviceData _wire2api_register_device_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return RegisterDeviceData(
    sessionId: _wire2api_String(arr[0]),
    exportedPublicKey: _wire2api_String(arr[1]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

UserData _wire2api_user_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 6)
    throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
  return UserData(
    jwt: _wire2api_String(arr[0]),
    userId: _wire2api_String(arr[1]),
    deviceId: _wire2api_String(arr[2]),
    refreshToken: _wire2api_String(arr[3]),
    keys: _wire2api_device_key_data(arr[4]),
    userKeys: _wire2api_list_user_key_data(arr[5]),
  );
}

UserDeviceList _wire2api_user_device_list(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return UserDeviceList(
    deviceId: _wire2api_String(arr[0]),
    time: _wire2api_String(arr[1]),
    deviceIdentifier: _wire2api_String(arr[2]),
  );
}

UserInitServerOutput _wire2api_user_init_server_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return UserInitServerOutput(
    jwt: _wire2api_String(arr[0]),
    invites: _wire2api_list_group_invite_req_list(arr[1]),
  );
}

UserKeyData _wire2api_user_key_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 9)
    throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
  return UserKeyData(
    privateKey: _wire2api_String(arr[0]),
    publicKey: _wire2api_String(arr[1]),
    groupKey: _wire2api_String(arr[2]),
    time: _wire2api_String(arr[3]),
    groupKeyId: _wire2api_String(arr[4]),
    signKey: _wire2api_String(arr[5]),
    verifyKey: _wire2api_String(arr[6]),
    exportedPublicKey: _wire2api_String(arr[7]),
    exportedVerifyKey: _wire2api_String(arr[8]),
  );
}

UserPublicKeyData _wire2api_user_public_key_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return UserPublicKeyData(
    publicKey: _wire2api_String(arr[0]),
    publicKeyId: _wire2api_String(arr[1]),
  );
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class SentcFlutterWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SentcFlutterWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SentcFlutterWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_check_user_identifier_available(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_check_user_identifier_available(
      port_,
      base_url,
      auth_token,
      user_identifier,
    );
  }

  late final _wire_check_user_identifier_availablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_check_user_identifier_available');
  late final _wire_check_user_identifier_available =
      _wire_check_user_identifier_availablePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_check_user_identifier_available(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_prepare_check_user_identifier_available(
      port_,
      user_identifier,
    );
  }

  late final _wire_prepare_check_user_identifier_availablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_prepare_check_user_identifier_available');
  late final _wire_prepare_check_user_identifier_available =
      _wire_prepare_check_user_identifier_availablePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_check_user_identifier_available(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_check_user_identifier_available(
      port_,
      server_output,
    );
  }

  late final _wire_done_check_user_identifier_availablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_done_check_user_identifier_available');
  late final _wire_done_check_user_identifier_available =
      _wire_done_check_user_identifier_availablePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_user_register_data(
    int port_,
  ) {
    return _wire_generate_user_register_data(
      port_,
    );
  }

  late final _wire_generate_user_register_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_generate_user_register_data');
  late final _wire_generate_user_register_data =
      _wire_generate_user_register_dataPtr.asFunction<void Function(int)>();

  void wire_prepare_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_prepare_register(
      port_,
      user_identifier,
      password,
    );
  }

  late final _wire_prepare_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_prepare_register');
  late final _wire_prepare_register = _wire_prepare_registerPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_register(
      port_,
      server_output,
    );
  }

  late final _wire_done_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_done_register');
  late final _wire_done_register = _wire_done_registerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_register(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
    );
  }

  late final _wire_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register');
  late final _wire_register = _wire_registerPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_register_device_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_prepare_register_device_start(
      port_,
      device_identifier,
      password,
    );
  }

  late final _wire_prepare_register_device_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_prepare_register_device_start');
  late final _wire_prepare_register_device_start =
      _wire_prepare_register_device_startPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_register_device_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_register_device_start(
      port_,
      server_output,
    );
  }

  late final _wire_done_register_device_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_done_register_device_start');
  late final _wire_done_register_device_start =
      _wire_done_register_device_startPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_device_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> device_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_register_device_start(
      port_,
      base_url,
      auth_token,
      device_identifier,
      password,
    );
  }

  late final _wire_register_device_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_device_start');
  late final _wire_register_device_start =
      _wire_register_device_startPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_register_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
    ffi.Pointer<wire_uint_8_list> user_keys,
    int key_count,
  ) {
    return _wire_prepare_register_device(
      port_,
      server_output,
      user_keys,
      key_count,
    );
  }

  late final _wire_prepare_register_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_prepare_register_device');
  late final _wire_prepare_register_device =
      _wire_prepare_register_devicePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_register_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> server_output,
    int key_count,
    ffi.Pointer<wire_uint_8_list> user_keys,
  ) {
    return _wire_register_device(
      port_,
      base_url,
      auth_token,
      jwt,
      server_output,
      key_count,
      user_keys,
    );
  }

  late final _wire_register_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_device');
  late final _wire_register_device = _wire_register_devicePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_device_key_session_upload(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> user_public_key,
    ffi.Pointer<wire_uint_8_list> group_keys,
  ) {
    return _wire_user_device_key_session_upload(
      port_,
      base_url,
      auth_token,
      jwt,
      session_id,
      user_public_key,
      group_keys,
    );
  }

  late final _wire_user_device_key_session_uploadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_user_device_key_session_upload');
  late final _wire_user_device_key_session_upload =
      _wire_user_device_key_session_uploadPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_login_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_prepare_login_start(
      port_,
      base_url,
      auth_token,
      user_identifier,
    );
  }

  late final _wire_prepare_login_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_prepare_login_start');
  late final _wire_prepare_login_start =
      _wire_prepare_login_startPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_prepare_login(
      port_,
      user_identifier,
      password,
      server_output,
    );
  }

  late final _wire_prepare_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_prepare_login');
  late final _wire_prepare_login = _wire_prepare_loginPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> master_key_encryption,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_login(
      port_,
      master_key_encryption,
      server_output,
    );
  }

  late final _wire_done_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_done_login');
  late final _wire_done_login = _wire_done_loginPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_login(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
    );
  }

  late final _wire_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_login');
  late final _wire_login = _wire_loginPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_fetch_user_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_fetch_user_key(
      port_,
      private_key,
      server_output,
    );
  }

  late final _wire_done_fetch_user_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_done_fetch_user_key');
  late final _wire_done_fetch_user_key =
      _wire_done_fetch_user_keyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_fetch_user_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> key_id,
    ffi.Pointer<wire_uint_8_list> private_key,
  ) {
    return _wire_fetch_user_key(
      port_,
      base_url,
      auth_token,
      jwt,
      key_id,
      private_key,
    );
  }

  late final _wire_fetch_user_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_fetch_user_key');
  late final _wire_fetch_user_key = _wire_fetch_user_keyPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_refresh_jwt(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> refresh_token,
  ) {
    return _wire_refresh_jwt(
      port_,
      base_url,
      auth_token,
      jwt,
      refresh_token,
    );
  }

  late final _wire_refresh_jwtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_refresh_jwt');
  late final _wire_refresh_jwt = _wire_refresh_jwtPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> refresh_token,
  ) {
    return _wire_init_user(
      port_,
      base_url,
      auth_token,
      jwt,
      refresh_token,
    );
  }

  late final _wire_init_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_init_user');
  late final _wire_init_user = _wire_init_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_user_devices(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_id,
  ) {
    return _wire_get_user_devices(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_id,
    );
  }

  late final _wire_get_user_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_user_devices');
  late final _wire_get_user_devices = _wire_get_user_devicesPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_reset_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> new_password,
    ffi.Pointer<wire_uint_8_list> decrypted_private_key,
    ffi.Pointer<wire_uint_8_list> decrypted_sign_key,
  ) {
    return _wire_reset_password(
      port_,
      base_url,
      auth_token,
      jwt,
      new_password,
      decrypted_private_key,
      decrypted_sign_key,
    );
  }

  late final _wire_reset_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_reset_password');
  late final _wire_reset_password = _wire_reset_passwordPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_change_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> old_password,
    ffi.Pointer<wire_uint_8_list> new_password,
  ) {
    return _wire_change_password(
      port_,
      base_url,
      auth_token,
      user_identifier,
      old_password,
      new_password,
    );
  }

  late final _wire_change_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_change_password');
  late final _wire_change_password = _wire_change_passwordPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_delete_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_delete_user(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
    );
  }

  late final _wire_delete_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_user');
  late final _wire_delete_user = _wire_delete_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_delete_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> device_identifier,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_delete_device(
      port_,
      base_url,
      auth_token,
      device_identifier,
      password,
      device_id,
    );
  }

  late final _wire_delete_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_device');
  late final _wire_delete_device = _wire_delete_devicePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_update_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_update_user(
      port_,
      base_url,
      auth_token,
      jwt,
      user_identifier,
    );
  }

  late final _wire_update_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_update_user');
  late final _wire_update_user = _wire_update_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_fetch_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_id,
  ) {
    return _wire_user_fetch_public_key(
      port_,
      base_url,
      auth_token,
      user_id,
    );
  }

  late final _wire_user_fetch_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_user_fetch_public_key');
  late final _wire_user_fetch_public_key =
      _wire_user_fetch_public_keyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_fetch_verify_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> verify_key_id,
  ) {
    return _wire_user_fetch_verify_key(
      port_,
      base_url,
      auth_token,
      user_id,
      verify_key_id,
    );
  }

  late final _wire_user_fetch_verify_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_user_fetch_verify_key');
  late final _wire_user_fetch_verify_key =
      _wire_user_fetch_verify_keyPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> public_device_key,
    ffi.Pointer<wire_uint_8_list> pre_user_key,
  ) {
    return _wire_user_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
      public_device_key,
      pre_user_key,
    );
  }

  late final _wire_user_key_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_user_key_rotation');
  late final _wire_user_key_rotation = _wire_user_key_rotationPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_pre_done_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
  ) {
    return _wire_user_pre_done_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
    );
  }

  late final _wire_user_pre_done_key_rotationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_user_pre_done_key_rotation');
  late final _wire_user_pre_done_key_rotation =
      _wire_user_pre_done_key_rotationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_get_done_key_rotation_server_input(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_user_get_done_key_rotation_server_input(
      port_,
      server_output,
    );
  }

  late final _wire_user_get_done_key_rotation_server_inputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_user_get_done_key_rotation_server_input');
  late final _wire_user_get_done_key_rotation_server_input =
      _wire_user_get_done_key_rotation_server_inputPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_finish_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> server_output,
    ffi.Pointer<wire_uint_8_list> pre_group_key,
    ffi.Pointer<wire_uint_8_list> public_key,
    ffi.Pointer<wire_uint_8_list> private_key,
  ) {
    return _wire_user_finish_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
      server_output,
      pre_group_key,
      public_key,
      private_key,
    );
  }

  late final _wire_user_finish_key_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_user_finish_key_rotation');
  late final _wire_user_finish_key_rotation =
      _wire_user_finish_key_rotationPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
