// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class SentcFlutter {
  Future<Claims> decodeJwt({required String jwt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeJwtConstMeta;

  ///
  ///# Check if the identifier is available for this app
  ///
  Future<bool> checkUserIdentifierAvailable(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCheckUserIdentifierAvailableConstMeta;

  ///
  ///# Check if the identifier is available
  ///
  ///but without making a request
  ///
  Future<String> prepareCheckUserIdentifierAvailable(
      {required String userIdentifier, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPrepareCheckUserIdentifierAvailableConstMeta;

  ///
  ///# Validates the response if the identifier is available
  ///
  ///but without making a request
  ///
  Future<bool> doneCheckUserIdentifierAvailable(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneCheckUserIdentifierAvailableConstMeta;

  ///
  ///Generates identifier and password for a user or device
  ///
  Future<GeneratedRegisterData> generateUserRegisterData({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateUserRegisterDataConstMeta;

  ///
  ///# Get the user input from the user client
  ///
  ///This is used when the register endpoint should only be called from the backend and not the clients.
  ///
  ///For full register see register()
  ///
  Future<String> prepareRegister(
      {required String userIdentifier, required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterConstMeta;

  ///
  ///# Validates the response of register
  ///
  ///Returns the new user id
  ///
  Future<String> doneRegister({required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneRegisterConstMeta;

  ///
  ///# Register a new user for the app
  ///
  ///Do the full req incl. req.
  ///No checking about spamming and just return the user id.
  ///
  Future<String> register(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterConstMeta;

  Future<String> prepareRegisterDeviceStart(
      {required String deviceIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterDeviceStartConstMeta;

  Future<void> doneRegisterDeviceStart(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneRegisterDeviceStartConstMeta;

  Future<String> registerDeviceStart(
      {required String baseUrl,
      required String authToken,
      required String deviceIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceStartConstMeta;

  Future<PreRegisterDeviceData> prepareRegisterDevice(
      {required String serverOutput,
      required String userKeys,
      required int keyCount,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterDeviceConstMeta;

  Future<RegisterDeviceData> registerDevice(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String serverOutput,
      required int keyCount,
      required String userKeys,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceConstMeta;

  Future<void> userDeviceKeySessionUpload(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String sessionId,
      required String userPublicKey,
      required String groupKeys,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserDeviceKeySessionUploadConstMeta;

  Future<String> prepareLoginStart(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareLoginStartConstMeta;

  Future<PrepareLoginOutput> prepareLogin(
      {required String userIdentifier,
      required String password,
      required String serverOutput,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareLoginConstMeta;

  Future<UserData> doneLogin(
      {required String masterKeyEncryption,
      required String serverOutput,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneLoginConstMeta;

  ///
  ///# Login the user to this app
  ///
  ///Does the login requests. 1. for auth, 2nd to get the keys.
  ///
  ///If there are more data in the backend, then it is possible to call it via the jwt what is returned by the done login request.
  ///
  ///The other backend can validate the jwt
  ///
  Future<UserData> login(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta;

  Future<UserKeyData> doneFetchUserKey(
      {required String privateKey, required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneFetchUserKeyConstMeta;

  Future<UserKeyData> fetchUserKey(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String keyId,
      required String privateKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchUserKeyConstMeta;

  Future<String> refreshJwt(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String refreshToken,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRefreshJwtConstMeta;

  Future<UserInitServerOutput> initUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String refreshToken,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitUserConstMeta;

  Future<List<UserDeviceList>> getUserDevices(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUserDevicesConstMeta;

  Future<void> resetPassword(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String newPassword,
      required String decryptedPrivateKey,
      required String decryptedSignKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetPasswordConstMeta;

  Future<void> changePassword(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String oldPassword,
      required String newPassword,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangePasswordConstMeta;

  Future<void> deleteUser(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteUserConstMeta;

  Future<void> deleteDevice(
      {required String baseUrl,
      required String authToken,
      required String deviceIdentifier,
      required String password,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteDeviceConstMeta;

  Future<void> updateUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String userIdentifier,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateUserConstMeta;

  Future<UserPublicKeyData> userFetchPublicKey(
      {required String baseUrl,
      required String authToken,
      required String userId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserFetchPublicKeyConstMeta;

  Future<String> userFetchVerifyKey(
      {required String baseUrl,
      required String authToken,
      required String userId,
      required String verifyKeyId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserFetchVerifyKeyConstMeta;

  Future<String> userKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String publicDeviceKey,
      required String preUserKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserKeyRotationConstMeta;

  Future<List<KeyRotationGetOut>> userPreDoneKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserPreDoneKeyRotationConstMeta;

  Future<KeyRotationInput> userGetDoneKeyRotationServerInput(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kUserGetDoneKeyRotationServerInputConstMeta;

  Future<void> userFinishKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String serverOutput,
      required String preGroupKey,
      required String publicKey,
      required String privateKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUserFinishKeyRotationConstMeta;

  ///
  ///Create input for the server api.
  ///
  ///Use this for group and child group. For child group use the public key of the parent group!
  ///
  Future<String> groupPrepareCreateGroup(
      {required String creatorsPublicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupPrepareCreateGroupConstMeta;

  ///
  ///Create a group with request.
  ///
  ///Only the default values are send to the server, no extra data. If extra data is required, use prepare_create
  ///
  Future<String> groupCreateGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String creatorsPublicKey,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupCreateGroupConstMeta;

  Future<String> groupCreateChildGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String parentPublicKey,
      required String parentId,
      required int adminRank,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupCreateChildGroupConstMeta;

  ///
  ///Get the group data without request.
  ///
  ///Use the parent group private key when fetching child group data.
  ///
  Future<GroupOutData> groupExtractGroupData(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupExtractGroupDataConstMeta;

  ///
  ///Get keys from pagination.
  ///
  ///Call the group route with the last fetched key time and the last fetched key id. Get both from the key data.
  ///
  Future<List<GroupOutDataKeys>> groupExtractGroupKeys(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupExtractGroupKeysConstMeta;

  Future<GroupOutData> groupGetGroupData(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupDataConstMeta;

  Future<List<GroupOutDataKeys>> groupGetGroupKeys(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String lastFetchedTime,
      required String lastFetchedKeyId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupKeysConstMeta;

  Future<GroupOutDataKeys> groupGetGroupKey(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String keyId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupKeyConstMeta;

  Future<GroupKeyData> groupDecryptKey(
      {required String privateKey,
      required String serverKeyData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupDecryptKeyConstMeta;

  Future<List<GroupUserListItem>> groupGetMember(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String lastFetchedTime,
      required String lastFetchedId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetMemberConstMeta;

  Future<GroupDataCheckUpdateServerOutput> groupGetGroupUpdates(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupUpdatesConstMeta;

  Future<List<ListGroups>> groupGetGroupsForUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupsForUserConstMeta;

  ///
  ///Prepare all group keys for a new member.
  ///
  ///Use the group keys from get group data or get group keys fn as string array
  ///
  Future<String> groupPrepareKeysForNewMember(
      {required String userPublicKey,
      required String groupKeys,
      required int keyCount,
      required int adminRank,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupPrepareKeysForNewMemberConstMeta;

  Future<String> groupInviteUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      required int keyCount,
      required int adminRank,
      required bool autoInvite,
      required bool groupInvite,
      required String userPublicKey,
      required String groupKeys,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupInviteUserConstMeta;

  Future<void> groupInviteUserSession(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required bool autoInvite,
      required String sessionId,
      required String userPublicKey,
      required String groupKeys,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupInviteUserSessionConstMeta;

  Future<List<GroupInviteReqList>> groupGetInvitesForUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      required String groupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetInvitesForUserConstMeta;

  Future<void> groupAcceptInvite(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupAcceptInviteConstMeta;

  Future<void> groupRejectInvite(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupRejectInviteConstMeta;

  Future<List<GroupInviteReqList>> groupGetSentJoinReqUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetSentJoinReqUserConstMeta;

  Future<List<GroupInviteReqList>> groupGetSentJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetSentJoinReqConstMeta;

  Future<void> groupDeleteSentJoinReqUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String joinReqGroupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupDeleteSentJoinReqUserConstMeta;

  Future<void> groupDeleteSentJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String joinReqGroupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupDeleteSentJoinReqConstMeta;

  Future<void> groupJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupJoinReqConstMeta;

  Future<List<GroupJoinReqList>> groupGetJoinReqs(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String lastFetchedTime,
      required String lastFetchedId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetJoinReqsConstMeta;

  Future<void> groupRejectJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String rejectedUserId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupRejectJoinReqConstMeta;

  Future<String> groupAcceptJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      required int keyCount,
      required int adminRank,
      required String userPublicKey,
      required String groupKeys,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupAcceptJoinReqConstMeta;

  Future<void> groupJoinUserSession(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String sessionId,
      required String userPublicKey,
      required String groupKeys,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupJoinUserSessionConstMeta;

  Future<void> groupStopGroupInvites(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupStopGroupInvitesConstMeta;

  Future<void> leaveGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLeaveGroupConstMeta;

  Future<String> groupPrepareKeyRotation(
      {required String preGroupKey, required String publicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupPrepareKeyRotationConstMeta;

  Future<String> groupDoneKeyRotation(
      {required String privateKey,
      required String publicKey,
      required String preGroupKey,
      required String serverOutput,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupDoneKeyRotationConstMeta;

  Future<String> groupKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String publicKey,
      required String preGroupKey,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupKeyRotationConstMeta;

  Future<List<KeyRotationGetOut>> groupPreDoneKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupPreDoneKeyRotationConstMeta;

  Future<KeyRotationInput> groupGetDoneKeyRotationServerInput(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGroupGetDoneKeyRotationServerInputConstMeta;

  Future<void> groupFinishKeyRotation(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String serverOutput,
      required String preGroupKey,
      required String publicKey,
      required String privateKey,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupFinishKeyRotationConstMeta;

  Future<String> groupPrepareUpdateRank(
      {required String userId,
      required int rank,
      required int adminRank,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupPrepareUpdateRankConstMeta;

  Future<void> groupUpdateRank(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      required int rank,
      required int adminRank,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupUpdateRankConstMeta;

  Future<void> groupKickUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      required int adminRank,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupKickUserConstMeta;

  Future<void> groupDeleteGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupDeleteGroupConstMeta;

  Future<UserPublicKeyData> groupGetPublicKeyData(
      {required String baseUrl,
      required String authToken,
      required String id,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetPublicKeyDataConstMeta;

  Future<EncryptedHead> splitHeadAndEncryptedData(
      {required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSplitHeadAndEncryptedDataConstMeta;

  Future<EncryptedHead> splitHeadAndEncryptedString(
      {required String data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSplitHeadAndEncryptedStringConstMeta;

  Future<EncryptedHead> deserializeHeadFromString(
      {required String head, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeserializeHeadFromStringConstMeta;

  Future<CryptoRawOutput> encryptRawSymmetric(
      {required String key,
      required Uint8List data,
      required String signKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptRawSymmetricConstMeta;

  Future<Uint8List> decryptRawSymmetric(
      {required String key,
      required Uint8List encryptedData,
      required String head,
      required String verifyKeyData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptRawSymmetricConstMeta;

  Future<Uint8List> encryptSymmetric(
      {required String key,
      required Uint8List data,
      required String signKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptSymmetricConstMeta;

  Future<Uint8List> decryptSymmetric(
      {required String key,
      required Uint8List encryptedData,
      required String verifyKeyData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptSymmetricConstMeta;

  Future<String> encryptStringSymmetric(
      {required String key,
      required String data,
      required String signKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptStringSymmetricConstMeta;

  Future<String> decryptStringSymmetric(
      {required String key,
      required String encryptedData,
      required String verifyKeyData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptStringSymmetricConstMeta;

  Future<CryptoRawOutput> encryptRawAsymmetric(
      {required String replyPublicKeyData,
      required Uint8List data,
      required String signKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptRawAsymmetricConstMeta;

  Future<Uint8List> decryptRawAsymmetric(
      {required String privateKey,
      required Uint8List encryptedData,
      required String head,
      required String verifyKeyData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptRawAsymmetricConstMeta;

  Future<Uint8List> encryptAsymmetric(
      {required String replyPublicKeyData,
      required Uint8List data,
      required String signKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptAsymmetricConstMeta;

  Future<Uint8List> decryptAsymmetric(
      {required String privateKey,
      required Uint8List encryptedData,
      required String verifyKeyData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptAsymmetricConstMeta;

  Future<String> encryptStringAsymmetric(
      {required String replyPublicKeyData,
      required String data,
      required String signKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptStringAsymmetricConstMeta;

  Future<String> decryptStringAsymmetric(
      {required String privateKey,
      required String encryptedData,
      required String verifyKeyData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptStringAsymmetricConstMeta;

  Future<NonRegisteredKeyOutput> generateNonRegisterSymKey(
      {required String masterKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateNonRegisterSymKeyConstMeta;

  Future<NonRegisteredKeyOutput> generateNonRegisterSymKeyByPublicKey(
      {required String replyPublicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGenerateNonRegisterSymKeyByPublicKeyConstMeta;

  Future<String> decryptSymKey(
      {required String masterKey,
      required String encryptedSymmetricKeyInfo,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptSymKeyConstMeta;

  Future<String> decryptSymKeyByPrivateKey(
      {required String privateKey,
      required String encryptedSymmetricKeyInfo,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptSymKeyByPrivateKeyConstMeta;

  Future<KeyGenOutput> generateAndRegisterSymKey(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String masterKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateAndRegisterSymKeyConstMeta;

  Future<KeyGenOutput> generateAndRegisterSymKeyByPublicKey(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String publicKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGenerateAndRegisterSymKeyByPublicKeyConstMeta;

  Future<String> getSymKeyById(
      {required String baseUrl,
      required String authToken,
      required String keyId,
      required String masterKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSymKeyByIdConstMeta;

  Future<String> getSymKeyByIdByPrivateKey(
      {required String baseUrl,
      required String authToken,
      required String keyId,
      required String privateKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSymKeyByIdByPrivateKeyConstMeta;

  Future<KeysToMasterKeyFetch> getKeysForMasterKey(
      {required String baseUrl,
      required String authToken,
      required String masterKeyId,
      required String lastFetchedTime,
      required String lastKeyId,
      required String masterKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetKeysForMasterKeyConstMeta;

  Future<void> deleteSymKey(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String keyId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteSymKeyConstMeta;

  Future<FileData> fileDownloadFileMeta(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFileDownloadFileMetaConstMeta;

  Future<Uint8List> fileDownloadAndDecryptFilePart(
      {required String baseUrl,
      required String urlPrefix,
      required String authToken,
      required String partId,
      required String contentKey,
      required String verifyKeyData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFileDownloadAndDecryptFilePartConstMeta;

  Future<List<FilePartListItem>> fileDownloadPartList(
      {required String baseUrl,
      required String authToken,
      required String fileId,
      required String lastSequence,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFileDownloadPartListConstMeta;

  Future<FileRegisterOutput> fileRegisterFile(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String masterKeyId,
      required String contentKey,
      required String belongsToId,
      required String belongsToType,
      required String fileName,
      required String groupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFileRegisterFileConstMeta;

  Future<FilePrepareRegister> filePrepareRegisterFile(
      {required String masterKeyId,
      required String contentKey,
      required String belongsToId,
      required String belongsToType,
      required String fileName,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFilePrepareRegisterFileConstMeta;

  Future<FileDoneRegister> fileDoneRegisterFile(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFileDoneRegisterFileConstMeta;

  Future<void> fileUploadPart(
      {required String baseUrl,
      required String urlPrefix,
      required String authToken,
      required String jwt,
      required String sessionId,
      required bool end,
      required int sequence,
      required String contentKey,
      required String signKey,
      required Uint8List part,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFileUploadPartConstMeta;

  Future<void> fileFileNameUpdate(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String fileId,
      required String contentKey,
      required String fileName,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFileFileNameUpdateConstMeta;

  Future<void> fileDeleteFile(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String fileId,
      required String groupId,
      required String groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFileDeleteFileConstMeta;
}

enum BelongsToType {
  Group,
  User,
  None,
}

class Claims {
  final String aud;
  final String sub;
  final int exp;
  final int iat;
  final String groupId;
  final bool fresh;

  Claims({
    required this.aud,
    required this.sub,
    required this.exp,
    required this.iat,
    required this.groupId,
    required this.fresh,
  });
}

class CryptoRawOutput {
  final String head;
  final Uint8List data;

  CryptoRawOutput({
    required this.head,
    required this.data,
  });
}

class DeviceKeyData {
  final String privateKey;
  final String publicKey;
  final String signKey;
  final String verifyKey;
  final String exportedPublicKey;
  final String exportedVerifyKey;

  DeviceKeyData({
    required this.privateKey,
    required this.publicKey,
    required this.signKey,
    required this.verifyKey,
    required this.exportedPublicKey,
    required this.exportedVerifyKey,
  });
}

class EncryptedHead {
  final String id;
  final SignHead? sign;

  EncryptedHead({
    required this.id,
    this.sign,
  });
}

class FileData {
  final String fileId;
  final String masterKeyId;
  final String owner;
  final String? belongsTo;
  final BelongsToType belongsToType;
  final String keyId;
  final String? encryptedFileName;
  final List<FilePartListItem> partList;

  FileData({
    required this.fileId,
    required this.masterKeyId,
    required this.owner,
    this.belongsTo,
    required this.belongsToType,
    required this.keyId,
    this.encryptedFileName,
    required this.partList,
  });
}

class FileDoneRegister {
  final String fileId;
  final String sessionId;

  FileDoneRegister({
    required this.fileId,
    required this.sessionId,
  });
}

class FilePartListItem {
  final String partId;
  final int sequence;
  final bool externStorage;

  FilePartListItem({
    required this.partId,
    required this.sequence,
    required this.externStorage,
  });
}

class FilePrepareRegister {
  final String encryptedFileName;
  final String serverInput;

  FilePrepareRegister({
    required this.encryptedFileName,
    required this.serverInput,
  });
}

class FileRegisterOutput {
  final String fileId;
  final String sessionId;
  final String encryptedFileName;

  FileRegisterOutput({
    required this.fileId,
    required this.sessionId,
    required this.encryptedFileName,
  });
}

class GeneratedRegisterData {
  final String identifier;
  final String password;

  GeneratedRegisterData({
    required this.identifier,
    required this.password,
  });
}

class GroupDataCheckUpdateServerOutput {
  final bool keyUpdate;
  final int rank;

  GroupDataCheckUpdateServerOutput({
    required this.keyUpdate,
    required this.rank,
  });
}

class GroupInviteReqList {
  final String groupId;
  final String time;

  GroupInviteReqList({
    required this.groupId,
    required this.time,
  });
}

class GroupJoinReqList {
  final String userId;
  final String time;
  final int userType;

  GroupJoinReqList({
    required this.userId,
    required this.time,
    required this.userType,
  });
}

class GroupKeyData {
  final String privateGroupKey;
  final String publicGroupKey;
  final String groupKey;
  final String time;
  final String groupKeyId;

  GroupKeyData({
    required this.privateGroupKey,
    required this.publicGroupKey,
    required this.groupKey,
    required this.time,
    required this.groupKeyId,
  });
}

class GroupOutData {
  final String groupId;
  final String parentGroupId;
  final int rank;
  final bool keyUpdate;
  final String createdTime;
  final String joinedTime;
  final List<GroupOutDataKeys> keys;
  final String? accessByGroupAsMember;
  final String? accessByParentGroup;

  GroupOutData({
    required this.groupId,
    required this.parentGroupId,
    required this.rank,
    required this.keyUpdate,
    required this.createdTime,
    required this.joinedTime,
    required this.keys,
    this.accessByGroupAsMember,
    this.accessByParentGroup,
  });
}

class GroupOutDataKeys {
  final String privateKeyId;
  final String keyData;

  GroupOutDataKeys({
    required this.privateKeyId,
    required this.keyData,
  });
}

class GroupUserListItem {
  final String userId;
  final int rank;
  final String joinedTime;
  final int userType;

  GroupUserListItem({
    required this.userId,
    required this.rank,
    required this.joinedTime,
    required this.userType,
  });
}

class KeyGenOutput {
  final String key;
  final String keyId;

  KeyGenOutput({
    required this.key,
    required this.keyId,
  });
}

class KeyRotationGetOut {
  final String preGroupKeyId;
  final String newGroupKeyId;
  final String encryptedEphKeyKeyId;
  final String serverOutput;

  KeyRotationGetOut({
    required this.preGroupKeyId,
    required this.newGroupKeyId,
    required this.encryptedEphKeyKeyId,
    required this.serverOutput,
  });
}

class KeyRotationInput {
  final String encryptedEphemeralKeyByGroupKeyAndPublicKey;
  final String encryptedGroupKeyByEphemeral;
  final String ephemeralAlg;
  final String encryptedEphKeyKeyId;
  final String previousGroupKeyId;
  final String time;
  final String newGroupKeyId;

  KeyRotationInput({
    required this.encryptedEphemeralKeyByGroupKeyAndPublicKey,
    required this.encryptedGroupKeyByEphemeral,
    required this.ephemeralAlg,
    required this.encryptedEphKeyKeyId,
    required this.previousGroupKeyId,
    required this.time,
    required this.newGroupKeyId,
  });
}

class KeysToMasterKeyFetch {
  final String lastFetchedTime;
  final String lastKeyId;
  final List<String> keys;

  KeysToMasterKeyFetch({
    required this.lastFetchedTime,
    required this.lastKeyId,
    required this.keys,
  });
}

class ListGroups {
  final String groupId;
  final String time;
  final String joinedTime;
  final int rank;
  final String? parent;

  ListGroups({
    required this.groupId,
    required this.time,
    required this.joinedTime,
    required this.rank,
    this.parent,
  });
}

class NonRegisteredKeyOutput {
  final String key;
  final String encryptedKey;

  NonRegisteredKeyOutput({
    required this.key,
    required this.encryptedKey,
  });
}

class PreRegisterDeviceData {
  final String input;
  final String exportedPublicKey;

  PreRegisterDeviceData({
    required this.input,
    required this.exportedPublicKey,
  });
}

class PrepareLoginOutput {
  final String authKey;
  final String masterKeyEncryptionKey;

  PrepareLoginOutput({
    required this.authKey,
    required this.masterKeyEncryptionKey,
  });
}

class RegisterDeviceData {
  final String sessionId;
  final String exportedPublicKey;

  RegisterDeviceData({
    required this.sessionId,
    required this.exportedPublicKey,
  });
}

class SignHead {
  final String id;
  final String alg;

  SignHead({
    required this.id,
    required this.alg,
  });
}

class UserData {
  final String jwt;
  final String userId;
  final String deviceId;
  final String refreshToken;
  final DeviceKeyData keys;
  final List<UserKeyData> userKeys;

  UserData({
    required this.jwt,
    required this.userId,
    required this.deviceId,
    required this.refreshToken,
    required this.keys,
    required this.userKeys,
  });
}

class UserDeviceList {
  final String deviceId;
  final String time;
  final String deviceIdentifier;

  UserDeviceList({
    required this.deviceId,
    required this.time,
    required this.deviceIdentifier,
  });
}

class UserInitServerOutput {
  final String jwt;
  final List<GroupInviteReqList> invites;

  UserInitServerOutput({
    required this.jwt,
    required this.invites,
  });
}

class UserKeyData {
  final String privateKey;
  final String publicKey;
  final String groupKey;
  final String time;
  final String groupKeyId;
  final String signKey;
  final String verifyKey;
  final String exportedPublicKey;
  final String exportedVerifyKey;

  UserKeyData({
    required this.privateKey,
    required this.publicKey,
    required this.groupKey,
    required this.time,
    required this.groupKeyId,
    required this.signKey,
    required this.verifyKey,
    required this.exportedPublicKey,
    required this.exportedVerifyKey,
  });
}

class UserPublicKeyData {
  final String publicKey;
  final String publicKeyId;

  UserPublicKeyData({
    required this.publicKey,
    required this.publicKeyId,
  });
}

class SentcFlutterImpl extends FlutterRustBridgeBase<SentcFlutterWire>
    implements SentcFlutter {
  factory SentcFlutterImpl(ffi.DynamicLibrary dylib) =>
      SentcFlutterImpl.raw(SentcFlutterWire(dylib));

  SentcFlutterImpl.raw(SentcFlutterWire inner) : super(inner);

  Future<Claims> decodeJwt({required String jwt, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decode_jwt(port_, _api2wire_String(jwt)),
        parseSuccessData: _wire2api_claims,
        constMeta: kDecodeJwtConstMeta,
        argValues: [jwt],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecodeJwtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_jwt",
        argNames: ["jwt"],
      );

  Future<bool> checkUserIdentifierAvailable(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_check_user_identifier_available(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier)),
        parseSuccessData: _wire2api_bool,
        constMeta: kCheckUserIdentifierAvailableConstMeta,
        argValues: [baseUrl, authToken, userIdentifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCheckUserIdentifierAvailableConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "check_user_identifier_available",
        argNames: ["baseUrl", "authToken", "userIdentifier"],
      );

  Future<String> prepareCheckUserIdentifierAvailable(
          {required String userIdentifier, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_check_user_identifier_available(
            port_, _api2wire_String(userIdentifier)),
        parseSuccessData: _wire2api_String,
        constMeta: kPrepareCheckUserIdentifierAvailableConstMeta,
        argValues: [userIdentifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kPrepareCheckUserIdentifierAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "prepare_check_user_identifier_available",
            argNames: ["userIdentifier"],
          );

  Future<bool> doneCheckUserIdentifierAvailable(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_done_check_user_identifier_available(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_bool,
        constMeta: kDoneCheckUserIdentifierAvailableConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kDoneCheckUserIdentifierAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "done_check_user_identifier_available",
            argNames: ["serverOutput"],
          );

  Future<GeneratedRegisterData> generateUserRegisterData({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_generate_user_register_data(port_),
        parseSuccessData: _wire2api_generated_register_data,
        constMeta: kGenerateUserRegisterDataConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateUserRegisterDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_user_register_data",
        argNames: [],
      );

  Future<String> prepareRegister(
          {required String userIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_register(port_,
            _api2wire_String(userIdentifier), _api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kPrepareRegisterConstMeta,
        argValues: [userIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_register",
        argNames: ["userIdentifier", "password"],
      );

  Future<String> doneRegister({required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_done_register(port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_String,
        constMeta: kDoneRegisterConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDoneRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_register",
        argNames: ["serverOutput"],
      );

  Future<String> register(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_register(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kRegisterConstMeta,
        argValues: [baseUrl, authToken, userIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register",
        argNames: ["baseUrl", "authToken", "userIdentifier", "password"],
      );

  Future<String> prepareRegisterDeviceStart(
          {required String deviceIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_register_device_start(port_,
            _api2wire_String(deviceIdentifier), _api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kPrepareRegisterDeviceStartConstMeta,
        argValues: [deviceIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterDeviceStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_register_device_start",
        argNames: ["deviceIdentifier", "password"],
      );

  Future<void> doneRegisterDeviceStart(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_done_register_device_start(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_unit,
        constMeta: kDoneRegisterDeviceStartConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDoneRegisterDeviceStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_register_device_start",
        argNames: ["serverOutput"],
      );

  Future<String> registerDeviceStart(
          {required String baseUrl,
          required String authToken,
          required String deviceIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_register_device_start(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(deviceIdentifier),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kRegisterDeviceStartConstMeta,
        argValues: [baseUrl, authToken, deviceIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_device_start",
        argNames: ["baseUrl", "authToken", "deviceIdentifier", "password"],
      );

  Future<PreRegisterDeviceData> prepareRegisterDevice(
          {required String serverOutput,
          required String userKeys,
          required int keyCount,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_register_device(
            port_,
            _api2wire_String(serverOutput),
            _api2wire_String(userKeys),
            _api2wire_i32(keyCount)),
        parseSuccessData: _wire2api_pre_register_device_data,
        constMeta: kPrepareRegisterDeviceConstMeta,
        argValues: [serverOutput, userKeys, keyCount],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_register_device",
        argNames: ["serverOutput", "userKeys", "keyCount"],
      );

  Future<RegisterDeviceData> registerDevice(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String serverOutput,
          required int keyCount,
          required String userKeys,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_register_device(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(serverOutput),
            _api2wire_i32(keyCount),
            _api2wire_String(userKeys)),
        parseSuccessData: _wire2api_register_device_data,
        constMeta: kRegisterDeviceConstMeta,
        argValues: [baseUrl, authToken, jwt, serverOutput, keyCount, userKeys],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_device",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "serverOutput",
          "keyCount",
          "userKeys"
        ],
      );

  Future<void> userDeviceKeySessionUpload(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String sessionId,
          required String userPublicKey,
          required String groupKeys,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_device_key_session_upload(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(sessionId),
            _api2wire_String(userPublicKey),
            _api2wire_String(groupKeys)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUserDeviceKeySessionUploadConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          sessionId,
          userPublicKey,
          groupKeys
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserDeviceKeySessionUploadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_device_key_session_upload",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "sessionId",
          "userPublicKey",
          "groupKeys"
        ],
      );

  Future<String> prepareLoginStart(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_login_start(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier)),
        parseSuccessData: _wire2api_String,
        constMeta: kPrepareLoginStartConstMeta,
        argValues: [baseUrl, authToken, userIdentifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareLoginStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_login_start",
        argNames: ["baseUrl", "authToken", "userIdentifier"],
      );

  Future<PrepareLoginOutput> prepareLogin(
          {required String userIdentifier,
          required String password,
          required String serverOutput,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_prepare_login(
            port_,
            _api2wire_String(userIdentifier),
            _api2wire_String(password),
            _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_prepare_login_output,
        constMeta: kPrepareLoginConstMeta,
        argValues: [userIdentifier, password, serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrepareLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_login",
        argNames: ["userIdentifier", "password", "serverOutput"],
      );

  Future<UserData> doneLogin(
          {required String masterKeyEncryption,
          required String serverOutput,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_done_login(
            port_,
            _api2wire_String(masterKeyEncryption),
            _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_user_data,
        constMeta: kDoneLoginConstMeta,
        argValues: [masterKeyEncryption, serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDoneLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_login",
        argNames: ["masterKeyEncryption", "serverOutput"],
      );

  Future<UserData> login(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_login(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_user_data,
        constMeta: kLoginConstMeta,
        argValues: [baseUrl, authToken, userIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "login",
        argNames: ["baseUrl", "authToken", "userIdentifier", "password"],
      );

  Future<UserKeyData> doneFetchUserKey(
          {required String privateKey,
          required String serverOutput,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_done_fetch_user_key(port_,
            _api2wire_String(privateKey), _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_user_key_data,
        constMeta: kDoneFetchUserKeyConstMeta,
        argValues: [privateKey, serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDoneFetchUserKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_fetch_user_key",
        argNames: ["privateKey", "serverOutput"],
      );

  Future<UserKeyData> fetchUserKey(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String keyId,
          required String privateKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_fetch_user_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(keyId),
            _api2wire_String(privateKey)),
        parseSuccessData: _wire2api_user_key_data,
        constMeta: kFetchUserKeyConstMeta,
        argValues: [baseUrl, authToken, jwt, keyId, privateKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFetchUserKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_user_key",
        argNames: ["baseUrl", "authToken", "jwt", "keyId", "privateKey"],
      );

  Future<String> refreshJwt(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String refreshToken,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_refresh_jwt(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(refreshToken)),
        parseSuccessData: _wire2api_String,
        constMeta: kRefreshJwtConstMeta,
        argValues: [baseUrl, authToken, jwt, refreshToken],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRefreshJwtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "refresh_jwt",
        argNames: ["baseUrl", "authToken", "jwt", "refreshToken"],
      );

  Future<UserInitServerOutput> initUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String refreshToken,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_init_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(refreshToken)),
        parseSuccessData: _wire2api_user_init_server_output,
        constMeta: kInitUserConstMeta,
        argValues: [baseUrl, authToken, jwt, refreshToken],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_user",
        argNames: ["baseUrl", "authToken", "jwt", "refreshToken"],
      );

  Future<List<UserDeviceList>> getUserDevices(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String lastFetchedTime,
          required String lastFetchedId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_user_devices(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedId)),
        parseSuccessData: _wire2api_list_user_device_list,
        constMeta: kGetUserDevicesConstMeta,
        argValues: [baseUrl, authToken, jwt, lastFetchedTime, lastFetchedId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetUserDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_user_devices",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedId"
        ],
      );

  Future<void> resetPassword(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String newPassword,
          required String decryptedPrivateKey,
          required String decryptedSignKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_reset_password(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(newPassword),
            _api2wire_String(decryptedPrivateKey),
            _api2wire_String(decryptedSignKey)),
        parseSuccessData: _wire2api_unit,
        constMeta: kResetPasswordConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          newPassword,
          decryptedPrivateKey,
          decryptedSignKey
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kResetPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_password",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "newPassword",
          "decryptedPrivateKey",
          "decryptedSignKey"
        ],
      );

  Future<void> changePassword(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          required String oldPassword,
          required String newPassword,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_change_password(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier),
            _api2wire_String(oldPassword),
            _api2wire_String(newPassword)),
        parseSuccessData: _wire2api_unit,
        constMeta: kChangePasswordConstMeta,
        argValues: [
          baseUrl,
          authToken,
          userIdentifier,
          oldPassword,
          newPassword
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kChangePasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_password",
        argNames: [
          "baseUrl",
          "authToken",
          "userIdentifier",
          "oldPassword",
          "newPassword"
        ],
      );

  Future<void> deleteUser(
          {required String baseUrl,
          required String authToken,
          required String userIdentifier,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_delete_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userIdentifier),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_unit,
        constMeta: kDeleteUserConstMeta,
        argValues: [baseUrl, authToken, userIdentifier, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDeleteUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_user",
        argNames: ["baseUrl", "authToken", "userIdentifier", "password"],
      );

  Future<void> deleteDevice(
          {required String baseUrl,
          required String authToken,
          required String deviceIdentifier,
          required String password,
          required String deviceId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_delete_device(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(deviceIdentifier),
            _api2wire_String(password),
            _api2wire_String(deviceId)),
        parseSuccessData: _wire2api_unit,
        constMeta: kDeleteDeviceConstMeta,
        argValues: [baseUrl, authToken, deviceIdentifier, password, deviceId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDeleteDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_device",
        argNames: [
          "baseUrl",
          "authToken",
          "deviceIdentifier",
          "password",
          "deviceId"
        ],
      );

  Future<void> updateUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String userIdentifier,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_update_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(userIdentifier)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUpdateUserConstMeta,
        argValues: [baseUrl, authToken, jwt, userIdentifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUpdateUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_user",
        argNames: ["baseUrl", "authToken", "jwt", "userIdentifier"],
      );

  Future<UserPublicKeyData> userFetchPublicKey(
          {required String baseUrl,
          required String authToken,
          required String userId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_fetch_public_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userId)),
        parseSuccessData: _wire2api_user_public_key_data,
        constMeta: kUserFetchPublicKeyConstMeta,
        argValues: [baseUrl, authToken, userId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserFetchPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_fetch_public_key",
        argNames: ["baseUrl", "authToken", "userId"],
      );

  Future<String> userFetchVerifyKey(
          {required String baseUrl,
          required String authToken,
          required String userId,
          required String verifyKeyId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_fetch_verify_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(userId),
            _api2wire_String(verifyKeyId)),
        parseSuccessData: _wire2api_String,
        constMeta: kUserFetchVerifyKeyConstMeta,
        argValues: [baseUrl, authToken, userId, verifyKeyId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserFetchVerifyKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_fetch_verify_key",
        argNames: ["baseUrl", "authToken", "userId", "verifyKeyId"],
      );

  Future<String> userKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String publicDeviceKey,
          required String preUserKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(publicDeviceKey),
            _api2wire_String(preUserKey)),
        parseSuccessData: _wire2api_String,
        constMeta: kUserKeyRotationConstMeta,
        argValues: [baseUrl, authToken, jwt, publicDeviceKey, preUserKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_key_rotation",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "publicDeviceKey",
          "preUserKey"
        ],
      );

  Future<List<KeyRotationGetOut>> userPreDoneKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_pre_done_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt)),
        parseSuccessData: _wire2api_list_key_rotation_get_out,
        constMeta: kUserPreDoneKeyRotationConstMeta,
        argValues: [baseUrl, authToken, jwt],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserPreDoneKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_pre_done_key_rotation",
        argNames: ["baseUrl", "authToken", "jwt"],
      );

  Future<KeyRotationInput> userGetDoneKeyRotationServerInput(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_get_done_key_rotation_server_input(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_key_rotation_input,
        constMeta: kUserGetDoneKeyRotationServerInputConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kUserGetDoneKeyRotationServerInputConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "user_get_done_key_rotation_server_input",
            argNames: ["serverOutput"],
          );

  Future<void> userFinishKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String serverOutput,
          required String preGroupKey,
          required String publicKey,
          required String privateKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_user_finish_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(serverOutput),
            _api2wire_String(preGroupKey),
            _api2wire_String(publicKey),
            _api2wire_String(privateKey)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUserFinishKeyRotationConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          serverOutput,
          preGroupKey,
          publicKey,
          privateKey
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUserFinishKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "user_finish_key_rotation",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "serverOutput",
          "preGroupKey",
          "publicKey",
          "privateKey"
        ],
      );

  Future<String> groupPrepareCreateGroup(
          {required String creatorsPublicKey, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_prepare_create_group(
            port_, _api2wire_String(creatorsPublicKey)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupPrepareCreateGroupConstMeta,
        argValues: [creatorsPublicKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupPrepareCreateGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_prepare_create_group",
        argNames: ["creatorsPublicKey"],
      );

  Future<String> groupCreateGroup(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String creatorsPublicKey,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_create_group(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(creatorsPublicKey),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupCreateGroupConstMeta,
        argValues: [baseUrl, authToken, jwt, creatorsPublicKey, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupCreateGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_create_group",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "creatorsPublicKey",
          "groupAsMember"
        ],
      );

  Future<String> groupCreateChildGroup(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String parentPublicKey,
          required String parentId,
          required int adminRank,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_create_child_group(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(parentPublicKey),
            _api2wire_String(parentId),
            _api2wire_i32(adminRank),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupCreateChildGroupConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          parentPublicKey,
          parentId,
          adminRank,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupCreateChildGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_create_child_group",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "parentPublicKey",
          "parentId",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<GroupOutData> groupExtractGroupData(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_extract_group_data(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_group_out_data,
        constMeta: kGroupExtractGroupDataConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupExtractGroupDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_extract_group_data",
        argNames: ["serverOutput"],
      );

  Future<List<GroupOutDataKeys>> groupExtractGroupKeys(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_extract_group_keys(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_list_group_out_data_keys,
        constMeta: kGroupExtractGroupKeysConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupExtractGroupKeysConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_extract_group_keys",
        argNames: ["serverOutput"],
      );

  Future<GroupOutData> groupGetGroupData(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_group_data(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_group_out_data,
        constMeta: kGroupGetGroupDataConstMeta,
        argValues: [baseUrl, authToken, jwt, id, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_group_data",
        argNames: ["baseUrl", "authToken", "jwt", "id", "groupAsMember"],
      );

  Future<List<GroupOutDataKeys>> groupGetGroupKeys(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String lastFetchedTime,
          required String lastFetchedKeyId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_group_keys(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedKeyId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_list_group_out_data_keys,
        constMeta: kGroupGetGroupKeysConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          lastFetchedTime,
          lastFetchedKeyId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupKeysConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_group_keys",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "lastFetchedTime",
          "lastFetchedKeyId",
          "groupAsMember"
        ],
      );

  Future<GroupOutDataKeys> groupGetGroupKey(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String keyId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_group_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(keyId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_group_out_data_keys,
        constMeta: kGroupGetGroupKeyConstMeta,
        argValues: [baseUrl, authToken, jwt, id, keyId, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_group_key",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "keyId",
          "groupAsMember"
        ],
      );

  Future<GroupKeyData> groupDecryptKey(
          {required String privateKey,
          required String serverKeyData,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_decrypt_key(port_,
            _api2wire_String(privateKey), _api2wire_String(serverKeyData)),
        parseSuccessData: _wire2api_group_key_data,
        constMeta: kGroupDecryptKeyConstMeta,
        argValues: [privateKey, serverKeyData],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupDecryptKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_decrypt_key",
        argNames: ["privateKey", "serverKeyData"],
      );

  Future<List<GroupUserListItem>> groupGetMember(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String lastFetchedTime,
          required String lastFetchedId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_member(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_list_group_user_list_item,
        constMeta: kGroupGetMemberConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          lastFetchedTime,
          lastFetchedId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetMemberConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_member",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "lastFetchedTime",
          "lastFetchedId",
          "groupAsMember"
        ],
      );

  Future<GroupDataCheckUpdateServerOutput> groupGetGroupUpdates(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_group_updates(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_group_data_check_update_server_output,
        constMeta: kGroupGetGroupUpdatesConstMeta,
        argValues: [baseUrl, authToken, jwt, id, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupUpdatesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_group_updates",
        argNames: ["baseUrl", "authToken", "jwt", "id", "groupAsMember"],
      );

  Future<List<ListGroups>> groupGetGroupsForUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String lastFetchedTime,
          required String lastFetchedGroupId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_groups_for_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedGroupId)),
        parseSuccessData: _wire2api_list_list_groups,
        constMeta: kGroupGetGroupsForUserConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          lastFetchedTime,
          lastFetchedGroupId
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupsForUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_groups_for_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedGroupId"
        ],
      );

  Future<String> groupPrepareKeysForNewMember(
          {required String userPublicKey,
          required String groupKeys,
          required int keyCount,
          required int adminRank,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_prepare_keys_for_new_member(
            port_,
            _api2wire_String(userPublicKey),
            _api2wire_String(groupKeys),
            _api2wire_i32(keyCount),
            _api2wire_i32(adminRank)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupPrepareKeysForNewMemberConstMeta,
        argValues: [userPublicKey, groupKeys, keyCount, adminRank],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupPrepareKeysForNewMemberConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_prepare_keys_for_new_member",
        argNames: ["userPublicKey", "groupKeys", "keyCount", "adminRank"],
      );

  Future<String> groupInviteUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String userId,
          required int keyCount,
          required int adminRank,
          required bool autoInvite,
          required bool groupInvite,
          required String userPublicKey,
          required String groupKeys,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_invite_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(userId),
            _api2wire_i32(keyCount),
            _api2wire_i32(adminRank),
            autoInvite,
            groupInvite,
            _api2wire_String(userPublicKey),
            _api2wire_String(groupKeys),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupInviteUserConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          userId,
          keyCount,
          adminRank,
          autoInvite,
          groupInvite,
          userPublicKey,
          groupKeys,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupInviteUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_invite_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "userId",
          "keyCount",
          "adminRank",
          "autoInvite",
          "groupInvite",
          "userPublicKey",
          "groupKeys",
          "groupAsMember"
        ],
      );

  Future<void> groupInviteUserSession(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required bool autoInvite,
          required String sessionId,
          required String userPublicKey,
          required String groupKeys,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_invite_user_session(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            autoInvite,
            _api2wire_String(sessionId),
            _api2wire_String(userPublicKey),
            _api2wire_String(groupKeys),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupInviteUserSessionConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          autoInvite,
          sessionId,
          userPublicKey,
          groupKeys,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupInviteUserSessionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_invite_user_session",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "autoInvite",
          "sessionId",
          "userPublicKey",
          "groupKeys",
          "groupAsMember"
        ],
      );

  Future<List<GroupInviteReqList>> groupGetInvitesForUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String lastFetchedTime,
          required String lastFetchedGroupId,
          required String groupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_invites_for_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedGroupId),
            _api2wire_String(groupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_list_group_invite_req_list,
        constMeta: kGroupGetInvitesForUserConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          lastFetchedTime,
          lastFetchedGroupId,
          groupId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetInvitesForUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_invites_for_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedGroupId",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<void> groupAcceptInvite(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String groupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_accept_invite(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(groupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupAcceptInviteConstMeta,
        argValues: [baseUrl, authToken, jwt, id, groupId, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupAcceptInviteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_accept_invite",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<void> groupRejectInvite(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String groupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_reject_invite(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(groupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupRejectInviteConstMeta,
        argValues: [baseUrl, authToken, jwt, id, groupId, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupRejectInviteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_reject_invite",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<List<GroupInviteReqList>> groupGetSentJoinReqUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String lastFetchedTime,
          required String lastFetchedGroupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_sent_join_req_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedGroupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_list_group_invite_req_list,
        constMeta: kGroupGetSentJoinReqUserConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          lastFetchedTime,
          lastFetchedGroupId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetSentJoinReqUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_sent_join_req_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedGroupId",
          "groupAsMember"
        ],
      );

  Future<List<GroupInviteReqList>> groupGetSentJoinReq(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required int adminRank,
          required String lastFetchedTime,
          required String lastFetchedGroupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_sent_join_req(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_i32(adminRank),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedGroupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_list_group_invite_req_list,
        constMeta: kGroupGetSentJoinReqConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          adminRank,
          lastFetchedTime,
          lastFetchedGroupId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetSentJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_sent_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "lastFetchedTime",
          "lastFetchedGroupId",
          "groupAsMember"
        ],
      );

  Future<void> groupDeleteSentJoinReqUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String joinReqGroupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_delete_sent_join_req_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(joinReqGroupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupDeleteSentJoinReqUserConstMeta,
        argValues: [baseUrl, authToken, jwt, joinReqGroupId, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupDeleteSentJoinReqUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_delete_sent_join_req_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "joinReqGroupId",
          "groupAsMember"
        ],
      );

  Future<void> groupDeleteSentJoinReq(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required int adminRank,
          required String joinReqGroupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_delete_sent_join_req(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_i32(adminRank),
            _api2wire_String(joinReqGroupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupDeleteSentJoinReqConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          adminRank,
          joinReqGroupId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupDeleteSentJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_delete_sent_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "joinReqGroupId",
          "groupAsMember"
        ],
      );

  Future<void> groupJoinReq(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String groupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_join_req(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(groupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupJoinReqConstMeta,
        argValues: [baseUrl, authToken, jwt, id, groupId, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<List<GroupJoinReqList>> groupGetJoinReqs(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required int adminRank,
          required String lastFetchedTime,
          required String lastFetchedId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_join_reqs(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_i32(adminRank),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastFetchedId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_list_group_join_req_list,
        constMeta: kGroupGetJoinReqsConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          adminRank,
          lastFetchedTime,
          lastFetchedId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetJoinReqsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_join_reqs",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "lastFetchedTime",
          "lastFetchedId",
          "groupAsMember"
        ],
      );

  Future<void> groupRejectJoinReq(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required int adminRank,
          required String rejectedUserId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_reject_join_req(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_i32(adminRank),
            _api2wire_String(rejectedUserId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupRejectJoinReqConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          adminRank,
          rejectedUserId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupRejectJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_reject_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "rejectedUserId",
          "groupAsMember"
        ],
      );

  Future<String> groupAcceptJoinReq(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String userId,
          required int keyCount,
          required int adminRank,
          required String userPublicKey,
          required String groupKeys,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_accept_join_req(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(userId),
            _api2wire_i32(keyCount),
            _api2wire_i32(adminRank),
            _api2wire_String(userPublicKey),
            _api2wire_String(groupKeys),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupAcceptJoinReqConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          userId,
          keyCount,
          adminRank,
          userPublicKey,
          groupKeys,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupAcceptJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_accept_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "userId",
          "keyCount",
          "adminRank",
          "userPublicKey",
          "groupKeys",
          "groupAsMember"
        ],
      );

  Future<void> groupJoinUserSession(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String sessionId,
          required String userPublicKey,
          required String groupKeys,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_join_user_session(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(sessionId),
            _api2wire_String(userPublicKey),
            _api2wire_String(groupKeys),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupJoinUserSessionConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          sessionId,
          userPublicKey,
          groupKeys,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupJoinUserSessionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_join_user_session",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "sessionId",
          "userPublicKey",
          "groupKeys",
          "groupAsMember"
        ],
      );

  Future<void> groupStopGroupInvites(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required int adminRank,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_stop_group_invites(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_i32(adminRank),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupStopGroupInvitesConstMeta,
        argValues: [baseUrl, authToken, jwt, id, adminRank, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupStopGroupInvitesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_stop_group_invites",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<void> leaveGroup(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_leave_group(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kLeaveGroupConstMeta,
        argValues: [baseUrl, authToken, jwt, id, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kLeaveGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "leave_group",
        argNames: ["baseUrl", "authToken", "jwt", "id", "groupAsMember"],
      );

  Future<String> groupPrepareKeyRotation(
          {required String preGroupKey,
          required String publicKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_prepare_key_rotation(
            port_, _api2wire_String(preGroupKey), _api2wire_String(publicKey)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupPrepareKeyRotationConstMeta,
        argValues: [preGroupKey, publicKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupPrepareKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_prepare_key_rotation",
        argNames: ["preGroupKey", "publicKey"],
      );

  Future<String> groupDoneKeyRotation(
          {required String privateKey,
          required String publicKey,
          required String preGroupKey,
          required String serverOutput,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_done_key_rotation(
            port_,
            _api2wire_String(privateKey),
            _api2wire_String(publicKey),
            _api2wire_String(preGroupKey),
            _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupDoneKeyRotationConstMeta,
        argValues: [privateKey, publicKey, preGroupKey, serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupDoneKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_done_key_rotation",
        argNames: ["privateKey", "publicKey", "preGroupKey", "serverOutput"],
      );

  Future<String> groupKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String publicKey,
          required String preGroupKey,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(publicKey),
            _api2wire_String(preGroupKey),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupKeyRotationConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          publicKey,
          preGroupKey,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_key_rotation",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "publicKey",
          "preGroupKey",
          "groupAsMember"
        ],
      );

  Future<List<KeyRotationGetOut>> groupPreDoneKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_pre_done_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_list_key_rotation_get_out,
        constMeta: kGroupPreDoneKeyRotationConstMeta,
        argValues: [baseUrl, authToken, jwt, id, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupPreDoneKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_pre_done_key_rotation",
        argNames: ["baseUrl", "authToken", "jwt", "id", "groupAsMember"],
      );

  Future<KeyRotationInput> groupGetDoneKeyRotationServerInput(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_done_key_rotation_server_input(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_key_rotation_input,
        constMeta: kGroupGetDoneKeyRotationServerInputConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kGroupGetDoneKeyRotationServerInputConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "group_get_done_key_rotation_server_input",
            argNames: ["serverOutput"],
          );

  Future<void> groupFinishKeyRotation(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String serverOutput,
          required String preGroupKey,
          required String publicKey,
          required String privateKey,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_finish_key_rotation(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(serverOutput),
            _api2wire_String(preGroupKey),
            _api2wire_String(publicKey),
            _api2wire_String(privateKey),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupFinishKeyRotationConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          serverOutput,
          preGroupKey,
          publicKey,
          privateKey,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupFinishKeyRotationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_finish_key_rotation",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "serverOutput",
          "preGroupKey",
          "publicKey",
          "privateKey",
          "groupAsMember"
        ],
      );

  Future<String> groupPrepareUpdateRank(
          {required String userId,
          required int rank,
          required int adminRank,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_prepare_update_rank(
            port_,
            _api2wire_String(userId),
            _api2wire_i32(rank),
            _api2wire_i32(adminRank)),
        parseSuccessData: _wire2api_String,
        constMeta: kGroupPrepareUpdateRankConstMeta,
        argValues: [userId, rank, adminRank],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupPrepareUpdateRankConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_prepare_update_rank",
        argNames: ["userId", "rank", "adminRank"],
      );

  Future<void> groupUpdateRank(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String userId,
          required int rank,
          required int adminRank,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_update_rank(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(userId),
            _api2wire_i32(rank),
            _api2wire_i32(adminRank),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupUpdateRankConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          userId,
          rank,
          adminRank,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupUpdateRankConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_update_rank",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "userId",
          "rank",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<void> groupKickUser(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String userId,
          required int adminRank,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_kick_user(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(userId),
            _api2wire_i32(adminRank),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupKickUserConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          id,
          userId,
          adminRank,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupKickUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_kick_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "userId",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<void> groupDeleteGroup(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required int adminRank,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_delete_group(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_i32(adminRank),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGroupDeleteGroupConstMeta,
        argValues: [baseUrl, authToken, jwt, id, adminRank, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupDeleteGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_delete_group",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<UserPublicKeyData> groupGetPublicKeyData(
          {required String baseUrl,
          required String authToken,
          required String id,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_group_get_public_key_data(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(id)),
        parseSuccessData: _wire2api_user_public_key_data,
        constMeta: kGroupGetPublicKeyDataConstMeta,
        argValues: [baseUrl, authToken, id],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGroupGetPublicKeyDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_public_key_data",
        argNames: ["baseUrl", "authToken", "id"],
      );

  Future<EncryptedHead> splitHeadAndEncryptedData(
          {required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_split_head_and_encrypted_data(
            port_, _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_encrypted_head,
        constMeta: kSplitHeadAndEncryptedDataConstMeta,
        argValues: [data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSplitHeadAndEncryptedDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "split_head_and_encrypted_data",
        argNames: ["data"],
      );

  Future<EncryptedHead> splitHeadAndEncryptedString(
          {required String data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_split_head_and_encrypted_string(
            port_, _api2wire_String(data)),
        parseSuccessData: _wire2api_encrypted_head,
        constMeta: kSplitHeadAndEncryptedStringConstMeta,
        argValues: [data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSplitHeadAndEncryptedStringConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "split_head_and_encrypted_string",
        argNames: ["data"],
      );

  Future<EncryptedHead> deserializeHeadFromString(
          {required String head, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_deserialize_head_from_string(
            port_, _api2wire_String(head)),
        parseSuccessData: _wire2api_encrypted_head,
        constMeta: kDeserializeHeadFromStringConstMeta,
        argValues: [head],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDeserializeHeadFromStringConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "deserialize_head_from_string",
        argNames: ["head"],
      );

  Future<CryptoRawOutput> encryptRawSymmetric(
          {required String key,
          required Uint8List data,
          required String signKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_encrypt_raw_symmetric(
            port_,
            _api2wire_String(key),
            _api2wire_uint_8_list(data),
            _api2wire_String(signKey)),
        parseSuccessData: _wire2api_crypto_raw_output,
        constMeta: kEncryptRawSymmetricConstMeta,
        argValues: [key, data, signKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEncryptRawSymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt_raw_symmetric",
        argNames: ["key", "data", "signKey"],
      );

  Future<Uint8List> decryptRawSymmetric(
          {required String key,
          required Uint8List encryptedData,
          required String head,
          required String verifyKeyData,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt_raw_symmetric(
            port_,
            _api2wire_String(key),
            _api2wire_uint_8_list(encryptedData),
            _api2wire_String(head),
            _api2wire_String(verifyKeyData)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kDecryptRawSymmetricConstMeta,
        argValues: [key, encryptedData, head, verifyKeyData],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptRawSymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_raw_symmetric",
        argNames: ["key", "encryptedData", "head", "verifyKeyData"],
      );

  Future<Uint8List> encryptSymmetric(
          {required String key,
          required Uint8List data,
          required String signKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_encrypt_symmetric(
            port_,
            _api2wire_String(key),
            _api2wire_uint_8_list(data),
            _api2wire_String(signKey)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kEncryptSymmetricConstMeta,
        argValues: [key, data, signKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEncryptSymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt_symmetric",
        argNames: ["key", "data", "signKey"],
      );

  Future<Uint8List> decryptSymmetric(
          {required String key,
          required Uint8List encryptedData,
          required String verifyKeyData,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt_symmetric(
            port_,
            _api2wire_String(key),
            _api2wire_uint_8_list(encryptedData),
            _api2wire_String(verifyKeyData)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kDecryptSymmetricConstMeta,
        argValues: [key, encryptedData, verifyKeyData],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptSymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_symmetric",
        argNames: ["key", "encryptedData", "verifyKeyData"],
      );

  Future<String> encryptStringSymmetric(
          {required String key,
          required String data,
          required String signKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_encrypt_string_symmetric(
            port_,
            _api2wire_String(key),
            _api2wire_String(data),
            _api2wire_String(signKey)),
        parseSuccessData: _wire2api_String,
        constMeta: kEncryptStringSymmetricConstMeta,
        argValues: [key, data, signKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEncryptStringSymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt_string_symmetric",
        argNames: ["key", "data", "signKey"],
      );

  Future<String> decryptStringSymmetric(
          {required String key,
          required String encryptedData,
          required String verifyKeyData,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt_string_symmetric(
            port_,
            _api2wire_String(key),
            _api2wire_String(encryptedData),
            _api2wire_String(verifyKeyData)),
        parseSuccessData: _wire2api_String,
        constMeta: kDecryptStringSymmetricConstMeta,
        argValues: [key, encryptedData, verifyKeyData],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptStringSymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_string_symmetric",
        argNames: ["key", "encryptedData", "verifyKeyData"],
      );

  Future<CryptoRawOutput> encryptRawAsymmetric(
          {required String replyPublicKeyData,
          required Uint8List data,
          required String signKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_encrypt_raw_asymmetric(
            port_,
            _api2wire_String(replyPublicKeyData),
            _api2wire_uint_8_list(data),
            _api2wire_String(signKey)),
        parseSuccessData: _wire2api_crypto_raw_output,
        constMeta: kEncryptRawAsymmetricConstMeta,
        argValues: [replyPublicKeyData, data, signKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEncryptRawAsymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt_raw_asymmetric",
        argNames: ["replyPublicKeyData", "data", "signKey"],
      );

  Future<Uint8List> decryptRawAsymmetric(
          {required String privateKey,
          required Uint8List encryptedData,
          required String head,
          required String verifyKeyData,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt_raw_asymmetric(
            port_,
            _api2wire_String(privateKey),
            _api2wire_uint_8_list(encryptedData),
            _api2wire_String(head),
            _api2wire_String(verifyKeyData)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kDecryptRawAsymmetricConstMeta,
        argValues: [privateKey, encryptedData, head, verifyKeyData],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptRawAsymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_raw_asymmetric",
        argNames: ["privateKey", "encryptedData", "head", "verifyKeyData"],
      );

  Future<Uint8List> encryptAsymmetric(
          {required String replyPublicKeyData,
          required Uint8List data,
          required String signKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_encrypt_asymmetric(
            port_,
            _api2wire_String(replyPublicKeyData),
            _api2wire_uint_8_list(data),
            _api2wire_String(signKey)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kEncryptAsymmetricConstMeta,
        argValues: [replyPublicKeyData, data, signKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEncryptAsymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt_asymmetric",
        argNames: ["replyPublicKeyData", "data", "signKey"],
      );

  Future<Uint8List> decryptAsymmetric(
          {required String privateKey,
          required Uint8List encryptedData,
          required String verifyKeyData,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt_asymmetric(
            port_,
            _api2wire_String(privateKey),
            _api2wire_uint_8_list(encryptedData),
            _api2wire_String(verifyKeyData)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kDecryptAsymmetricConstMeta,
        argValues: [privateKey, encryptedData, verifyKeyData],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptAsymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_asymmetric",
        argNames: ["privateKey", "encryptedData", "verifyKeyData"],
      );

  Future<String> encryptStringAsymmetric(
          {required String replyPublicKeyData,
          required String data,
          required String signKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_encrypt_string_asymmetric(
            port_,
            _api2wire_String(replyPublicKeyData),
            _api2wire_String(data),
            _api2wire_String(signKey)),
        parseSuccessData: _wire2api_String,
        constMeta: kEncryptStringAsymmetricConstMeta,
        argValues: [replyPublicKeyData, data, signKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEncryptStringAsymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt_string_asymmetric",
        argNames: ["replyPublicKeyData", "data", "signKey"],
      );

  Future<String> decryptStringAsymmetric(
          {required String privateKey,
          required String encryptedData,
          required String verifyKeyData,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt_string_asymmetric(
            port_,
            _api2wire_String(privateKey),
            _api2wire_String(encryptedData),
            _api2wire_String(verifyKeyData)),
        parseSuccessData: _wire2api_String,
        constMeta: kDecryptStringAsymmetricConstMeta,
        argValues: [privateKey, encryptedData, verifyKeyData],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptStringAsymmetricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_string_asymmetric",
        argNames: ["privateKey", "encryptedData", "verifyKeyData"],
      );

  Future<NonRegisteredKeyOutput> generateNonRegisterSymKey(
          {required String masterKey, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_generate_non_register_sym_key(
            port_, _api2wire_String(masterKey)),
        parseSuccessData: _wire2api_non_registered_key_output,
        constMeta: kGenerateNonRegisterSymKeyConstMeta,
        argValues: [masterKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateNonRegisterSymKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_non_register_sym_key",
        argNames: ["masterKey"],
      );

  Future<NonRegisteredKeyOutput> generateNonRegisterSymKeyByPublicKey(
          {required String replyPublicKey, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_generate_non_register_sym_key_by_public_key(
                port_, _api2wire_String(replyPublicKey)),
        parseSuccessData: _wire2api_non_registered_key_output,
        constMeta: kGenerateNonRegisterSymKeyByPublicKeyConstMeta,
        argValues: [replyPublicKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kGenerateNonRegisterSymKeyByPublicKeyConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "generate_non_register_sym_key_by_public_key",
            argNames: ["replyPublicKey"],
          );

  Future<String> decryptSymKey(
          {required String masterKey,
          required String encryptedSymmetricKeyInfo,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt_sym_key(
            port_,
            _api2wire_String(masterKey),
            _api2wire_String(encryptedSymmetricKeyInfo)),
        parseSuccessData: _wire2api_String,
        constMeta: kDecryptSymKeyConstMeta,
        argValues: [masterKey, encryptedSymmetricKeyInfo],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptSymKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_sym_key",
        argNames: ["masterKey", "encryptedSymmetricKeyInfo"],
      );

  Future<String> decryptSymKeyByPrivateKey(
          {required String privateKey,
          required String encryptedSymmetricKeyInfo,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt_sym_key_by_private_key(
            port_,
            _api2wire_String(privateKey),
            _api2wire_String(encryptedSymmetricKeyInfo)),
        parseSuccessData: _wire2api_String,
        constMeta: kDecryptSymKeyByPrivateKeyConstMeta,
        argValues: [privateKey, encryptedSymmetricKeyInfo],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptSymKeyByPrivateKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_sym_key_by_private_key",
        argNames: ["privateKey", "encryptedSymmetricKeyInfo"],
      );

  Future<KeyGenOutput> generateAndRegisterSymKey(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String masterKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_generate_and_register_sym_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(masterKey)),
        parseSuccessData: _wire2api_key_gen_output,
        constMeta: kGenerateAndRegisterSymKeyConstMeta,
        argValues: [baseUrl, authToken, jwt, masterKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateAndRegisterSymKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_and_register_sym_key",
        argNames: ["baseUrl", "authToken", "jwt", "masterKey"],
      );

  Future<KeyGenOutput> generateAndRegisterSymKeyByPublicKey(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String publicKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_generate_and_register_sym_key_by_public_key(
                port_,
                _api2wire_String(baseUrl),
                _api2wire_String(authToken),
                _api2wire_String(jwt),
                _api2wire_String(publicKey)),
        parseSuccessData: _wire2api_key_gen_output,
        constMeta: kGenerateAndRegisterSymKeyByPublicKeyConstMeta,
        argValues: [baseUrl, authToken, jwt, publicKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kGenerateAndRegisterSymKeyByPublicKeyConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "generate_and_register_sym_key_by_public_key",
            argNames: ["baseUrl", "authToken", "jwt", "publicKey"],
          );

  Future<String> getSymKeyById(
          {required String baseUrl,
          required String authToken,
          required String keyId,
          required String masterKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_sym_key_by_id(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(keyId),
            _api2wire_String(masterKey)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetSymKeyByIdConstMeta,
        argValues: [baseUrl, authToken, keyId, masterKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetSymKeyByIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_sym_key_by_id",
        argNames: ["baseUrl", "authToken", "keyId", "masterKey"],
      );

  Future<String> getSymKeyByIdByPrivateKey(
          {required String baseUrl,
          required String authToken,
          required String keyId,
          required String privateKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_sym_key_by_id_by_private_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(keyId),
            _api2wire_String(privateKey)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetSymKeyByIdByPrivateKeyConstMeta,
        argValues: [baseUrl, authToken, keyId, privateKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetSymKeyByIdByPrivateKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_sym_key_by_id_by_private_key",
        argNames: ["baseUrl", "authToken", "keyId", "privateKey"],
      );

  Future<KeysToMasterKeyFetch> getKeysForMasterKey(
          {required String baseUrl,
          required String authToken,
          required String masterKeyId,
          required String lastFetchedTime,
          required String lastKeyId,
          required String masterKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_keys_for_master_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(masterKeyId),
            _api2wire_String(lastFetchedTime),
            _api2wire_String(lastKeyId),
            _api2wire_String(masterKey)),
        parseSuccessData: _wire2api_keys_to_master_key_fetch,
        constMeta: kGetKeysForMasterKeyConstMeta,
        argValues: [
          baseUrl,
          authToken,
          masterKeyId,
          lastFetchedTime,
          lastKeyId,
          masterKey
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetKeysForMasterKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_keys_for_master_key",
        argNames: [
          "baseUrl",
          "authToken",
          "masterKeyId",
          "lastFetchedTime",
          "lastKeyId",
          "masterKey"
        ],
      );

  Future<void> deleteSymKey(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String keyId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_delete_sym_key(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(keyId)),
        parseSuccessData: _wire2api_unit,
        constMeta: kDeleteSymKeyConstMeta,
        argValues: [baseUrl, authToken, jwt, keyId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDeleteSymKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_sym_key",
        argNames: ["baseUrl", "authToken", "jwt", "keyId"],
      );

  Future<FileData> fileDownloadFileMeta(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String id,
          required String groupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_download_file_meta(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(id),
            _api2wire_String(groupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_file_data,
        constMeta: kFileDownloadFileMetaConstMeta,
        argValues: [baseUrl, authToken, jwt, id, groupId, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFileDownloadFileMetaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_download_file_meta",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<Uint8List> fileDownloadAndDecryptFilePart(
          {required String baseUrl,
          required String urlPrefix,
          required String authToken,
          required String partId,
          required String contentKey,
          required String verifyKeyData,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_download_and_decrypt_file_part(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(urlPrefix),
            _api2wire_String(authToken),
            _api2wire_String(partId),
            _api2wire_String(contentKey),
            _api2wire_String(verifyKeyData)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kFileDownloadAndDecryptFilePartConstMeta,
        argValues: [
          baseUrl,
          urlPrefix,
          authToken,
          partId,
          contentKey,
          verifyKeyData
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFileDownloadAndDecryptFilePartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_download_and_decrypt_file_part",
        argNames: [
          "baseUrl",
          "urlPrefix",
          "authToken",
          "partId",
          "contentKey",
          "verifyKeyData"
        ],
      );

  Future<List<FilePartListItem>> fileDownloadPartList(
          {required String baseUrl,
          required String authToken,
          required String fileId,
          required String lastSequence,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_download_part_list(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(fileId),
            _api2wire_String(lastSequence)),
        parseSuccessData: _wire2api_list_file_part_list_item,
        constMeta: kFileDownloadPartListConstMeta,
        argValues: [baseUrl, authToken, fileId, lastSequence],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFileDownloadPartListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_download_part_list",
        argNames: ["baseUrl", "authToken", "fileId", "lastSequence"],
      );

  Future<FileRegisterOutput> fileRegisterFile(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String masterKeyId,
          required String contentKey,
          required String belongsToId,
          required String belongsToType,
          required String fileName,
          required String groupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_register_file(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(masterKeyId),
            _api2wire_String(contentKey),
            _api2wire_String(belongsToId),
            _api2wire_String(belongsToType),
            _api2wire_String(fileName),
            _api2wire_String(groupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_file_register_output,
        constMeta: kFileRegisterFileConstMeta,
        argValues: [
          baseUrl,
          authToken,
          jwt,
          masterKeyId,
          contentKey,
          belongsToId,
          belongsToType,
          fileName,
          groupId,
          groupAsMember
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFileRegisterFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_register_file",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "masterKeyId",
          "contentKey",
          "belongsToId",
          "belongsToType",
          "fileName",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<FilePrepareRegister> filePrepareRegisterFile(
          {required String masterKeyId,
          required String contentKey,
          required String belongsToId,
          required String belongsToType,
          required String fileName,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_prepare_register_file(
            port_,
            _api2wire_String(masterKeyId),
            _api2wire_String(contentKey),
            _api2wire_String(belongsToId),
            _api2wire_String(belongsToType),
            _api2wire_String(fileName)),
        parseSuccessData: _wire2api_file_prepare_register,
        constMeta: kFilePrepareRegisterFileConstMeta,
        argValues: [
          masterKeyId,
          contentKey,
          belongsToId,
          belongsToType,
          fileName
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFilePrepareRegisterFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_prepare_register_file",
        argNames: [
          "masterKeyId",
          "contentKey",
          "belongsToId",
          "belongsToType",
          "fileName"
        ],
      );

  Future<FileDoneRegister> fileDoneRegisterFile(
          {required String serverOutput, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_done_register_file(
            port_, _api2wire_String(serverOutput)),
        parseSuccessData: _wire2api_file_done_register,
        constMeta: kFileDoneRegisterFileConstMeta,
        argValues: [serverOutput],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFileDoneRegisterFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_done_register_file",
        argNames: ["serverOutput"],
      );

  Future<void> fileUploadPart(
          {required String baseUrl,
          required String urlPrefix,
          required String authToken,
          required String jwt,
          required String sessionId,
          required bool end,
          required int sequence,
          required String contentKey,
          required String signKey,
          required Uint8List part,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_upload_part(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(urlPrefix),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(sessionId),
            end,
            _api2wire_i32(sequence),
            _api2wire_String(contentKey),
            _api2wire_String(signKey),
            _api2wire_uint_8_list(part)),
        parseSuccessData: _wire2api_unit,
        constMeta: kFileUploadPartConstMeta,
        argValues: [
          baseUrl,
          urlPrefix,
          authToken,
          jwt,
          sessionId,
          end,
          sequence,
          contentKey,
          signKey,
          part
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFileUploadPartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_upload_part",
        argNames: [
          "baseUrl",
          "urlPrefix",
          "authToken",
          "jwt",
          "sessionId",
          "end",
          "sequence",
          "contentKey",
          "signKey",
          "part"
        ],
      );

  Future<void> fileFileNameUpdate(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String fileId,
          required String contentKey,
          required String fileName,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_file_name_update(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(fileId),
            _api2wire_String(contentKey),
            _api2wire_String(fileName)),
        parseSuccessData: _wire2api_unit,
        constMeta: kFileFileNameUpdateConstMeta,
        argValues: [baseUrl, authToken, jwt, fileId, contentKey, fileName],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFileFileNameUpdateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_file_name_update",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "fileId",
          "contentKey",
          "fileName"
        ],
      );

  Future<void> fileDeleteFile(
          {required String baseUrl,
          required String authToken,
          required String jwt,
          required String fileId,
          required String groupId,
          required String groupAsMember,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_file_delete_file(
            port_,
            _api2wire_String(baseUrl),
            _api2wire_String(authToken),
            _api2wire_String(jwt),
            _api2wire_String(fileId),
            _api2wire_String(groupId),
            _api2wire_String(groupAsMember)),
        parseSuccessData: _wire2api_unit,
        constMeta: kFileDeleteFileConstMeta,
        argValues: [baseUrl, authToken, jwt, fileId, groupId, groupAsMember],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFileDeleteFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "file_delete_file",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "fileId",
          "groupId",
          "groupAsMember"
        ],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_bool(bool raw) {
    return raw ? 1 : 0;
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

List<String> _wire2api_StringList(dynamic raw) {
  return (raw as List<dynamic>).cast<String>();
}

BelongsToType _wire2api_belongs_to_type(dynamic raw) {
  return BelongsToType.values[raw];
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

SignHead _wire2api_box_autoadd_sign_head(dynamic raw) {
  return _wire2api_sign_head(raw);
}

Claims _wire2api_claims(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 6)
    throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
  return Claims(
    aud: _wire2api_String(arr[0]),
    sub: _wire2api_String(arr[1]),
    exp: _wire2api_usize(arr[2]),
    iat: _wire2api_usize(arr[3]),
    groupId: _wire2api_String(arr[4]),
    fresh: _wire2api_bool(arr[5]),
  );
}

CryptoRawOutput _wire2api_crypto_raw_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return CryptoRawOutput(
    head: _wire2api_String(arr[0]),
    data: _wire2api_uint_8_list(arr[1]),
  );
}

DeviceKeyData _wire2api_device_key_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 6)
    throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
  return DeviceKeyData(
    privateKey: _wire2api_String(arr[0]),
    publicKey: _wire2api_String(arr[1]),
    signKey: _wire2api_String(arr[2]),
    verifyKey: _wire2api_String(arr[3]),
    exportedPublicKey: _wire2api_String(arr[4]),
    exportedVerifyKey: _wire2api_String(arr[5]),
  );
}

EncryptedHead _wire2api_encrypted_head(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return EncryptedHead(
    id: _wire2api_String(arr[0]),
    sign: _wire2api_opt_box_autoadd_sign_head(arr[1]),
  );
}

FileData _wire2api_file_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 8)
    throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
  return FileData(
    fileId: _wire2api_String(arr[0]),
    masterKeyId: _wire2api_String(arr[1]),
    owner: _wire2api_String(arr[2]),
    belongsTo: _wire2api_opt_String(arr[3]),
    belongsToType: _wire2api_belongs_to_type(arr[4]),
    keyId: _wire2api_String(arr[5]),
    encryptedFileName: _wire2api_opt_String(arr[6]),
    partList: _wire2api_list_file_part_list_item(arr[7]),
  );
}

FileDoneRegister _wire2api_file_done_register(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return FileDoneRegister(
    fileId: _wire2api_String(arr[0]),
    sessionId: _wire2api_String(arr[1]),
  );
}

FilePartListItem _wire2api_file_part_list_item(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return FilePartListItem(
    partId: _wire2api_String(arr[0]),
    sequence: _wire2api_i32(arr[1]),
    externStorage: _wire2api_bool(arr[2]),
  );
}

FilePrepareRegister _wire2api_file_prepare_register(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return FilePrepareRegister(
    encryptedFileName: _wire2api_String(arr[0]),
    serverInput: _wire2api_String(arr[1]),
  );
}

FileRegisterOutput _wire2api_file_register_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return FileRegisterOutput(
    fileId: _wire2api_String(arr[0]),
    sessionId: _wire2api_String(arr[1]),
    encryptedFileName: _wire2api_String(arr[2]),
  );
}

GeneratedRegisterData _wire2api_generated_register_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return GeneratedRegisterData(
    identifier: _wire2api_String(arr[0]),
    password: _wire2api_String(arr[1]),
  );
}

GroupDataCheckUpdateServerOutput
    _wire2api_group_data_check_update_server_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return GroupDataCheckUpdateServerOutput(
    keyUpdate: _wire2api_bool(arr[0]),
    rank: _wire2api_i32(arr[1]),
  );
}

GroupInviteReqList _wire2api_group_invite_req_list(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return GroupInviteReqList(
    groupId: _wire2api_String(arr[0]),
    time: _wire2api_String(arr[1]),
  );
}

GroupJoinReqList _wire2api_group_join_req_list(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return GroupJoinReqList(
    userId: _wire2api_String(arr[0]),
    time: _wire2api_String(arr[1]),
    userType: _wire2api_i32(arr[2]),
  );
}

GroupKeyData _wire2api_group_key_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 5)
    throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
  return GroupKeyData(
    privateGroupKey: _wire2api_String(arr[0]),
    publicGroupKey: _wire2api_String(arr[1]),
    groupKey: _wire2api_String(arr[2]),
    time: _wire2api_String(arr[3]),
    groupKeyId: _wire2api_String(arr[4]),
  );
}

GroupOutData _wire2api_group_out_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 9)
    throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
  return GroupOutData(
    groupId: _wire2api_String(arr[0]),
    parentGroupId: _wire2api_String(arr[1]),
    rank: _wire2api_i32(arr[2]),
    keyUpdate: _wire2api_bool(arr[3]),
    createdTime: _wire2api_String(arr[4]),
    joinedTime: _wire2api_String(arr[5]),
    keys: _wire2api_list_group_out_data_keys(arr[6]),
    accessByGroupAsMember: _wire2api_opt_String(arr[7]),
    accessByParentGroup: _wire2api_opt_String(arr[8]),
  );
}

GroupOutDataKeys _wire2api_group_out_data_keys(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return GroupOutDataKeys(
    privateKeyId: _wire2api_String(arr[0]),
    keyData: _wire2api_String(arr[1]),
  );
}

GroupUserListItem _wire2api_group_user_list_item(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return GroupUserListItem(
    userId: _wire2api_String(arr[0]),
    rank: _wire2api_i32(arr[1]),
    joinedTime: _wire2api_String(arr[2]),
    userType: _wire2api_i32(arr[3]),
  );
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

KeyGenOutput _wire2api_key_gen_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return KeyGenOutput(
    key: _wire2api_String(arr[0]),
    keyId: _wire2api_String(arr[1]),
  );
}

KeyRotationGetOut _wire2api_key_rotation_get_out(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return KeyRotationGetOut(
    preGroupKeyId: _wire2api_String(arr[0]),
    newGroupKeyId: _wire2api_String(arr[1]),
    encryptedEphKeyKeyId: _wire2api_String(arr[2]),
    serverOutput: _wire2api_String(arr[3]),
  );
}

KeyRotationInput _wire2api_key_rotation_input(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 7)
    throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
  return KeyRotationInput(
    encryptedEphemeralKeyByGroupKeyAndPublicKey: _wire2api_String(arr[0]),
    encryptedGroupKeyByEphemeral: _wire2api_String(arr[1]),
    ephemeralAlg: _wire2api_String(arr[2]),
    encryptedEphKeyKeyId: _wire2api_String(arr[3]),
    previousGroupKeyId: _wire2api_String(arr[4]),
    time: _wire2api_String(arr[5]),
    newGroupKeyId: _wire2api_String(arr[6]),
  );
}

KeysToMasterKeyFetch _wire2api_keys_to_master_key_fetch(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return KeysToMasterKeyFetch(
    lastFetchedTime: _wire2api_String(arr[0]),
    lastKeyId: _wire2api_String(arr[1]),
    keys: _wire2api_StringList(arr[2]),
  );
}

List<FilePartListItem> _wire2api_list_file_part_list_item(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_file_part_list_item).toList();
}

List<GroupInviteReqList> _wire2api_list_group_invite_req_list(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_group_invite_req_list).toList();
}

List<GroupJoinReqList> _wire2api_list_group_join_req_list(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_group_join_req_list).toList();
}

List<GroupOutDataKeys> _wire2api_list_group_out_data_keys(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_group_out_data_keys).toList();
}

List<GroupUserListItem> _wire2api_list_group_user_list_item(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_group_user_list_item).toList();
}

ListGroups _wire2api_list_groups(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 5)
    throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
  return ListGroups(
    groupId: _wire2api_String(arr[0]),
    time: _wire2api_String(arr[1]),
    joinedTime: _wire2api_String(arr[2]),
    rank: _wire2api_i32(arr[3]),
    parent: _wire2api_opt_String(arr[4]),
  );
}

List<KeyRotationGetOut> _wire2api_list_key_rotation_get_out(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_key_rotation_get_out).toList();
}

List<ListGroups> _wire2api_list_list_groups(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_list_groups).toList();
}

List<UserDeviceList> _wire2api_list_user_device_list(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_user_device_list).toList();
}

List<UserKeyData> _wire2api_list_user_key_data(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_user_key_data).toList();
}

NonRegisteredKeyOutput _wire2api_non_registered_key_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return NonRegisteredKeyOutput(
    key: _wire2api_String(arr[0]),
    encryptedKey: _wire2api_String(arr[1]),
  );
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

SignHead? _wire2api_opt_box_autoadd_sign_head(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_sign_head(raw);
}

PreRegisterDeviceData _wire2api_pre_register_device_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PreRegisterDeviceData(
    input: _wire2api_String(arr[0]),
    exportedPublicKey: _wire2api_String(arr[1]),
  );
}

PrepareLoginOutput _wire2api_prepare_login_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PrepareLoginOutput(
    authKey: _wire2api_String(arr[0]),
    masterKeyEncryptionKey: _wire2api_String(arr[1]),
  );
}

RegisterDeviceData _wire2api_register_device_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return RegisterDeviceData(
    sessionId: _wire2api_String(arr[0]),
    exportedPublicKey: _wire2api_String(arr[1]),
  );
}

SignHead _wire2api_sign_head(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return SignHead(
    id: _wire2api_String(arr[0]),
    alg: _wire2api_String(arr[1]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

UserData _wire2api_user_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 6)
    throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
  return UserData(
    jwt: _wire2api_String(arr[0]),
    userId: _wire2api_String(arr[1]),
    deviceId: _wire2api_String(arr[2]),
    refreshToken: _wire2api_String(arr[3]),
    keys: _wire2api_device_key_data(arr[4]),
    userKeys: _wire2api_list_user_key_data(arr[5]),
  );
}

UserDeviceList _wire2api_user_device_list(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return UserDeviceList(
    deviceId: _wire2api_String(arr[0]),
    time: _wire2api_String(arr[1]),
    deviceIdentifier: _wire2api_String(arr[2]),
  );
}

UserInitServerOutput _wire2api_user_init_server_output(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return UserInitServerOutput(
    jwt: _wire2api_String(arr[0]),
    invites: _wire2api_list_group_invite_req_list(arr[1]),
  );
}

UserKeyData _wire2api_user_key_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 9)
    throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
  return UserKeyData(
    privateKey: _wire2api_String(arr[0]),
    publicKey: _wire2api_String(arr[1]),
    groupKey: _wire2api_String(arr[2]),
    time: _wire2api_String(arr[3]),
    groupKeyId: _wire2api_String(arr[4]),
    signKey: _wire2api_String(arr[5]),
    verifyKey: _wire2api_String(arr[6]),
    exportedPublicKey: _wire2api_String(arr[7]),
    exportedVerifyKey: _wire2api_String(arr[8]),
  );
}

UserPublicKeyData _wire2api_user_public_key_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return UserPublicKeyData(
    publicKey: _wire2api_String(arr[0]),
    publicKeyId: _wire2api_String(arr[1]),
  );
}

int _wire2api_usize(dynamic raw) {
  return raw as int;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class SentcFlutterWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SentcFlutterWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SentcFlutterWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_decode_jwt(
    int port_,
    ffi.Pointer<wire_uint_8_list> jwt,
  ) {
    return _wire_decode_jwt(
      port_,
      jwt,
    );
  }

  late final _wire_decode_jwtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_decode_jwt');
  late final _wire_decode_jwt = _wire_decode_jwtPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_check_user_identifier_available(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_check_user_identifier_available(
      port_,
      base_url,
      auth_token,
      user_identifier,
    );
  }

  late final _wire_check_user_identifier_availablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_check_user_identifier_available');
  late final _wire_check_user_identifier_available =
      _wire_check_user_identifier_availablePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_check_user_identifier_available(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_prepare_check_user_identifier_available(
      port_,
      user_identifier,
    );
  }

  late final _wire_prepare_check_user_identifier_availablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_prepare_check_user_identifier_available');
  late final _wire_prepare_check_user_identifier_available =
      _wire_prepare_check_user_identifier_availablePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_check_user_identifier_available(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_check_user_identifier_available(
      port_,
      server_output,
    );
  }

  late final _wire_done_check_user_identifier_availablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_done_check_user_identifier_available');
  late final _wire_done_check_user_identifier_available =
      _wire_done_check_user_identifier_availablePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_user_register_data(
    int port_,
  ) {
    return _wire_generate_user_register_data(
      port_,
    );
  }

  late final _wire_generate_user_register_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_generate_user_register_data');
  late final _wire_generate_user_register_data =
      _wire_generate_user_register_dataPtr.asFunction<void Function(int)>();

  void wire_prepare_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_prepare_register(
      port_,
      user_identifier,
      password,
    );
  }

  late final _wire_prepare_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_prepare_register');
  late final _wire_prepare_register = _wire_prepare_registerPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_register(
      port_,
      server_output,
    );
  }

  late final _wire_done_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_done_register');
  late final _wire_done_register = _wire_done_registerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_register(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
    );
  }

  late final _wire_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register');
  late final _wire_register = _wire_registerPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_register_device_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_prepare_register_device_start(
      port_,
      device_identifier,
      password,
    );
  }

  late final _wire_prepare_register_device_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_prepare_register_device_start');
  late final _wire_prepare_register_device_start =
      _wire_prepare_register_device_startPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_register_device_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_register_device_start(
      port_,
      server_output,
    );
  }

  late final _wire_done_register_device_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_done_register_device_start');
  late final _wire_done_register_device_start =
      _wire_done_register_device_startPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_device_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> device_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_register_device_start(
      port_,
      base_url,
      auth_token,
      device_identifier,
      password,
    );
  }

  late final _wire_register_device_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_device_start');
  late final _wire_register_device_start =
      _wire_register_device_startPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_register_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
    ffi.Pointer<wire_uint_8_list> user_keys,
    int key_count,
  ) {
    return _wire_prepare_register_device(
      port_,
      server_output,
      user_keys,
      key_count,
    );
  }

  late final _wire_prepare_register_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_prepare_register_device');
  late final _wire_prepare_register_device =
      _wire_prepare_register_devicePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_register_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> server_output,
    int key_count,
    ffi.Pointer<wire_uint_8_list> user_keys,
  ) {
    return _wire_register_device(
      port_,
      base_url,
      auth_token,
      jwt,
      server_output,
      key_count,
      user_keys,
    );
  }

  late final _wire_register_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_device');
  late final _wire_register_device = _wire_register_devicePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_device_key_session_upload(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> user_public_key,
    ffi.Pointer<wire_uint_8_list> group_keys,
  ) {
    return _wire_user_device_key_session_upload(
      port_,
      base_url,
      auth_token,
      jwt,
      session_id,
      user_public_key,
      group_keys,
    );
  }

  late final _wire_user_device_key_session_uploadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_user_device_key_session_upload');
  late final _wire_user_device_key_session_upload =
      _wire_user_device_key_session_uploadPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_login_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_prepare_login_start(
      port_,
      base_url,
      auth_token,
      user_identifier,
    );
  }

  late final _wire_prepare_login_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_prepare_login_start');
  late final _wire_prepare_login_start =
      _wire_prepare_login_startPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_prepare_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_prepare_login(
      port_,
      user_identifier,
      password,
      server_output,
    );
  }

  late final _wire_prepare_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_prepare_login');
  late final _wire_prepare_login = _wire_prepare_loginPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> master_key_encryption,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_login(
      port_,
      master_key_encryption,
      server_output,
    );
  }

  late final _wire_done_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_done_login');
  late final _wire_done_login = _wire_done_loginPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_login(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
    );
  }

  late final _wire_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_login');
  late final _wire_login = _wire_loginPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_fetch_user_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_fetch_user_key(
      port_,
      private_key,
      server_output,
    );
  }

  late final _wire_done_fetch_user_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_done_fetch_user_key');
  late final _wire_done_fetch_user_key =
      _wire_done_fetch_user_keyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_fetch_user_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> key_id,
    ffi.Pointer<wire_uint_8_list> private_key,
  ) {
    return _wire_fetch_user_key(
      port_,
      base_url,
      auth_token,
      jwt,
      key_id,
      private_key,
    );
  }

  late final _wire_fetch_user_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_fetch_user_key');
  late final _wire_fetch_user_key = _wire_fetch_user_keyPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_refresh_jwt(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> refresh_token,
  ) {
    return _wire_refresh_jwt(
      port_,
      base_url,
      auth_token,
      jwt,
      refresh_token,
    );
  }

  late final _wire_refresh_jwtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_refresh_jwt');
  late final _wire_refresh_jwt = _wire_refresh_jwtPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> refresh_token,
  ) {
    return _wire_init_user(
      port_,
      base_url,
      auth_token,
      jwt,
      refresh_token,
    );
  }

  late final _wire_init_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_init_user');
  late final _wire_init_user = _wire_init_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_user_devices(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_id,
  ) {
    return _wire_get_user_devices(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_id,
    );
  }

  late final _wire_get_user_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_user_devices');
  late final _wire_get_user_devices = _wire_get_user_devicesPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_reset_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> new_password,
    ffi.Pointer<wire_uint_8_list> decrypted_private_key,
    ffi.Pointer<wire_uint_8_list> decrypted_sign_key,
  ) {
    return _wire_reset_password(
      port_,
      base_url,
      auth_token,
      jwt,
      new_password,
      decrypted_private_key,
      decrypted_sign_key,
    );
  }

  late final _wire_reset_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_reset_password');
  late final _wire_reset_password = _wire_reset_passwordPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_change_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> old_password,
    ffi.Pointer<wire_uint_8_list> new_password,
  ) {
    return _wire_change_password(
      port_,
      base_url,
      auth_token,
      user_identifier,
      old_password,
      new_password,
    );
  }

  late final _wire_change_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_change_password');
  late final _wire_change_password = _wire_change_passwordPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_delete_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_delete_user(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
    );
  }

  late final _wire_delete_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_user');
  late final _wire_delete_user = _wire_delete_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_delete_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> device_identifier,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_delete_device(
      port_,
      base_url,
      auth_token,
      device_identifier,
      password,
      device_id,
    );
  }

  late final _wire_delete_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_device');
  late final _wire_delete_device = _wire_delete_devicePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_update_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_update_user(
      port_,
      base_url,
      auth_token,
      jwt,
      user_identifier,
    );
  }

  late final _wire_update_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_update_user');
  late final _wire_update_user = _wire_update_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_fetch_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_id,
  ) {
    return _wire_user_fetch_public_key(
      port_,
      base_url,
      auth_token,
      user_id,
    );
  }

  late final _wire_user_fetch_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_user_fetch_public_key');
  late final _wire_user_fetch_public_key =
      _wire_user_fetch_public_keyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_fetch_verify_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> verify_key_id,
  ) {
    return _wire_user_fetch_verify_key(
      port_,
      base_url,
      auth_token,
      user_id,
      verify_key_id,
    );
  }

  late final _wire_user_fetch_verify_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_user_fetch_verify_key');
  late final _wire_user_fetch_verify_key =
      _wire_user_fetch_verify_keyPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> public_device_key,
    ffi.Pointer<wire_uint_8_list> pre_user_key,
  ) {
    return _wire_user_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
      public_device_key,
      pre_user_key,
    );
  }

  late final _wire_user_key_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_user_key_rotation');
  late final _wire_user_key_rotation = _wire_user_key_rotationPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_pre_done_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
  ) {
    return _wire_user_pre_done_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
    );
  }

  late final _wire_user_pre_done_key_rotationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_user_pre_done_key_rotation');
  late final _wire_user_pre_done_key_rotation =
      _wire_user_pre_done_key_rotationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_get_done_key_rotation_server_input(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_user_get_done_key_rotation_server_input(
      port_,
      server_output,
    );
  }

  late final _wire_user_get_done_key_rotation_server_inputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_user_get_done_key_rotation_server_input');
  late final _wire_user_get_done_key_rotation_server_input =
      _wire_user_get_done_key_rotation_server_inputPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_finish_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> server_output,
    ffi.Pointer<wire_uint_8_list> pre_group_key,
    ffi.Pointer<wire_uint_8_list> public_key,
    ffi.Pointer<wire_uint_8_list> private_key,
  ) {
    return _wire_user_finish_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
      server_output,
      pre_group_key,
      public_key,
      private_key,
    );
  }

  late final _wire_user_finish_key_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_user_finish_key_rotation');
  late final _wire_user_finish_key_rotation =
      _wire_user_finish_key_rotationPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_prepare_create_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> creators_public_key,
  ) {
    return _wire_group_prepare_create_group(
      port_,
      creators_public_key,
    );
  }

  late final _wire_group_prepare_create_groupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_prepare_create_group');
  late final _wire_group_prepare_create_group =
      _wire_group_prepare_create_groupPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_create_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> creators_public_key,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_create_group(
      port_,
      base_url,
      auth_token,
      jwt,
      creators_public_key,
      group_as_member,
    );
  }

  late final _wire_group_create_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_create_group');
  late final _wire_group_create_group = _wire_group_create_groupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_create_child_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> parent_public_key,
    ffi.Pointer<wire_uint_8_list> parent_id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_create_child_group(
      port_,
      base_url,
      auth_token,
      jwt,
      parent_public_key,
      parent_id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_create_child_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_create_child_group');
  late final _wire_group_create_child_group =
      _wire_group_create_child_groupPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_extract_group_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_group_extract_group_data(
      port_,
      server_output,
    );
  }

  late final _wire_group_extract_group_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_extract_group_data');
  late final _wire_group_extract_group_data = _wire_group_extract_group_dataPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_extract_group_keys(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_group_extract_group_keys(
      port_,
      server_output,
    );
  }

  late final _wire_group_extract_group_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_extract_group_keys');
  late final _wire_group_extract_group_keys = _wire_group_extract_group_keysPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_group_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_group_data(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_as_member,
    );
  }

  late final _wire_group_get_group_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_group_data');
  late final _wire_group_get_group_data =
      _wire_group_get_group_dataPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_group_keys(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_key_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_group_keys(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      last_fetched_time,
      last_fetched_key_id,
      group_as_member,
    );
  }

  late final _wire_group_get_group_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_group_keys');
  late final _wire_group_get_group_keys =
      _wire_group_get_group_keysPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_group_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> key_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_group_key(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      key_id,
      group_as_member,
    );
  }

  late final _wire_group_get_group_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_group_key');
  late final _wire_group_get_group_key =
      _wire_group_get_group_keyPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_decrypt_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> server_key_data,
  ) {
    return _wire_group_decrypt_key(
      port_,
      private_key,
      server_key_data,
    );
  }

  late final _wire_group_decrypt_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_decrypt_key');
  late final _wire_group_decrypt_key = _wire_group_decrypt_keyPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_member(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_member(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      last_fetched_time,
      last_fetched_id,
      group_as_member,
    );
  }

  late final _wire_group_get_memberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_member');
  late final _wire_group_get_member = _wire_group_get_memberPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_group_updates(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_group_updates(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_as_member,
    );
  }

  late final _wire_group_get_group_updatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_group_updates');
  late final _wire_group_get_group_updates =
      _wire_group_get_group_updatesPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_groups_for_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
  ) {
    return _wire_group_get_groups_for_user(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_group_id,
    );
  }

  late final _wire_group_get_groups_for_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_groups_for_user');
  late final _wire_group_get_groups_for_user =
      _wire_group_get_groups_for_userPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_prepare_keys_for_new_member(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_public_key,
    ffi.Pointer<wire_uint_8_list> group_keys,
    int key_count,
    int admin_rank,
  ) {
    return _wire_group_prepare_keys_for_new_member(
      port_,
      user_public_key,
      group_keys,
      key_count,
      admin_rank,
    );
  }

  late final _wire_group_prepare_keys_for_new_memberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32)>>('wire_group_prepare_keys_for_new_member');
  late final _wire_group_prepare_keys_for_new_member =
      _wire_group_prepare_keys_for_new_memberPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_group_invite_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> user_id,
    int key_count,
    int admin_rank,
    bool auto_invite,
    bool group_invite,
    ffi.Pointer<wire_uint_8_list> user_public_key,
    ffi.Pointer<wire_uint_8_list> group_keys,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_invite_user(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      user_id,
      key_count,
      admin_rank,
      auto_invite ? 1 : 0,
      group_invite ? 1 : 0,
      user_public_key,
      group_keys,
      group_as_member,
    );
  }

  late final _wire_group_invite_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_invite_user');
  late final _wire_group_invite_user = _wire_group_invite_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          int,
          int,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_invite_user_session(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    bool auto_invite,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> user_public_key,
    ffi.Pointer<wire_uint_8_list> group_keys,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_invite_user_session(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      auto_invite ? 1 : 0,
      session_id,
      user_public_key,
      group_keys,
      group_as_member,
    );
  }

  late final _wire_group_invite_user_sessionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Uint8,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_invite_user_session');
  late final _wire_group_invite_user_session =
      _wire_group_invite_user_sessionPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_invites_for_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_invites_for_user(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_group_id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_group_get_invites_for_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_invites_for_user');
  late final _wire_group_get_invites_for_user =
      _wire_group_get_invites_for_userPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_accept_invite(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_accept_invite(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_group_accept_invitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_accept_invite');
  late final _wire_group_accept_invite =
      _wire_group_accept_invitePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_reject_invite(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_reject_invite(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_group_reject_invitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_reject_invite');
  late final _wire_group_reject_invite =
      _wire_group_reject_invitePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_sent_join_req_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_sent_join_req_user(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_group_id,
      group_as_member,
    );
  }

  late final _wire_group_get_sent_join_req_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_sent_join_req_user');
  late final _wire_group_get_sent_join_req_user =
      _wire_group_get_sent_join_req_userPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_sent_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_sent_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      last_fetched_time,
      last_fetched_group_id,
      group_as_member,
    );
  }

  late final _wire_group_get_sent_join_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_sent_join_req');
  late final _wire_group_get_sent_join_req =
      _wire_group_get_sent_join_reqPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_delete_sent_join_req_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> join_req_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_delete_sent_join_req_user(
      port_,
      base_url,
      auth_token,
      jwt,
      join_req_group_id,
      group_as_member,
    );
  }

  late final _wire_group_delete_sent_join_req_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_delete_sent_join_req_user');
  late final _wire_group_delete_sent_join_req_user =
      _wire_group_delete_sent_join_req_userPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_delete_sent_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> join_req_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_delete_sent_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      join_req_group_id,
      group_as_member,
    );
  }

  late final _wire_group_delete_sent_join_reqPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Int32,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_delete_sent_join_req');
  late final _wire_group_delete_sent_join_req =
      _wire_group_delete_sent_join_reqPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_group_join_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_join_req');
  late final _wire_group_join_req = _wire_group_join_reqPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_join_reqs(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_join_reqs(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      last_fetched_time,
      last_fetched_id,
      group_as_member,
    );
  }

  late final _wire_group_get_join_reqsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_join_reqs');
  late final _wire_group_get_join_reqs =
      _wire_group_get_join_reqsPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_reject_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> rejected_user_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_reject_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      rejected_user_id,
      group_as_member,
    );
  }

  late final _wire_group_reject_join_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_reject_join_req');
  late final _wire_group_reject_join_req =
      _wire_group_reject_join_reqPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_accept_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> user_id,
    int key_count,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> user_public_key,
    ffi.Pointer<wire_uint_8_list> group_keys,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_accept_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      user_id,
      key_count,
      admin_rank,
      user_public_key,
      group_keys,
      group_as_member,
    );
  }

  late final _wire_group_accept_join_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_accept_join_req');
  late final _wire_group_accept_join_req =
      _wire_group_accept_join_reqPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_join_user_session(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> user_public_key,
    ffi.Pointer<wire_uint_8_list> group_keys,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_join_user_session(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      session_id,
      user_public_key,
      group_keys,
      group_as_member,
    );
  }

  late final _wire_group_join_user_sessionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_join_user_session');
  late final _wire_group_join_user_session =
      _wire_group_join_user_sessionPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_stop_group_invites(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_stop_group_invites(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_stop_group_invitesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_stop_group_invites');
  late final _wire_group_stop_group_invites =
      _wire_group_stop_group_invitesPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_leave_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_leave_group(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_as_member,
    );
  }

  late final _wire_leave_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_leave_group');
  late final _wire_leave_group = _wire_leave_groupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_prepare_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> pre_group_key,
    ffi.Pointer<wire_uint_8_list> public_key,
  ) {
    return _wire_group_prepare_key_rotation(
      port_,
      pre_group_key,
      public_key,
    );
  }

  late final _wire_group_prepare_key_rotationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_prepare_key_rotation');
  late final _wire_group_prepare_key_rotation =
      _wire_group_prepare_key_rotationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_done_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> public_key,
    ffi.Pointer<wire_uint_8_list> pre_group_key,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_group_done_key_rotation(
      port_,
      private_key,
      public_key,
      pre_group_key,
      server_output,
    );
  }

  late final _wire_group_done_key_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_done_key_rotation');
  late final _wire_group_done_key_rotation =
      _wire_group_done_key_rotationPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> public_key,
    ffi.Pointer<wire_uint_8_list> pre_group_key,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      public_key,
      pre_group_key,
      group_as_member,
    );
  }

  late final _wire_group_key_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_key_rotation');
  late final _wire_group_key_rotation = _wire_group_key_rotationPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_pre_done_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_pre_done_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_as_member,
    );
  }

  late final _wire_group_pre_done_key_rotationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_pre_done_key_rotation');
  late final _wire_group_pre_done_key_rotation =
      _wire_group_pre_done_key_rotationPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_done_key_rotation_server_input(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_group_get_done_key_rotation_server_input(
      port_,
      server_output,
    );
  }

  late final _wire_group_get_done_key_rotation_server_inputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_done_key_rotation_server_input');
  late final _wire_group_get_done_key_rotation_server_input =
      _wire_group_get_done_key_rotation_server_inputPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_finish_key_rotation(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> server_output,
    ffi.Pointer<wire_uint_8_list> pre_group_key,
    ffi.Pointer<wire_uint_8_list> public_key,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_finish_key_rotation(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      server_output,
      pre_group_key,
      public_key,
      private_key,
      group_as_member,
    );
  }

  late final _wire_group_finish_key_rotationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_finish_key_rotation');
  late final _wire_group_finish_key_rotation =
      _wire_group_finish_key_rotationPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_prepare_update_rank(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    int rank,
    int admin_rank,
  ) {
    return _wire_group_prepare_update_rank(
      port_,
      user_id,
      rank,
      admin_rank,
    );
  }

  late final _wire_group_prepare_update_rankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Int32)>>('wire_group_prepare_update_rank');
  late final _wire_group_prepare_update_rank =
      _wire_group_prepare_update_rankPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_group_update_rank(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> user_id,
    int rank,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_update_rank(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      user_id,
      rank,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_update_rankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_update_rank');
  late final _wire_group_update_rank = _wire_group_update_rankPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_kick_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> user_id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_kick_user(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      user_id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_kick_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_kick_user');
  late final _wire_group_kick_user = _wire_group_kick_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_delete_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_delete_group(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_delete_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_delete_group');
  late final _wire_group_delete_group = _wire_group_delete_groupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_public_key_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_group_get_public_key_data(
      port_,
      base_url,
      auth_token,
      id,
    );
  }

  late final _wire_group_get_public_key_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_public_key_data');
  late final _wire_group_get_public_key_data =
      _wire_group_get_public_key_dataPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_split_head_and_encrypted_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_split_head_and_encrypted_data(
      port_,
      data,
    );
  }

  late final _wire_split_head_and_encrypted_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_split_head_and_encrypted_data');
  late final _wire_split_head_and_encrypted_data =
      _wire_split_head_and_encrypted_dataPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_split_head_and_encrypted_string(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_split_head_and_encrypted_string(
      port_,
      data,
    );
  }

  late final _wire_split_head_and_encrypted_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_split_head_and_encrypted_string');
  late final _wire_split_head_and_encrypted_string =
      _wire_split_head_and_encrypted_stringPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_deserialize_head_from_string(
    int port_,
    ffi.Pointer<wire_uint_8_list> head,
  ) {
    return _wire_deserialize_head_from_string(
      port_,
      head,
    );
  }

  late final _wire_deserialize_head_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_deserialize_head_from_string');
  late final _wire_deserialize_head_from_string =
      _wire_deserialize_head_from_stringPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_encrypt_raw_symmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_uint_8_list> sign_key,
  ) {
    return _wire_encrypt_raw_symmetric(
      port_,
      key,
      data,
      sign_key,
    );
  }

  late final _wire_encrypt_raw_symmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_encrypt_raw_symmetric');
  late final _wire_encrypt_raw_symmetric =
      _wire_encrypt_raw_symmetricPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt_raw_symmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> encrypted_data,
    ffi.Pointer<wire_uint_8_list> head,
    ffi.Pointer<wire_uint_8_list> verify_key_data,
  ) {
    return _wire_decrypt_raw_symmetric(
      port_,
      key,
      encrypted_data,
      head,
      verify_key_data,
    );
  }

  late final _wire_decrypt_raw_symmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decrypt_raw_symmetric');
  late final _wire_decrypt_raw_symmetric =
      _wire_decrypt_raw_symmetricPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_encrypt_symmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_uint_8_list> sign_key,
  ) {
    return _wire_encrypt_symmetric(
      port_,
      key,
      data,
      sign_key,
    );
  }

  late final _wire_encrypt_symmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_encrypt_symmetric');
  late final _wire_encrypt_symmetric = _wire_encrypt_symmetricPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt_symmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> encrypted_data,
    ffi.Pointer<wire_uint_8_list> verify_key_data,
  ) {
    return _wire_decrypt_symmetric(
      port_,
      key,
      encrypted_data,
      verify_key_data,
    );
  }

  late final _wire_decrypt_symmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decrypt_symmetric');
  late final _wire_decrypt_symmetric = _wire_decrypt_symmetricPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_encrypt_string_symmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_uint_8_list> sign_key,
  ) {
    return _wire_encrypt_string_symmetric(
      port_,
      key,
      data,
      sign_key,
    );
  }

  late final _wire_encrypt_string_symmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_encrypt_string_symmetric');
  late final _wire_encrypt_string_symmetric =
      _wire_encrypt_string_symmetricPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt_string_symmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> encrypted_data,
    ffi.Pointer<wire_uint_8_list> verify_key_data,
  ) {
    return _wire_decrypt_string_symmetric(
      port_,
      key,
      encrypted_data,
      verify_key_data,
    );
  }

  late final _wire_decrypt_string_symmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decrypt_string_symmetric');
  late final _wire_decrypt_string_symmetric =
      _wire_decrypt_string_symmetricPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_encrypt_raw_asymmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> reply_public_key_data,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_uint_8_list> sign_key,
  ) {
    return _wire_encrypt_raw_asymmetric(
      port_,
      reply_public_key_data,
      data,
      sign_key,
    );
  }

  late final _wire_encrypt_raw_asymmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_encrypt_raw_asymmetric');
  late final _wire_encrypt_raw_asymmetric =
      _wire_encrypt_raw_asymmetricPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt_raw_asymmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> encrypted_data,
    ffi.Pointer<wire_uint_8_list> head,
    ffi.Pointer<wire_uint_8_list> verify_key_data,
  ) {
    return _wire_decrypt_raw_asymmetric(
      port_,
      private_key,
      encrypted_data,
      head,
      verify_key_data,
    );
  }

  late final _wire_decrypt_raw_asymmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decrypt_raw_asymmetric');
  late final _wire_decrypt_raw_asymmetric =
      _wire_decrypt_raw_asymmetricPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_encrypt_asymmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> reply_public_key_data,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_uint_8_list> sign_key,
  ) {
    return _wire_encrypt_asymmetric(
      port_,
      reply_public_key_data,
      data,
      sign_key,
    );
  }

  late final _wire_encrypt_asymmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_encrypt_asymmetric');
  late final _wire_encrypt_asymmetric = _wire_encrypt_asymmetricPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt_asymmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> encrypted_data,
    ffi.Pointer<wire_uint_8_list> verify_key_data,
  ) {
    return _wire_decrypt_asymmetric(
      port_,
      private_key,
      encrypted_data,
      verify_key_data,
    );
  }

  late final _wire_decrypt_asymmetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decrypt_asymmetric');
  late final _wire_decrypt_asymmetric = _wire_decrypt_asymmetricPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_encrypt_string_asymmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> reply_public_key_data,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_uint_8_list> sign_key,
  ) {
    return _wire_encrypt_string_asymmetric(
      port_,
      reply_public_key_data,
      data,
      sign_key,
    );
  }

  late final _wire_encrypt_string_asymmetricPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_encrypt_string_asymmetric');
  late final _wire_encrypt_string_asymmetric =
      _wire_encrypt_string_asymmetricPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt_string_asymmetric(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> encrypted_data,
    ffi.Pointer<wire_uint_8_list> verify_key_data,
  ) {
    return _wire_decrypt_string_asymmetric(
      port_,
      private_key,
      encrypted_data,
      verify_key_data,
    );
  }

  late final _wire_decrypt_string_asymmetricPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_decrypt_string_asymmetric');
  late final _wire_decrypt_string_asymmetric =
      _wire_decrypt_string_asymmetricPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_non_register_sym_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> master_key,
  ) {
    return _wire_generate_non_register_sym_key(
      port_,
      master_key,
    );
  }

  late final _wire_generate_non_register_sym_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_generate_non_register_sym_key');
  late final _wire_generate_non_register_sym_key =
      _wire_generate_non_register_sym_keyPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_non_register_sym_key_by_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> reply_public_key,
  ) {
    return _wire_generate_non_register_sym_key_by_public_key(
      port_,
      reply_public_key,
    );
  }

  late final _wire_generate_non_register_sym_key_by_public_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_generate_non_register_sym_key_by_public_key');
  late final _wire_generate_non_register_sym_key_by_public_key =
      _wire_generate_non_register_sym_key_by_public_keyPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt_sym_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> master_key,
    ffi.Pointer<wire_uint_8_list> encrypted_symmetric_key_info,
  ) {
    return _wire_decrypt_sym_key(
      port_,
      master_key,
      encrypted_symmetric_key_info,
    );
  }

  late final _wire_decrypt_sym_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decrypt_sym_key');
  late final _wire_decrypt_sym_key = _wire_decrypt_sym_keyPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt_sym_key_by_private_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> encrypted_symmetric_key_info,
  ) {
    return _wire_decrypt_sym_key_by_private_key(
      port_,
      private_key,
      encrypted_symmetric_key_info,
    );
  }

  late final _wire_decrypt_sym_key_by_private_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_decrypt_sym_key_by_private_key');
  late final _wire_decrypt_sym_key_by_private_key =
      _wire_decrypt_sym_key_by_private_keyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_and_register_sym_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> master_key,
  ) {
    return _wire_generate_and_register_sym_key(
      port_,
      base_url,
      auth_token,
      jwt,
      master_key,
    );
  }

  late final _wire_generate_and_register_sym_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_generate_and_register_sym_key');
  late final _wire_generate_and_register_sym_key =
      _wire_generate_and_register_sym_keyPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_and_register_sym_key_by_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> public_key,
  ) {
    return _wire_generate_and_register_sym_key_by_public_key(
      port_,
      base_url,
      auth_token,
      jwt,
      public_key,
    );
  }

  late final _wire_generate_and_register_sym_key_by_public_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_generate_and_register_sym_key_by_public_key');
  late final _wire_generate_and_register_sym_key_by_public_key =
      _wire_generate_and_register_sym_key_by_public_keyPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_sym_key_by_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> key_id,
    ffi.Pointer<wire_uint_8_list> master_key,
  ) {
    return _wire_get_sym_key_by_id(
      port_,
      base_url,
      auth_token,
      key_id,
      master_key,
    );
  }

  late final _wire_get_sym_key_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_sym_key_by_id');
  late final _wire_get_sym_key_by_id = _wire_get_sym_key_by_idPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_sym_key_by_id_by_private_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> key_id,
    ffi.Pointer<wire_uint_8_list> private_key,
  ) {
    return _wire_get_sym_key_by_id_by_private_key(
      port_,
      base_url,
      auth_token,
      key_id,
      private_key,
    );
  }

  late final _wire_get_sym_key_by_id_by_private_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_sym_key_by_id_by_private_key');
  late final _wire_get_sym_key_by_id_by_private_key =
      _wire_get_sym_key_by_id_by_private_keyPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_keys_for_master_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> master_key_id,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_key_id,
    ffi.Pointer<wire_uint_8_list> master_key,
  ) {
    return _wire_get_keys_for_master_key(
      port_,
      base_url,
      auth_token,
      master_key_id,
      last_fetched_time,
      last_key_id,
      master_key,
    );
  }

  late final _wire_get_keys_for_master_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_keys_for_master_key');
  late final _wire_get_keys_for_master_key =
      _wire_get_keys_for_master_keyPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_delete_sym_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> key_id,
  ) {
    return _wire_delete_sym_key(
      port_,
      base_url,
      auth_token,
      jwt,
      key_id,
    );
  }

  late final _wire_delete_sym_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_sym_key');
  late final _wire_delete_sym_key = _wire_delete_sym_keyPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_download_file_meta(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_file_download_file_meta(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_file_download_file_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_file_download_file_meta');
  late final _wire_file_download_file_meta =
      _wire_file_download_file_metaPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_download_and_decrypt_file_part(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> url_prefix,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> part_id,
    ffi.Pointer<wire_uint_8_list> content_key,
    ffi.Pointer<wire_uint_8_list> verify_key_data,
  ) {
    return _wire_file_download_and_decrypt_file_part(
      port_,
      base_url,
      url_prefix,
      auth_token,
      part_id,
      content_key,
      verify_key_data,
    );
  }

  late final _wire_file_download_and_decrypt_file_partPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_file_download_and_decrypt_file_part');
  late final _wire_file_download_and_decrypt_file_part =
      _wire_file_download_and_decrypt_file_partPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_download_part_list(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> file_id,
    ffi.Pointer<wire_uint_8_list> last_sequence,
  ) {
    return _wire_file_download_part_list(
      port_,
      base_url,
      auth_token,
      file_id,
      last_sequence,
    );
  }

  late final _wire_file_download_part_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_file_download_part_list');
  late final _wire_file_download_part_list =
      _wire_file_download_part_listPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_register_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> master_key_id,
    ffi.Pointer<wire_uint_8_list> content_key,
    ffi.Pointer<wire_uint_8_list> belongs_to_id,
    ffi.Pointer<wire_uint_8_list> belongs_to_type,
    ffi.Pointer<wire_uint_8_list> file_name,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_file_register_file(
      port_,
      base_url,
      auth_token,
      jwt,
      master_key_id,
      content_key,
      belongs_to_id,
      belongs_to_type,
      file_name,
      group_id,
      group_as_member,
    );
  }

  late final _wire_file_register_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_file_register_file');
  late final _wire_file_register_file = _wire_file_register_filePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_prepare_register_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> master_key_id,
    ffi.Pointer<wire_uint_8_list> content_key,
    ffi.Pointer<wire_uint_8_list> belongs_to_id,
    ffi.Pointer<wire_uint_8_list> belongs_to_type,
    ffi.Pointer<wire_uint_8_list> file_name,
  ) {
    return _wire_file_prepare_register_file(
      port_,
      master_key_id,
      content_key,
      belongs_to_id,
      belongs_to_type,
      file_name,
    );
  }

  late final _wire_file_prepare_register_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_file_prepare_register_file');
  late final _wire_file_prepare_register_file =
      _wire_file_prepare_register_filePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_done_register_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_file_done_register_file(
      port_,
      server_output,
    );
  }

  late final _wire_file_done_register_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_file_done_register_file');
  late final _wire_file_done_register_file = _wire_file_done_register_filePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_upload_part(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> url_prefix,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> session_id,
    bool end,
    int sequence,
    ffi.Pointer<wire_uint_8_list> content_key,
    ffi.Pointer<wire_uint_8_list> sign_key,
    ffi.Pointer<wire_uint_8_list> part1,
  ) {
    return _wire_file_upload_part(
      port_,
      base_url,
      url_prefix,
      auth_token,
      jwt,
      session_id,
      end ? 1 : 0,
      sequence,
      content_key,
      sign_key,
      part1,
    );
  }

  late final _wire_file_upload_partPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_file_upload_part');
  late final _wire_file_upload_part = _wire_file_upload_partPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_file_name_update(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> file_id,
    ffi.Pointer<wire_uint_8_list> content_key,
    ffi.Pointer<wire_uint_8_list> file_name,
  ) {
    return _wire_file_file_name_update(
      port_,
      base_url,
      auth_token,
      jwt,
      file_id,
      content_key,
      file_name,
    );
  }

  late final _wire_file_file_name_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_file_file_name_update');
  late final _wire_file_file_name_update =
      _wire_file_file_name_updatePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_file_delete_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> file_id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_file_delete_file(
      port_,
      base_url,
      auth_token,
      jwt,
      file_id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_file_delete_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_file_delete_file');
  late final _wire_file_delete_file = _wire_file_delete_filePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
