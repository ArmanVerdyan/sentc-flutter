// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'api/crypto.dart';
import 'api/file.dart';
import 'api/group.dart';
import 'api/user.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  BelongsToType dco_decode_belongs_to_type(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  Claims dco_decode_claims(dynamic raw);

  @protected
  CryptoRawOutput dco_decode_crypto_raw_output(dynamic raw);

  @protected
  DeviceKeyData dco_decode_device_key_data(dynamic raw);

  @protected
  EncryptedHead dco_decode_encrypted_head(dynamic raw);

  @protected
  FileData dco_decode_file_data(dynamic raw);

  @protected
  FileDoneRegister dco_decode_file_done_register(dynamic raw);

  @protected
  FileDownloadResult dco_decode_file_download_result(dynamic raw);

  @protected
  FilePartListItem dco_decode_file_part_list_item(dynamic raw);

  @protected
  FilePrepareRegister dco_decode_file_prepare_register(dynamic raw);

  @protected
  FileRegisterOutput dco_decode_file_register_output(dynamic raw);

  @protected
  GeneratedRegisterData dco_decode_generated_register_data(dynamic raw);

  @protected
  GroupChildrenList dco_decode_group_children_list(dynamic raw);

  @protected
  GroupDataCheckUpdateServerOutput
      dco_decode_group_data_check_update_server_output(dynamic raw);

  @protected
  GroupInviteReqList dco_decode_group_invite_req_list(dynamic raw);

  @protected
  GroupJoinReqList dco_decode_group_join_req_list(dynamic raw);

  @protected
  GroupKeyData dco_decode_group_key_data(dynamic raw);

  @protected
  GroupOutData dco_decode_group_out_data(dynamic raw);

  @protected
  GroupOutDataHmacKeys dco_decode_group_out_data_hmac_keys(dynamic raw);

  @protected
  GroupOutDataKeys dco_decode_group_out_data_keys(dynamic raw);

  @protected
  GroupOutDataSortableKeys dco_decode_group_out_data_sortable_keys(dynamic raw);

  @protected
  GroupPublicKeyData dco_decode_group_public_key_data(dynamic raw);

  @protected
  GroupUserListItem dco_decode_group_user_list_item(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  KeyRotationGetOut dco_decode_key_rotation_get_out(dynamic raw);

  @protected
  KeyRotationInput dco_decode_key_rotation_input(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<FilePartListItem> dco_decode_list_file_part_list_item(dynamic raw);

  @protected
  List<GroupChildrenList> dco_decode_list_group_children_list(dynamic raw);

  @protected
  List<GroupInviteReqList> dco_decode_list_group_invite_req_list(dynamic raw);

  @protected
  List<GroupJoinReqList> dco_decode_list_group_join_req_list(dynamic raw);

  @protected
  List<GroupOutDataHmacKeys> dco_decode_list_group_out_data_hmac_keys(
      dynamic raw);

  @protected
  List<GroupOutDataKeys> dco_decode_list_group_out_data_keys(dynamic raw);

  @protected
  List<GroupOutDataSortableKeys> dco_decode_list_group_out_data_sortable_keys(
      dynamic raw);

  @protected
  List<GroupUserListItem> dco_decode_list_group_user_list_item(dynamic raw);

  @protected
  ListGroups dco_decode_list_groups(dynamic raw);

  @protected
  List<KeyRotationGetOut> dco_decode_list_key_rotation_get_out(dynamic raw);

  @protected
  List<ListGroups> dco_decode_list_list_groups(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<UserDeviceList> dco_decode_list_user_device_list(dynamic raw);

  @protected
  List<UserKeyData> dco_decode_list_user_key_data(dynamic raw);

  @protected
  NonRegisteredKeyOutput dco_decode_non_registered_key_output(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  OtpRecoveryKeysOutput dco_decode_otp_recovery_keys_output(dynamic raw);

  @protected
  OtpRegister dco_decode_otp_register(dynamic raw);

  @protected
  OtpRegisterUrl dco_decode_otp_register_url(dynamic raw);

  @protected
  PreRegisterDeviceData dco_decode_pre_register_device_data(dynamic raw);

  @protected
  RegisterDeviceData dco_decode_register_device_data(dynamic raw);

  @protected
  SearchableCreateOutput dco_decode_searchable_create_output(dynamic raw);

  @protected
  SortableEncryptOutput dco_decode_sortable_encrypt_output(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  UserData dco_decode_user_data(dynamic raw);

  @protected
  UserDeviceList dco_decode_user_device_list(dynamic raw);

  @protected
  UserInitServerOutput dco_decode_user_init_server_output(dynamic raw);

  @protected
  UserKeyData dco_decode_user_key_data(dynamic raw);

  @protected
  UserLoginOut dco_decode_user_login_out(dynamic raw);

  @protected
  UserPublicKeyData dco_decode_user_public_key_data(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  BelongsToType sse_decode_belongs_to_type(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  Claims sse_decode_claims(SseDeserializer deserializer);

  @protected
  CryptoRawOutput sse_decode_crypto_raw_output(SseDeserializer deserializer);

  @protected
  DeviceKeyData sse_decode_device_key_data(SseDeserializer deserializer);

  @protected
  EncryptedHead sse_decode_encrypted_head(SseDeserializer deserializer);

  @protected
  FileData sse_decode_file_data(SseDeserializer deserializer);

  @protected
  FileDoneRegister sse_decode_file_done_register(SseDeserializer deserializer);

  @protected
  FileDownloadResult sse_decode_file_download_result(
      SseDeserializer deserializer);

  @protected
  FilePartListItem sse_decode_file_part_list_item(SseDeserializer deserializer);

  @protected
  FilePrepareRegister sse_decode_file_prepare_register(
      SseDeserializer deserializer);

  @protected
  FileRegisterOutput sse_decode_file_register_output(
      SseDeserializer deserializer);

  @protected
  GeneratedRegisterData sse_decode_generated_register_data(
      SseDeserializer deserializer);

  @protected
  GroupChildrenList sse_decode_group_children_list(
      SseDeserializer deserializer);

  @protected
  GroupDataCheckUpdateServerOutput
      sse_decode_group_data_check_update_server_output(
          SseDeserializer deserializer);

  @protected
  GroupInviteReqList sse_decode_group_invite_req_list(
      SseDeserializer deserializer);

  @protected
  GroupJoinReqList sse_decode_group_join_req_list(SseDeserializer deserializer);

  @protected
  GroupKeyData sse_decode_group_key_data(SseDeserializer deserializer);

  @protected
  GroupOutData sse_decode_group_out_data(SseDeserializer deserializer);

  @protected
  GroupOutDataHmacKeys sse_decode_group_out_data_hmac_keys(
      SseDeserializer deserializer);

  @protected
  GroupOutDataKeys sse_decode_group_out_data_keys(SseDeserializer deserializer);

  @protected
  GroupOutDataSortableKeys sse_decode_group_out_data_sortable_keys(
      SseDeserializer deserializer);

  @protected
  GroupPublicKeyData sse_decode_group_public_key_data(
      SseDeserializer deserializer);

  @protected
  GroupUserListItem sse_decode_group_user_list_item(
      SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  KeyRotationGetOut sse_decode_key_rotation_get_out(
      SseDeserializer deserializer);

  @protected
  KeyRotationInput sse_decode_key_rotation_input(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<FilePartListItem> sse_decode_list_file_part_list_item(
      SseDeserializer deserializer);

  @protected
  List<GroupChildrenList> sse_decode_list_group_children_list(
      SseDeserializer deserializer);

  @protected
  List<GroupInviteReqList> sse_decode_list_group_invite_req_list(
      SseDeserializer deserializer);

  @protected
  List<GroupJoinReqList> sse_decode_list_group_join_req_list(
      SseDeserializer deserializer);

  @protected
  List<GroupOutDataHmacKeys> sse_decode_list_group_out_data_hmac_keys(
      SseDeserializer deserializer);

  @protected
  List<GroupOutDataKeys> sse_decode_list_group_out_data_keys(
      SseDeserializer deserializer);

  @protected
  List<GroupOutDataSortableKeys> sse_decode_list_group_out_data_sortable_keys(
      SseDeserializer deserializer);

  @protected
  List<GroupUserListItem> sse_decode_list_group_user_list_item(
      SseDeserializer deserializer);

  @protected
  ListGroups sse_decode_list_groups(SseDeserializer deserializer);

  @protected
  List<KeyRotationGetOut> sse_decode_list_key_rotation_get_out(
      SseDeserializer deserializer);

  @protected
  List<ListGroups> sse_decode_list_list_groups(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<UserDeviceList> sse_decode_list_user_device_list(
      SseDeserializer deserializer);

  @protected
  List<UserKeyData> sse_decode_list_user_key_data(SseDeserializer deserializer);

  @protected
  NonRegisteredKeyOutput sse_decode_non_registered_key_output(
      SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  OtpRecoveryKeysOutput sse_decode_otp_recovery_keys_output(
      SseDeserializer deserializer);

  @protected
  OtpRegister sse_decode_otp_register(SseDeserializer deserializer);

  @protected
  OtpRegisterUrl sse_decode_otp_register_url(SseDeserializer deserializer);

  @protected
  PreRegisterDeviceData sse_decode_pre_register_device_data(
      SseDeserializer deserializer);

  @protected
  RegisterDeviceData sse_decode_register_device_data(
      SseDeserializer deserializer);

  @protected
  SearchableCreateOutput sse_decode_searchable_create_output(
      SseDeserializer deserializer);

  @protected
  SortableEncryptOutput sse_decode_sortable_encrypt_output(
      SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  UserData sse_decode_user_data(SseDeserializer deserializer);

  @protected
  UserDeviceList sse_decode_user_device_list(SseDeserializer deserializer);

  @protected
  UserInitServerOutput sse_decode_user_init_server_output(
      SseDeserializer deserializer);

  @protected
  UserKeyData sse_decode_user_key_data(SseDeserializer deserializer);

  @protected
  UserLoginOut sse_decode_user_login_out(SseDeserializer deserializer);

  @protected
  UserPublicKeyData sse_decode_user_public_key_data(
      SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  bool cst_encode_box_autoadd_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bool(raw);
  }

  @protected
  int cst_encode_box_autoadd_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw);
  }

  @protected
  int cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_u_32(raw);
  }

  @protected
  JSAny cst_encode_claims(Claims raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.aud),
      cst_encode_String(raw.sub),
      cst_encode_usize(raw.exp),
      cst_encode_usize(raw.iat),
      cst_encode_bool(raw.fresh)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_crypto_raw_output(CryptoRawOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.head),
      cst_encode_list_prim_u_8_strict(raw.data)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_device_key_data(DeviceKeyData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.privateKey),
      cst_encode_String(raw.publicKey),
      cst_encode_String(raw.signKey),
      cst_encode_String(raw.verifyKey),
      cst_encode_String(raw.exportedPublicKey),
      cst_encode_String(raw.exportedVerifyKey)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_encrypted_head(EncryptedHead raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.id),
      cst_encode_opt_String(raw.signId),
      cst_encode_opt_String(raw.signAlg)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_file_data(FileData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.fileId),
      cst_encode_String(raw.masterKeyId),
      cst_encode_String(raw.owner),
      cst_encode_opt_String(raw.belongsTo),
      cst_encode_belongs_to_type(raw.belongsToType),
      cst_encode_String(raw.encryptedKey),
      cst_encode_String(raw.encryptedKeyAlg),
      cst_encode_opt_String(raw.encryptedFileName),
      cst_encode_list_file_part_list_item(raw.partList)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_file_done_register(FileDoneRegister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.fileId), cst_encode_String(raw.sessionId)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_file_download_result(FileDownloadResult raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.nextFileKey),
      cst_encode_list_prim_u_8_strict(raw.file)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_file_part_list_item(FilePartListItem raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.partId),
      cst_encode_i_32(raw.sequence),
      cst_encode_bool(raw.externStorage)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_file_prepare_register(FilePrepareRegister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_opt_String(raw.encryptedFileName),
      cst_encode_String(raw.serverInput)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_file_register_output(FileRegisterOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.fileId),
      cst_encode_String(raw.sessionId),
      cst_encode_opt_String(raw.encryptedFileName)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_generated_register_data(GeneratedRegisterData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.identifier), cst_encode_String(raw.password)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_group_children_list(GroupChildrenList raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.groupId),
      cst_encode_String(raw.time),
      cst_encode_opt_String(raw.parent)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_data_check_update_server_output(
      GroupDataCheckUpdateServerOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_bool(raw.keyUpdate), cst_encode_i_32(raw.rank)].jsify()!;
  }

  @protected
  JSAny cst_encode_group_invite_req_list(GroupInviteReqList raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.groupId), cst_encode_String(raw.time)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_group_join_req_list(GroupJoinReqList raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.userId),
      cst_encode_String(raw.time),
      cst_encode_i_32(raw.userType)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_key_data(GroupKeyData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.privateGroupKey),
      cst_encode_String(raw.publicGroupKey),
      cst_encode_String(raw.exportedPublicKey),
      cst_encode_String(raw.groupKey),
      cst_encode_String(raw.time),
      cst_encode_String(raw.groupKeyId)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_out_data(GroupOutData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.groupId),
      cst_encode_opt_String(raw.parentGroupId),
      cst_encode_i_32(raw.rank),
      cst_encode_bool(raw.keyUpdate),
      cst_encode_String(raw.createdTime),
      cst_encode_String(raw.joinedTime),
      cst_encode_list_group_out_data_keys(raw.keys),
      cst_encode_list_group_out_data_hmac_keys(raw.hmacKeys),
      cst_encode_list_group_out_data_sortable_keys(raw.sortableKeys),
      cst_encode_opt_String(raw.accessByGroupAsMember),
      cst_encode_opt_String(raw.accessByParentGroup),
      cst_encode_bool(raw.isConnectedGroup)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_out_data_hmac_keys(GroupOutDataHmacKeys raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.groupKeyId), cst_encode_String(raw.keyData)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_group_out_data_keys(GroupOutDataKeys raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.privateKeyId),
      cst_encode_String(raw.keyData),
      cst_encode_opt_String(raw.signedByUserId),
      cst_encode_opt_String(raw.signedByUserSignKeyId)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_out_data_sortable_keys(GroupOutDataSortableKeys raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.groupKeyId), cst_encode_String(raw.keyData)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_group_public_key_data(GroupPublicKeyData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.publicKey),
      cst_encode_String(raw.publicKeyId)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_user_list_item(GroupUserListItem raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.userId),
      cst_encode_i_32(raw.rank),
      cst_encode_String(raw.joinedTime),
      cst_encode_i_32(raw.userType)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_key_rotation_get_out(KeyRotationGetOut raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.preGroupKeyId),
      cst_encode_String(raw.newGroupKeyId),
      cst_encode_String(raw.encryptedEphKeyKeyId),
      cst_encode_String(raw.serverOutput)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_key_rotation_input(KeyRotationInput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_opt_String(raw.error),
      cst_encode_String(raw.encryptedEphemeralKeyByGroupKeyAndPublicKey),
      cst_encode_String(raw.encryptedGroupKeyByEphemeral),
      cst_encode_String(raw.ephemeralAlg),
      cst_encode_String(raw.encryptedEphKeyKeyId),
      cst_encode_String(raw.previousGroupKeyId),
      cst_encode_String(raw.time),
      cst_encode_String(raw.newGroupKeyId)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_list_String(List<String> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_String).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_file_part_list_item(List<FilePartListItem> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_file_part_list_item).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_children_list(List<GroupChildrenList> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_children_list).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_invite_req_list(List<GroupInviteReqList> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_invite_req_list).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_join_req_list(List<GroupJoinReqList> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_join_req_list).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_out_data_hmac_keys(
      List<GroupOutDataHmacKeys> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_out_data_hmac_keys).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_out_data_keys(List<GroupOutDataKeys> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_out_data_keys).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_out_data_sortable_keys(
      List<GroupOutDataSortableKeys> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_out_data_sortable_keys).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_user_list_item(List<GroupUserListItem> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_user_list_item).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_groups(ListGroups raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.groupId),
      cst_encode_String(raw.time),
      cst_encode_String(raw.joinedTime),
      cst_encode_i_32(raw.rank),
      cst_encode_opt_String(raw.parent)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_list_key_rotation_get_out(List<KeyRotationGetOut> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_key_rotation_get_out).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_list_groups(List<ListGroups> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_list_groups).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_prim_u_8_loose(List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.jsify()!;
  }

  @protected
  JSAny cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.jsify()!;
  }

  @protected
  JSAny cst_encode_list_user_device_list(List<UserDeviceList> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_user_device_list).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_user_key_data(List<UserKeyData> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_user_key_data).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_non_registered_key_output(NonRegisteredKeyOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.key), cst_encode_String(raw.encryptedKey)]
        .jsify()!;
  }

  @protected
  String? cst_encode_opt_String(String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_String(raw);
  }

  @protected
  bool? cst_encode_opt_box_autoadd_bool(bool? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_bool(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_i_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_i_32(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  JSAny cst_encode_otp_recovery_keys_output(OtpRecoveryKeysOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_list_String(raw.keys)].jsify()!;
  }

  @protected
  JSAny cst_encode_otp_register(OtpRegister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.secret),
      cst_encode_String(raw.alg),
      cst_encode_list_String(raw.recover)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_otp_register_url(OtpRegisterUrl raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.url), cst_encode_list_String(raw.recover)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_pre_register_device_data(PreRegisterDeviceData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.input),
      cst_encode_String(raw.exportedPublicKey)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_register_device_data(RegisterDeviceData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.sessionId),
      cst_encode_String(raw.exportedPublicKey)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_searchable_create_output(SearchableCreateOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_list_String(raw.hashes),
      cst_encode_String(raw.alg),
      cst_encode_String(raw.keyId)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_sortable_encrypt_output(SortableEncryptOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_u_64(raw.number),
      cst_encode_String(raw.alg),
      cst_encode_String(raw.keyId)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return castNativeBigInt(raw);
  }

  @protected
  JSAny cst_encode_user_data(UserData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.jwt),
      cst_encode_String(raw.userId),
      cst_encode_String(raw.deviceId),
      cst_encode_String(raw.refreshToken),
      cst_encode_device_key_data(raw.keys),
      cst_encode_list_user_key_data(raw.userKeys),
      cst_encode_list_group_out_data_hmac_keys(raw.hmacKeys)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_user_device_list(UserDeviceList raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.deviceId),
      cst_encode_String(raw.time),
      cst_encode_String(raw.deviceIdentifier)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_user_init_server_output(UserInitServerOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.jwt),
      cst_encode_list_group_invite_req_list(raw.invites)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_user_key_data(UserKeyData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.privateKey),
      cst_encode_String(raw.publicKey),
      cst_encode_String(raw.groupKey),
      cst_encode_String(raw.time),
      cst_encode_String(raw.groupKeyId),
      cst_encode_String(raw.signKey),
      cst_encode_String(raw.verifyKey),
      cst_encode_String(raw.exportedPublicKey),
      cst_encode_opt_String(raw.exportedPublicKeySigKeyId),
      cst_encode_String(raw.exportedVerifyKey)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_user_login_out(UserLoginOut raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_opt_String(raw.direct),
      cst_encode_opt_String(raw.masterKey),
      cst_encode_opt_String(raw.authKey)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_user_public_key_data(UserPublicKeyData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.publicKey),
      cst_encode_String(raw.publicKeyId),
      cst_encode_opt_String(raw.publicKeySigKeyId)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_usize(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return castNativeBigInt(raw);
  }

  @protected
  int cst_encode_belongs_to_type(BelongsToType raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_belongs_to_type(BelongsToType self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_claims(Claims self, SseSerializer serializer);

  @protected
  void sse_encode_crypto_raw_output(
      CryptoRawOutput self, SseSerializer serializer);

  @protected
  void sse_encode_device_key_data(DeviceKeyData self, SseSerializer serializer);

  @protected
  void sse_encode_encrypted_head(EncryptedHead self, SseSerializer serializer);

  @protected
  void sse_encode_file_data(FileData self, SseSerializer serializer);

  @protected
  void sse_encode_file_done_register(
      FileDoneRegister self, SseSerializer serializer);

  @protected
  void sse_encode_file_download_result(
      FileDownloadResult self, SseSerializer serializer);

  @protected
  void sse_encode_file_part_list_item(
      FilePartListItem self, SseSerializer serializer);

  @protected
  void sse_encode_file_prepare_register(
      FilePrepareRegister self, SseSerializer serializer);

  @protected
  void sse_encode_file_register_output(
      FileRegisterOutput self, SseSerializer serializer);

  @protected
  void sse_encode_generated_register_data(
      GeneratedRegisterData self, SseSerializer serializer);

  @protected
  void sse_encode_group_children_list(
      GroupChildrenList self, SseSerializer serializer);

  @protected
  void sse_encode_group_data_check_update_server_output(
      GroupDataCheckUpdateServerOutput self, SseSerializer serializer);

  @protected
  void sse_encode_group_invite_req_list(
      GroupInviteReqList self, SseSerializer serializer);

  @protected
  void sse_encode_group_join_req_list(
      GroupJoinReqList self, SseSerializer serializer);

  @protected
  void sse_encode_group_key_data(GroupKeyData self, SseSerializer serializer);

  @protected
  void sse_encode_group_out_data(GroupOutData self, SseSerializer serializer);

  @protected
  void sse_encode_group_out_data_hmac_keys(
      GroupOutDataHmacKeys self, SseSerializer serializer);

  @protected
  void sse_encode_group_out_data_keys(
      GroupOutDataKeys self, SseSerializer serializer);

  @protected
  void sse_encode_group_out_data_sortable_keys(
      GroupOutDataSortableKeys self, SseSerializer serializer);

  @protected
  void sse_encode_group_public_key_data(
      GroupPublicKeyData self, SseSerializer serializer);

  @protected
  void sse_encode_group_user_list_item(
      GroupUserListItem self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_key_rotation_get_out(
      KeyRotationGetOut self, SseSerializer serializer);

  @protected
  void sse_encode_key_rotation_input(
      KeyRotationInput self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_file_part_list_item(
      List<FilePartListItem> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_children_list(
      List<GroupChildrenList> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_invite_req_list(
      List<GroupInviteReqList> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_join_req_list(
      List<GroupJoinReqList> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_out_data_hmac_keys(
      List<GroupOutDataHmacKeys> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_out_data_keys(
      List<GroupOutDataKeys> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_out_data_sortable_keys(
      List<GroupOutDataSortableKeys> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_user_list_item(
      List<GroupUserListItem> self, SseSerializer serializer);

  @protected
  void sse_encode_list_groups(ListGroups self, SseSerializer serializer);

  @protected
  void sse_encode_list_key_rotation_get_out(
      List<KeyRotationGetOut> self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_groups(
      List<ListGroups> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_user_device_list(
      List<UserDeviceList> self, SseSerializer serializer);

  @protected
  void sse_encode_list_user_key_data(
      List<UserKeyData> self, SseSerializer serializer);

  @protected
  void sse_encode_non_registered_key_output(
      NonRegisteredKeyOutput self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_otp_recovery_keys_output(
      OtpRecoveryKeysOutput self, SseSerializer serializer);

  @protected
  void sse_encode_otp_register(OtpRegister self, SseSerializer serializer);

  @protected
  void sse_encode_otp_register_url(
      OtpRegisterUrl self, SseSerializer serializer);

  @protected
  void sse_encode_pre_register_device_data(
      PreRegisterDeviceData self, SseSerializer serializer);

  @protected
  void sse_encode_register_device_data(
      RegisterDeviceData self, SseSerializer serializer);

  @protected
  void sse_encode_searchable_create_output(
      SearchableCreateOutput self, SseSerializer serializer);

  @protected
  void sse_encode_sortable_encrypt_output(
      SortableEncryptOutput self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_user_data(UserData self, SseSerializer serializer);

  @protected
  void sse_encode_user_device_list(
      UserDeviceList self, SseSerializer serializer);

  @protected
  void sse_encode_user_init_server_output(
      UserInitServerOutput self, SseSerializer serializer);

  @protected
  void sse_encode_user_key_data(UserKeyData self, SseSerializer serializer);

  @protected
  void sse_encode_user_login_out(UserLoginOut self, SseSerializer serializer);

  @protected
  void sse_encode_user_public_key_data(
      UserPublicKeyData self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void wire__crate__api__user__change_password(
          NativePortType port_,
          String base_url,
          String auth_token,
          String user_identifier,
          String old_password,
          String new_password,
          String? mfa_token,
          bool? mfa_recovery) =>
      wasmModule.wire__crate__api__user__change_password(
          port_,
          base_url,
          auth_token,
          user_identifier,
          old_password,
          new_password,
          mfa_token,
          mfa_recovery);

  void wire__crate__api__user__check_user_identifier_available(
          NativePortType port_,
          String base_url,
          String auth_token,
          String user_identifier) =>
      wasmModule.wire__crate__api__user__check_user_identifier_available(
          port_, base_url, auth_token, user_identifier);

  void wire__crate__api__crypto__create_searchable(NativePortType port_,
          String key, String data, bool full, int? limit) =>
      wasmModule.wire__crate__api__crypto__create_searchable(
          port_, key, data, full, limit);

  void wire__crate__api__crypto__create_searchable_raw(NativePortType port_,
          String key, String data, bool full, int? limit) =>
      wasmModule.wire__crate__api__crypto__create_searchable_raw(
          port_, key, data, full, limit);

  JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__decode_jwt(String jwt) =>
          wasmModule.wire__crate__api__user__decode_jwt(jwt);

  void wire__crate__api__crypto__decrypt_asymmetric(NativePortType port_,
          String private_key, JSAny encrypted_data, String? verify_key_data) =>
      wasmModule.wire__crate__api__crypto__decrypt_asymmetric(
          port_, private_key, encrypted_data, verify_key_data);

  void wire__crate__api__crypto__decrypt_raw_asymmetric(
          NativePortType port_,
          String private_key,
          JSAny encrypted_data,
          String head,
          String? verify_key_data) =>
      wasmModule.wire__crate__api__crypto__decrypt_raw_asymmetric(
          port_, private_key, encrypted_data, head, verify_key_data);

  void wire__crate__api__crypto__decrypt_raw_symmetric(
          NativePortType port_,
          String key,
          JSAny encrypted_data,
          String head,
          String? verify_key_data) =>
      wasmModule.wire__crate__api__crypto__decrypt_raw_symmetric(
          port_, key, encrypted_data, head, verify_key_data);

  void wire__crate__api__crypto__decrypt_string_asymmetric(NativePortType port_,
          String private_key, String encrypted_data, String? verify_key_data) =>
      wasmModule.wire__crate__api__crypto__decrypt_string_asymmetric(
          port_, private_key, encrypted_data, verify_key_data);

  void wire__crate__api__crypto__decrypt_string_symmetric(NativePortType port_,
          String key, String encrypted_data, String? verify_key_data) =>
      wasmModule.wire__crate__api__crypto__decrypt_string_symmetric(
          port_, key, encrypted_data, verify_key_data);

  void wire__crate__api__crypto__decrypt_sym_key(NativePortType port_,
          String master_key, String encrypted_symmetric_key_info) =>
      wasmModule.wire__crate__api__crypto__decrypt_sym_key(
          port_, master_key, encrypted_symmetric_key_info);

  void wire__crate__api__crypto__decrypt_sym_key_by_private_key(
          NativePortType port_,
          String private_key,
          String encrypted_symmetric_key_info) =>
      wasmModule.wire__crate__api__crypto__decrypt_sym_key_by_private_key(
          port_, private_key, encrypted_symmetric_key_info);

  void wire__crate__api__crypto__decrypt_symmetric(NativePortType port_,
          String key, JSAny encrypted_data, String? verify_key_data) =>
      wasmModule.wire__crate__api__crypto__decrypt_symmetric(
          port_, key, encrypted_data, verify_key_data);

  void wire__crate__api__user__delete_device(
          NativePortType port_,
          String base_url,
          String auth_token,
          String fresh_jwt,
          String device_id) =>
      wasmModule.wire__crate__api__user__delete_device(
          port_, base_url, auth_token, fresh_jwt, device_id);

  void wire__crate__api__user__delete_user(NativePortType port_,
          String base_url, String auth_token, String fresh_jwt) =>
      wasmModule.wire__crate__api__user__delete_user(
          port_, base_url, auth_token, fresh_jwt);

  void wire__crate__api__crypto__deserialize_head_from_string(
          NativePortType port_, String head) =>
      wasmModule.wire__crate__api__crypto__deserialize_head_from_string(
          port_, head);

  void wire__crate__api__user__disable_otp(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__disable_otp(
          port_, base_url, auth_token, jwt);

  JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__done_check_user_identifier_available(
              String server_output) =>
          wasmModule
              .wire__crate__api__user__done_check_user_identifier_available(
                  server_output);

  void wire__crate__api__crypto__done_fetch_sym_key(NativePortType port_,
          String master_key, String server_out, bool non_registered) =>
      wasmModule.wire__crate__api__crypto__done_fetch_sym_key(
          port_, master_key, server_out, non_registered);

  void wire__crate__api__crypto__done_fetch_sym_key_by_private_key(
          NativePortType port_,
          String private_key,
          String server_out,
          bool non_registered) =>
      wasmModule.wire__crate__api__crypto__done_fetch_sym_key_by_private_key(
          port_, private_key, server_out, non_registered);

  void wire__crate__api__user__done_fetch_user_key(
          NativePortType port_, String private_key, String server_output) =>
      wasmModule.wire__crate__api__user__done_fetch_user_key(
          port_, private_key, server_output);

  JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__done_register(String server_output) =>
          wasmModule.wire__crate__api__user__done_register(server_output);

  JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__done_register_device_start(
              String server_output) =>
          wasmModule.wire__crate__api__user__done_register_device_start(
              server_output);

  void wire__crate__api__crypto__encrypt_asymmetric(NativePortType port_,
          String reply_public_key_data, JSAny data, String? sign_key) =>
      wasmModule.wire__crate__api__crypto__encrypt_asymmetric(
          port_, reply_public_key_data, data, sign_key);

  void wire__crate__api__crypto__encrypt_raw_asymmetric(NativePortType port_,
          String reply_public_key_data, JSAny data, String? sign_key) =>
      wasmModule.wire__crate__api__crypto__encrypt_raw_asymmetric(
          port_, reply_public_key_data, data, sign_key);

  void wire__crate__api__crypto__encrypt_raw_symmetric(
          NativePortType port_, String key, JSAny data, String? sign_key) =>
      wasmModule.wire__crate__api__crypto__encrypt_raw_symmetric(
          port_, key, data, sign_key);

  void wire__crate__api__crypto__encrypt_string_asymmetric(NativePortType port_,
          String reply_public_key_data, String data, String? sign_key) =>
      wasmModule.wire__crate__api__crypto__encrypt_string_asymmetric(
          port_, reply_public_key_data, data, sign_key);

  void wire__crate__api__crypto__encrypt_string_symmetric(
          NativePortType port_, String key, String data, String? sign_key) =>
      wasmModule.wire__crate__api__crypto__encrypt_string_symmetric(
          port_, key, data, sign_key);

  void wire__crate__api__crypto__encrypt_symmetric(
          NativePortType port_, String key, JSAny data, String? sign_key) =>
      wasmModule.wire__crate__api__crypto__encrypt_symmetric(
          port_, key, data, sign_key);

  void wire__crate__api__user__extract_user_data(
          NativePortType port_, String data) =>
      wasmModule.wire__crate__api__user__extract_user_data(port_, data);

  void wire__crate__api__user__fetch_user_key(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String key_id,
          String private_key) =>
      wasmModule.wire__crate__api__user__fetch_user_key(
          port_, base_url, auth_token, jwt, key_id, private_key);

  void wire__crate__api__file__file_delete_file(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String file_id,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__file__file_delete_file(
          port_, base_url, auth_token, jwt, file_id, group_id, group_as_member);

  void wire__crate__api__file__file_done_register_file(
          NativePortType port_, String server_output) =>
      wasmModule.wire__crate__api__file__file_done_register_file(
          port_, server_output);

  void wire__crate__api__file__file_download_and_decrypt_file_part(
          NativePortType port_,
          String base_url,
          String? url_prefix,
          String auth_token,
          String part_id,
          String content_key,
          String? verify_key_data) =>
      wasmModule.wire__crate__api__file__file_download_and_decrypt_file_part(
          port_,
          base_url,
          url_prefix,
          auth_token,
          part_id,
          content_key,
          verify_key_data);

  void wire__crate__api__file__file_download_and_decrypt_file_part_start(
          NativePortType port_,
          String base_url,
          String? url_prefix,
          String auth_token,
          String part_id,
          String content_key,
          String? verify_key_data) =>
      wasmModule
          .wire__crate__api__file__file_download_and_decrypt_file_part_start(
              port_,
              base_url,
              url_prefix,
              auth_token,
              part_id,
              content_key,
              verify_key_data);

  void wire__crate__api__file__file_download_file_meta(
          NativePortType port_,
          String base_url,
          String auth_token,
          String? jwt,
          String id,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__file__file_download_file_meta(
          port_, base_url, auth_token, jwt, id, group_id, group_as_member);

  void wire__crate__api__file__file_download_part_list(
          NativePortType port_,
          String base_url,
          String auth_token,
          String file_id,
          String last_sequence) =>
      wasmModule.wire__crate__api__file__file_download_part_list(
          port_, base_url, auth_token, file_id, last_sequence);

  void wire__crate__api__file__file_file_name_update(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String file_id,
          String content_key,
          String? file_name) =>
      wasmModule.wire__crate__api__file__file_file_name_update(
          port_, base_url, auth_token, jwt, file_id, content_key, file_name);

  void wire__crate__api__file__file_prepare_register_file(
          NativePortType port_,
          String master_key_id,
          String content_key,
          String encrypted_content_key,
          String? belongs_to_id,
          String belongs_to_type,
          String? file_name) =>
      wasmModule.wire__crate__api__file__file_prepare_register_file(
          port_,
          master_key_id,
          content_key,
          encrypted_content_key,
          belongs_to_id,
          belongs_to_type,
          file_name);

  void wire__crate__api__file__file_register_file(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String master_key_id,
          String content_key,
          String encrypted_content_key,
          String? belongs_to_id,
          String belongs_to_type,
          String? file_name,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__file__file_register_file(
          port_,
          base_url,
          auth_token,
          jwt,
          master_key_id,
          content_key,
          encrypted_content_key,
          belongs_to_id,
          belongs_to_type,
          file_name,
          group_id,
          group_as_member);

  void wire__crate__api__file__file_upload_part(
          NativePortType port_,
          String base_url,
          String? url_prefix,
          String auth_token,
          String jwt,
          String session_id,
          bool end,
          int sequence,
          String content_key,
          String? sign_key,
          JSAny part) =>
      wasmModule.wire__crate__api__file__file_upload_part(
          port_,
          base_url,
          url_prefix,
          auth_token,
          jwt,
          session_id,
          end,
          sequence,
          content_key,
          sign_key,
          part);

  void wire__crate__api__file__file_upload_part_start(
          NativePortType port_,
          String base_url,
          String? url_prefix,
          String auth_token,
          String jwt,
          String session_id,
          bool end,
          int sequence,
          String content_key,
          String? sign_key,
          JSAny part) =>
      wasmModule.wire__crate__api__file__file_upload_part_start(
          port_,
          base_url,
          url_prefix,
          auth_token,
          jwt,
          session_id,
          end,
          sequence,
          content_key,
          sign_key,
          part);

  void wire__crate__api__crypto__generate_non_register_sym_key(
          NativePortType port_, String master_key) =>
      wasmModule.wire__crate__api__crypto__generate_non_register_sym_key(
          port_, master_key);

  void wire__crate__api__crypto__generate_non_register_sym_key_by_public_key(
          NativePortType port_, String reply_public_key) =>
      wasmModule
          .wire__crate__api__crypto__generate_non_register_sym_key_by_public_key(
              port_, reply_public_key);

  void wire__crate__api__user__generate_user_register_data(
          NativePortType port_) =>
      wasmModule.wire__crate__api__user__generate_user_register_data(port_);

  void wire__crate__api__user__get_fresh_jwt(
          NativePortType port_,
          String base_url,
          String auth_token,
          String user_identifier,
          String password,
          String? mfa_token,
          bool? mfa_recovery) =>
      wasmModule.wire__crate__api__user__get_fresh_jwt(port_, base_url,
          auth_token, user_identifier, password, mfa_token, mfa_recovery);

  void wire__crate__api__user__get_otp_recover_keys(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__get_otp_recover_keys(
          port_, base_url, auth_token, jwt);

  void wire__crate__api__user__get_user_devices(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String last_fetched_time,
          String last_fetched_id) =>
      wasmModule.wire__crate__api__user__get_user_devices(
          port_, base_url, auth_token, jwt, last_fetched_time, last_fetched_id);

  void wire__crate__api__group__group_accept_invite(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_accept_invite(
          port_, base_url, auth_token, jwt, id, group_id, group_as_member);

  void wire__crate__api__group__group_accept_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String user_id,
          int key_count,
          int? rank,
          int admin_rank,
          String user_public_key,
          String group_keys,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_accept_join_req(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          user_id,
          key_count,
          rank,
          admin_rank,
          user_public_key,
          group_keys,
          group_as_member);

  void wire__crate__api__group__group_create_child_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String parent_public_key,
          String parent_id,
          int admin_rank,
          String? group_as_member,
          String? sign_key,
          String starter) =>
      wasmModule.wire__crate__api__group__group_create_child_group(
          port_,
          base_url,
          auth_token,
          jwt,
          parent_public_key,
          parent_id,
          admin_rank,
          group_as_member,
          sign_key,
          starter);

  void wire__crate__api__group__group_create_connected_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String connected_group_id,
          int admin_rank,
          String parent_public_key,
          String? group_as_member,
          String? sign_key,
          String starter) =>
      wasmModule.wire__crate__api__group__group_create_connected_group(
          port_,
          base_url,
          auth_token,
          jwt,
          connected_group_id,
          admin_rank,
          parent_public_key,
          group_as_member,
          sign_key,
          starter);

  void wire__crate__api__group__group_create_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String creators_public_key,
          String? group_as_member,
          String? sign_key,
          String starter) =>
      wasmModule.wire__crate__api__group__group_create_group(
          port_,
          base_url,
          auth_token,
          jwt,
          creators_public_key,
          group_as_member,
          sign_key,
          starter);

  void wire__crate__api__group__group_decrypt_hmac_key(
          NativePortType port_, String group_key, String server_key_data) =>
      wasmModule.wire__crate__api__group__group_decrypt_hmac_key(
          port_, group_key, server_key_data);

  void wire__crate__api__group__group_decrypt_key(NativePortType port_,
          String private_key, String server_key_data, String? verify_key) =>
      wasmModule.wire__crate__api__group__group_decrypt_key(
          port_, private_key, server_key_data, verify_key);

  void wire__crate__api__group__group_decrypt_sortable_key(
          NativePortType port_, String group_key, String server_key_data) =>
      wasmModule.wire__crate__api__group__group_decrypt_sortable_key(
          port_, group_key, server_key_data);

  void wire__crate__api__group__group_delete_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_delete_group(
          port_, base_url, auth_token, jwt, id, admin_rank, group_as_member);

  void wire__crate__api__group__group_delete_sent_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String join_req_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_delete_sent_join_req(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          admin_rank,
          join_req_group_id,
          group_as_member);

  void wire__crate__api__group__group_delete_sent_join_req_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String join_req_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_delete_sent_join_req_user(
          port_, base_url, auth_token, jwt, join_req_group_id, group_as_member);

  void wire__crate__api__group__group_done_key_rotation(
          NativePortType port_,
          String private_key,
          String public_key,
          String pre_group_key,
          String server_output) =>
      wasmModule.wire__crate__api__group__group_done_key_rotation(
          port_, private_key, public_key, pre_group_key, server_output);

  void wire__crate__api__group__group_extract_group_data(
          NativePortType port_, String server_output) =>
      wasmModule.wire__crate__api__group__group_extract_group_data(
          port_, server_output);

  void wire__crate__api__group__group_extract_group_keys(
          NativePortType port_, String server_output) =>
      wasmModule.wire__crate__api__group__group_extract_group_keys(
          port_, server_output);

  void wire__crate__api__group__group_finish_key_rotation(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String server_output,
          String pre_group_key,
          String public_key,
          String private_key,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_finish_key_rotation(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          server_output,
          pre_group_key,
          public_key,
          private_key,
          group_as_member);

  void wire__crate__api__group__group_get_all_first_level_children(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_all_first_level_children(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          last_fetched_time,
          last_fetched_group_id,
          group_as_member);

  JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__group__group_get_done_key_rotation_server_input(
              String server_output) =>
          wasmModule
              .wire__crate__api__group__group_get_done_key_rotation_server_input(
                  server_output);

  void wire__crate__api__group__group_get_group_data(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_group_data(
          port_, base_url, auth_token, jwt, id, group_as_member);

  void wire__crate__api__group__group_get_group_key(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String key_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_group_key(
          port_, base_url, auth_token, jwt, id, key_id, group_as_member);

  void wire__crate__api__group__group_get_group_keys(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String last_fetched_time,
          String last_fetched_key_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_group_keys(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          last_fetched_time,
          last_fetched_key_id,
          group_as_member);

  void wire__crate__api__group__group_get_group_updates(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_group_updates(
          port_, base_url, auth_token, jwt, id, group_as_member);

  void wire__crate__api__group__group_get_groups_for_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_id) =>
      wasmModule.wire__crate__api__group__group_get_groups_for_user(
          port_,
          base_url,
          auth_token,
          jwt,
          last_fetched_time,
          last_fetched_group_id,
          group_id);

  void wire__crate__api__group__group_get_invites_for_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_invites_for_user(
          port_,
          base_url,
          auth_token,
          jwt,
          last_fetched_time,
          last_fetched_group_id,
          group_id,
          group_as_member);

  void wire__crate__api__group__group_get_join_reqs(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String last_fetched_time,
          String last_fetched_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_join_reqs(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          admin_rank,
          last_fetched_time,
          last_fetched_id,
          group_as_member);

  void wire__crate__api__group__group_get_member(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String last_fetched_time,
          String last_fetched_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_member(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          last_fetched_time,
          last_fetched_id,
          group_as_member);

  void wire__crate__api__group__group_get_public_key_data(NativePortType port_,
          String base_url, String auth_token, String id) =>
      wasmModule.wire__crate__api__group__group_get_public_key_data(
          port_, base_url, auth_token, id);

  void wire__crate__api__group__group_get_sent_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_sent_join_req(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          admin_rank,
          last_fetched_time,
          last_fetched_group_id,
          group_as_member);

  void wire__crate__api__group__group_get_sent_join_req_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_sent_join_req_user(
          port_,
          base_url,
          auth_token,
          jwt,
          last_fetched_time,
          last_fetched_group_id,
          group_as_member);

  void wire__crate__api__group__group_invite_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String user_id,
          int key_count,
          int? rank,
          int admin_rank,
          bool auto_invite,
          bool group_invite,
          bool re_invite,
          String user_public_key,
          String group_keys,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_invite_user(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          user_id,
          key_count,
          rank,
          admin_rank,
          auto_invite,
          group_invite,
          re_invite,
          user_public_key,
          group_keys,
          group_as_member);

  void wire__crate__api__group__group_invite_user_session(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          bool auto_invite,
          String session_id,
          String user_public_key,
          String group_keys,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_invite_user_session(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          auto_invite,
          session_id,
          user_public_key,
          group_keys,
          group_as_member);

  void wire__crate__api__group__group_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_join_req(
          port_, base_url, auth_token, jwt, id, group_id, group_as_member);

  void wire__crate__api__group__group_join_user_session(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String session_id,
          String user_public_key,
          String group_keys,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_join_user_session(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          session_id,
          user_public_key,
          group_keys,
          group_as_member);

  void wire__crate__api__group__group_key_rotation(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String public_key,
          String pre_group_key,
          String? sign_key,
          String starter,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_key_rotation(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          public_key,
          pre_group_key,
          sign_key,
          starter,
          group_as_member);

  void wire__crate__api__group__group_kick_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String user_id,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_kick_user(port_, base_url,
          auth_token, jwt, id, user_id, admin_rank, group_as_member);

  void wire__crate__api__group__group_pre_done_key_rotation(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_pre_done_key_rotation(
          port_, base_url, auth_token, jwt, id, group_as_member);

  void wire__crate__api__group__group_prepare_create_group(NativePortType port_,
          String creators_public_key, String? sign_key, String starter) =>
      wasmModule.wire__crate__api__group__group_prepare_create_group(
          port_, creators_public_key, sign_key, starter);

  void wire__crate__api__group__group_prepare_key_rotation(
          NativePortType port_,
          String pre_group_key,
          String public_key,
          String? sign_key,
          String starter) =>
      wasmModule.wire__crate__api__group__group_prepare_key_rotation(
          port_, pre_group_key, public_key, sign_key, starter);

  void wire__crate__api__group__group_prepare_keys_for_new_member(
          NativePortType port_,
          String user_public_key,
          String group_keys,
          int key_count,
          int? rank,
          int admin_rank) =>
      wasmModule.wire__crate__api__group__group_prepare_keys_for_new_member(
          port_, user_public_key, group_keys, key_count, rank, admin_rank);

  JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__group__group_prepare_update_rank(
              String user_id, int rank, int admin_rank) =>
          wasmModule.wire__crate__api__group__group_prepare_update_rank(
              user_id, rank, admin_rank);

  void wire__crate__api__group__group_reject_invite(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_reject_invite(
          port_, base_url, auth_token, jwt, id, group_id, group_as_member);

  void wire__crate__api__group__group_reject_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String rejected_user_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_reject_join_req(port_, base_url,
          auth_token, jwt, id, admin_rank, rejected_user_id, group_as_member);

  void wire__crate__api__group__group_stop_group_invites(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_stop_group_invites(
          port_, base_url, auth_token, jwt, id, admin_rank, group_as_member);

  void wire__crate__api__group__group_update_rank(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String user_id,
          int rank,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_update_rank(port_, base_url,
          auth_token, jwt, id, user_id, rank, admin_rank, group_as_member);

  void wire__crate__api__user__init_user(NativePortType port_, String base_url,
          String auth_token, String jwt, String refresh_token) =>
      wasmModule.wire__crate__api__user__init_user(
          port_, base_url, auth_token, jwt, refresh_token);

  void wire__crate__api__group__leave_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__leave_group(
          port_, base_url, auth_token, jwt, id, group_as_member);

  void wire__crate__api__user__login(NativePortType port_, String base_url,
          String auth_token, String user_identifier, String password) =>
      wasmModule.wire__crate__api__user__login(
          port_, base_url, auth_token, user_identifier, password);

  void wire__crate__api__user__mfa_login(
          NativePortType port_,
          String base_url,
          String auth_token,
          String master_key_encryption,
          String auth_key,
          String user_identifier,
          String token,
          bool recovery) =>
      wasmModule.wire__crate__api__user__mfa_login(port_, base_url, auth_token,
          master_key_encryption, auth_key, user_identifier, token, recovery);

  JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__prepare_check_user_identifier_available(
              String user_identifier) =>
          wasmModule
              .wire__crate__api__user__prepare_check_user_identifier_available(
                  user_identifier);

  void wire__crate__api__user__prepare_register(
          NativePortType port_, String user_identifier, String password) =>
      wasmModule.wire__crate__api__user__prepare_register(
          port_, user_identifier, password);

  void wire__crate__api__user__prepare_register_device(NativePortType port_,
          String server_output, String user_keys, int key_count) =>
      wasmModule.wire__crate__api__user__prepare_register_device(
          port_, server_output, user_keys, key_count);

  void wire__crate__api__user__prepare_register_device_start(
          NativePortType port_, String device_identifier, String password) =>
      wasmModule.wire__crate__api__user__prepare_register_device_start(
          port_, device_identifier, password);

  void wire__crate__api__user__refresh_jwt(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String refresh_token) =>
      wasmModule.wire__crate__api__user__refresh_jwt(
          port_, base_url, auth_token, jwt, refresh_token);

  void wire__crate__api__user__register(NativePortType port_, String base_url,
          String auth_token, String user_identifier, String password) =>
      wasmModule.wire__crate__api__user__register(
          port_, base_url, auth_token, user_identifier, password);

  void wire__crate__api__user__register_device(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String server_output,
          int key_count,
          String user_keys) =>
      wasmModule.wire__crate__api__user__register_device(port_, base_url,
          auth_token, jwt, server_output, key_count, user_keys);

  void wire__crate__api__user__register_device_start(
          NativePortType port_,
          String base_url,
          String auth_token,
          String device_identifier,
          String password) =>
      wasmModule.wire__crate__api__user__register_device_start(
          port_, base_url, auth_token, device_identifier, password);

  void wire__crate__api__user__register_otp(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String issuer,
          String audience) =>
      wasmModule.wire__crate__api__user__register_otp(
          port_, base_url, auth_token, jwt, issuer, audience);

  void wire__crate__api__user__register_raw_otp(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__register_raw_otp(
          port_, base_url, auth_token, jwt);

  void wire__crate__api__user__reset_otp(NativePortType port_, String base_url,
          String auth_token, String jwt, String issuer, String audience) =>
      wasmModule.wire__crate__api__user__reset_otp(
          port_, base_url, auth_token, jwt, issuer, audience);

  void wire__crate__api__user__reset_password(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String new_password,
          String decrypted_private_key,
          String decrypted_sign_key) =>
      wasmModule.wire__crate__api__user__reset_password(
          port_,
          base_url,
          auth_token,
          jwt,
          new_password,
          decrypted_private_key,
          decrypted_sign_key);

  void wire__crate__api__user__reset_raw_otp(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__reset_raw_otp(
          port_, base_url, auth_token, jwt);

  void wire__crate__api__crypto__search(
          NativePortType port_, String key, String data) =>
      wasmModule.wire__crate__api__crypto__search(port_, key, data);

  void wire__crate__api__crypto__sortable_encrypt_number(
          NativePortType port_, String key, JSAny data) =>
      wasmModule.wire__crate__api__crypto__sortable_encrypt_number(
          port_, key, data);

  void wire__crate__api__crypto__sortable_encrypt_raw_number(
          NativePortType port_, String key, JSAny data) =>
      wasmModule.wire__crate__api__crypto__sortable_encrypt_raw_number(
          port_, key, data);

  void wire__crate__api__crypto__sortable_encrypt_raw_string(
          NativePortType port_, String key, String data) =>
      wasmModule.wire__crate__api__crypto__sortable_encrypt_raw_string(
          port_, key, data);

  void wire__crate__api__crypto__sortable_encrypt_string(
          NativePortType port_, String key, String data) =>
      wasmModule.wire__crate__api__crypto__sortable_encrypt_string(
          port_, key, data);

  void wire__crate__api__crypto__split_head_and_encrypted_data(
          NativePortType port_, JSAny data) =>
      wasmModule.wire__crate__api__crypto__split_head_and_encrypted_data(
          port_, data);

  void wire__crate__api__crypto__split_head_and_encrypted_string(
          NativePortType port_, String data) =>
      wasmModule.wire__crate__api__crypto__split_head_and_encrypted_string(
          port_, data);

  void wire__crate__api__user__update_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String user_identifier) =>
      wasmModule.wire__crate__api__user__update_user(
          port_, base_url, auth_token, jwt, user_identifier);

  void wire__crate__api__user__user_create_safety_number(
          NativePortType port_,
          String verify_key_1,
          String user_id_1,
          String? verify_key_2,
          String? user_id_2) =>
      wasmModule.wire__crate__api__user__user_create_safety_number(
          port_, verify_key_1, user_id_1, verify_key_2, user_id_2);

  void wire__crate__api__user__user_device_key_session_upload(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String session_id,
          String user_public_key,
          String group_keys) =>
      wasmModule.wire__crate__api__user__user_device_key_session_upload(port_,
          base_url, auth_token, jwt, session_id, user_public_key, group_keys);

  void wire__crate__api__user__user_fetch_public_key(NativePortType port_,
          String base_url, String auth_token, String user_id) =>
      wasmModule.wire__crate__api__user__user_fetch_public_key(
          port_, base_url, auth_token, user_id);

  void wire__crate__api__user__user_fetch_verify_key(
          NativePortType port_,
          String base_url,
          String auth_token,
          String user_id,
          String verify_key_id) =>
      wasmModule.wire__crate__api__user__user_fetch_verify_key(
          port_, base_url, auth_token, user_id, verify_key_id);

  void wire__crate__api__user__user_finish_key_rotation(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String server_output,
          String pre_group_key,
          String public_key,
          String private_key) =>
      wasmModule.wire__crate__api__user__user_finish_key_rotation(
          port_,
          base_url,
          auth_token,
          jwt,
          server_output,
          pre_group_key,
          public_key,
          private_key);

  void wire__crate__api__user__user_get_done_key_rotation_server_input(
          NativePortType port_, String server_output) =>
      wasmModule
          .wire__crate__api__user__user_get_done_key_rotation_server_input(
              port_, server_output);

  void wire__crate__api__user__user_key_rotation(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String public_device_key,
          String pre_user_key) =>
      wasmModule.wire__crate__api__user__user_key_rotation(
          port_, base_url, auth_token, jwt, public_device_key, pre_user_key);

  void wire__crate__api__user__user_pre_done_key_rotation(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__user_pre_done_key_rotation(
          port_, base_url, auth_token, jwt);

  void wire__crate__api__user__user_verify_user_public_key(
          NativePortType port_, String verify_key, String public_key) =>
      wasmModule.wire__crate__api__user__user_verify_user_public_key(
          port_, verify_key, public_key);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
extension type RustLibWasmModule._(JSObject _) implements JSObject {
  external void wire__crate__api__user__change_password(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier,
      String old_password,
      String new_password,
      String? mfa_token,
      bool? mfa_recovery);

  external void wire__crate__api__user__check_user_identifier_available(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier);

  external void wire__crate__api__crypto__create_searchable(
      NativePortType port_, String key, String data, bool full, int? limit);

  external void wire__crate__api__crypto__create_searchable_raw(
      NativePortType port_, String key, String data, bool full, int? limit);

  external JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__decode_jwt(String jwt);

  external void wire__crate__api__crypto__decrypt_asymmetric(
      NativePortType port_,
      String private_key,
      JSAny encrypted_data,
      String? verify_key_data);

  external void wire__crate__api__crypto__decrypt_raw_asymmetric(
      NativePortType port_,
      String private_key,
      JSAny encrypted_data,
      String head,
      String? verify_key_data);

  external void wire__crate__api__crypto__decrypt_raw_symmetric(
      NativePortType port_,
      String key,
      JSAny encrypted_data,
      String head,
      String? verify_key_data);

  external void wire__crate__api__crypto__decrypt_string_asymmetric(
      NativePortType port_,
      String private_key,
      String encrypted_data,
      String? verify_key_data);

  external void wire__crate__api__crypto__decrypt_string_symmetric(
      NativePortType port_,
      String key,
      String encrypted_data,
      String? verify_key_data);

  external void wire__crate__api__crypto__decrypt_sym_key(NativePortType port_,
      String master_key, String encrypted_symmetric_key_info);

  external void wire__crate__api__crypto__decrypt_sym_key_by_private_key(
      NativePortType port_,
      String private_key,
      String encrypted_symmetric_key_info);

  external void wire__crate__api__crypto__decrypt_symmetric(
      NativePortType port_,
      String key,
      JSAny encrypted_data,
      String? verify_key_data);

  external void wire__crate__api__user__delete_device(NativePortType port_,
      String base_url, String auth_token, String fresh_jwt, String device_id);

  external void wire__crate__api__user__delete_user(NativePortType port_,
      String base_url, String auth_token, String fresh_jwt);

  external void wire__crate__api__crypto__deserialize_head_from_string(
      NativePortType port_, String head);

  external void wire__crate__api__user__disable_otp(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__done_check_user_identifier_available(
          String server_output);

  external void wire__crate__api__crypto__done_fetch_sym_key(
      NativePortType port_,
      String master_key,
      String server_out,
      bool non_registered);

  external void wire__crate__api__crypto__done_fetch_sym_key_by_private_key(
      NativePortType port_,
      String private_key,
      String server_out,
      bool non_registered);

  external void wire__crate__api__user__done_fetch_user_key(
      NativePortType port_, String private_key, String server_output);

  external JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__done_register(String server_output);

  external JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__done_register_device_start(String server_output);

  external void wire__crate__api__crypto__encrypt_asymmetric(
      NativePortType port_,
      String reply_public_key_data,
      JSAny data,
      String? sign_key);

  external void wire__crate__api__crypto__encrypt_raw_asymmetric(
      NativePortType port_,
      String reply_public_key_data,
      JSAny data,
      String? sign_key);

  external void wire__crate__api__crypto__encrypt_raw_symmetric(
      NativePortType port_, String key, JSAny data, String? sign_key);

  external void wire__crate__api__crypto__encrypt_string_asymmetric(
      NativePortType port_,
      String reply_public_key_data,
      String data,
      String? sign_key);

  external void wire__crate__api__crypto__encrypt_string_symmetric(
      NativePortType port_, String key, String data, String? sign_key);

  external void wire__crate__api__crypto__encrypt_symmetric(
      NativePortType port_, String key, JSAny data, String? sign_key);

  external void wire__crate__api__user__extract_user_data(
      NativePortType port_, String data);

  external void wire__crate__api__user__fetch_user_key(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String key_id,
      String private_key);

  external void wire__crate__api__file__file_delete_file(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String file_id,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__file__file_done_register_file(
      NativePortType port_, String server_output);

  external void wire__crate__api__file__file_download_and_decrypt_file_part(
      NativePortType port_,
      String base_url,
      String? url_prefix,
      String auth_token,
      String part_id,
      String content_key,
      String? verify_key_data);

  external void
      wire__crate__api__file__file_download_and_decrypt_file_part_start(
          NativePortType port_,
          String base_url,
          String? url_prefix,
          String auth_token,
          String part_id,
          String content_key,
          String? verify_key_data);

  external void wire__crate__api__file__file_download_file_meta(
      NativePortType port_,
      String base_url,
      String auth_token,
      String? jwt,
      String id,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__file__file_download_part_list(
      NativePortType port_,
      String base_url,
      String auth_token,
      String file_id,
      String last_sequence);

  external void wire__crate__api__file__file_file_name_update(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String file_id,
      String content_key,
      String? file_name);

  external void wire__crate__api__file__file_prepare_register_file(
      NativePortType port_,
      String master_key_id,
      String content_key,
      String encrypted_content_key,
      String? belongs_to_id,
      String belongs_to_type,
      String? file_name);

  external void wire__crate__api__file__file_register_file(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String master_key_id,
      String content_key,
      String encrypted_content_key,
      String? belongs_to_id,
      String belongs_to_type,
      String? file_name,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__file__file_upload_part(
      NativePortType port_,
      String base_url,
      String? url_prefix,
      String auth_token,
      String jwt,
      String session_id,
      bool end,
      int sequence,
      String content_key,
      String? sign_key,
      JSAny part);

  external void wire__crate__api__file__file_upload_part_start(
      NativePortType port_,
      String base_url,
      String? url_prefix,
      String auth_token,
      String jwt,
      String session_id,
      bool end,
      int sequence,
      String content_key,
      String? sign_key,
      JSAny part);

  external void wire__crate__api__crypto__generate_non_register_sym_key(
      NativePortType port_, String master_key);

  external void
      wire__crate__api__crypto__generate_non_register_sym_key_by_public_key(
          NativePortType port_, String reply_public_key);

  external void wire__crate__api__user__generate_user_register_data(
      NativePortType port_);

  external void wire__crate__api__user__get_fresh_jwt(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier,
      String password,
      String? mfa_token,
      bool? mfa_recovery);

  external void wire__crate__api__user__get_otp_recover_keys(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external void wire__crate__api__user__get_user_devices(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String last_fetched_time,
      String last_fetched_id);

  external void wire__crate__api__group__group_accept_invite(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_accept_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String user_id,
      int key_count,
      int? rank,
      int admin_rank,
      String user_public_key,
      String group_keys,
      String? group_as_member);

  external void wire__crate__api__group__group_create_child_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String parent_public_key,
      String parent_id,
      int admin_rank,
      String? group_as_member,
      String? sign_key,
      String starter);

  external void wire__crate__api__group__group_create_connected_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String connected_group_id,
      int admin_rank,
      String parent_public_key,
      String? group_as_member,
      String? sign_key,
      String starter);

  external void wire__crate__api__group__group_create_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String creators_public_key,
      String? group_as_member,
      String? sign_key,
      String starter);

  external void wire__crate__api__group__group_decrypt_hmac_key(
      NativePortType port_, String group_key, String server_key_data);

  external void wire__crate__api__group__group_decrypt_key(NativePortType port_,
      String private_key, String server_key_data, String? verify_key);

  external void wire__crate__api__group__group_decrypt_sortable_key(
      NativePortType port_, String group_key, String server_key_data);

  external void wire__crate__api__group__group_delete_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_delete_sent_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String join_req_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_delete_sent_join_req_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String join_req_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_done_key_rotation(
      NativePortType port_,
      String private_key,
      String public_key,
      String pre_group_key,
      String server_output);

  external void wire__crate__api__group__group_extract_group_data(
      NativePortType port_, String server_output);

  external void wire__crate__api__group__group_extract_group_keys(
      NativePortType port_, String server_output);

  external void wire__crate__api__group__group_finish_key_rotation(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String server_output,
      String pre_group_key,
      String public_key,
      String private_key,
      String? group_as_member);

  external void wire__crate__api__group__group_get_all_first_level_children(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_as_member);

  external JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__group__group_get_done_key_rotation_server_input(
          String server_output);

  external void wire__crate__api__group__group_get_group_data(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_group_key(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String key_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_group_keys(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String last_fetched_time,
      String last_fetched_key_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_group_updates(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_groups_for_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_id);

  external void wire__crate__api__group__group_get_invites_for_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_join_reqs(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String last_fetched_time,
      String last_fetched_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_member(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String last_fetched_time,
      String last_fetched_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_public_key_data(
      NativePortType port_, String base_url, String auth_token, String id);

  external void wire__crate__api__group__group_get_sent_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_sent_join_req_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_invite_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String user_id,
      int key_count,
      int? rank,
      int admin_rank,
      bool auto_invite,
      bool group_invite,
      bool re_invite,
      String user_public_key,
      String group_keys,
      String? group_as_member);

  external void wire__crate__api__group__group_invite_user_session(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      bool auto_invite,
      String session_id,
      String user_public_key,
      String group_keys,
      String? group_as_member);

  external void wire__crate__api__group__group_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_join_user_session(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String session_id,
      String user_public_key,
      String group_keys,
      String? group_as_member);

  external void wire__crate__api__group__group_key_rotation(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String public_key,
      String pre_group_key,
      String? sign_key,
      String starter,
      String? group_as_member);

  external void wire__crate__api__group__group_kick_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String user_id,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_pre_done_key_rotation(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_as_member);

  external void wire__crate__api__group__group_prepare_create_group(
      NativePortType port_,
      String creators_public_key,
      String? sign_key,
      String starter);

  external void wire__crate__api__group__group_prepare_key_rotation(
      NativePortType port_,
      String pre_group_key,
      String public_key,
      String? sign_key,
      String starter);

  external void wire__crate__api__group__group_prepare_keys_for_new_member(
      NativePortType port_,
      String user_public_key,
      String group_keys,
      int key_count,
      int? rank,
      int admin_rank);

  external JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__group__group_prepare_update_rank(
          String user_id, int rank, int admin_rank);

  external void wire__crate__api__group__group_reject_invite(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_reject_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String rejected_user_id,
      String? group_as_member);

  external void wire__crate__api__group__group_stop_group_invites(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_update_rank(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String user_id,
      int rank,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__user__init_user(NativePortType port_,
      String base_url, String auth_token, String jwt, String refresh_token);

  external void wire__crate__api__group__leave_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_as_member);

  external void wire__crate__api__user__login(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier,
      String password);

  external void wire__crate__api__user__mfa_login(
      NativePortType port_,
      String base_url,
      String auth_token,
      String master_key_encryption,
      String auth_key,
      String user_identifier,
      String token,
      bool recovery);

  external JSAny? /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire__crate__api__user__prepare_check_user_identifier_available(
          String user_identifier);

  external void wire__crate__api__user__prepare_register(
      NativePortType port_, String user_identifier, String password);

  external void wire__crate__api__user__prepare_register_device(
      NativePortType port_,
      String server_output,
      String user_keys,
      int key_count);

  external void wire__crate__api__user__prepare_register_device_start(
      NativePortType port_, String device_identifier, String password);

  external void wire__crate__api__user__refresh_jwt(NativePortType port_,
      String base_url, String auth_token, String jwt, String refresh_token);

  external void wire__crate__api__user__register(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier,
      String password);

  external void wire__crate__api__user__register_device(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String server_output,
      int key_count,
      String user_keys);

  external void wire__crate__api__user__register_device_start(
      NativePortType port_,
      String base_url,
      String auth_token,
      String device_identifier,
      String password);

  external void wire__crate__api__user__register_otp(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String issuer,
      String audience);

  external void wire__crate__api__user__register_raw_otp(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external void wire__crate__api__user__reset_otp(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String issuer,
      String audience);

  external void wire__crate__api__user__reset_password(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String new_password,
      String decrypted_private_key,
      String decrypted_sign_key);

  external void wire__crate__api__user__reset_raw_otp(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external void wire__crate__api__crypto__search(
      NativePortType port_, String key, String data);

  external void wire__crate__api__crypto__sortable_encrypt_number(
      NativePortType port_, String key, JSAny data);

  external void wire__crate__api__crypto__sortable_encrypt_raw_number(
      NativePortType port_, String key, JSAny data);

  external void wire__crate__api__crypto__sortable_encrypt_raw_string(
      NativePortType port_, String key, String data);

  external void wire__crate__api__crypto__sortable_encrypt_string(
      NativePortType port_, String key, String data);

  external void wire__crate__api__crypto__split_head_and_encrypted_data(
      NativePortType port_, JSAny data);

  external void wire__crate__api__crypto__split_head_and_encrypted_string(
      NativePortType port_, String data);

  external void wire__crate__api__user__update_user(NativePortType port_,
      String base_url, String auth_token, String jwt, String user_identifier);

  external void wire__crate__api__user__user_create_safety_number(
      NativePortType port_,
      String verify_key_1,
      String user_id_1,
      String? verify_key_2,
      String? user_id_2);

  external void wire__crate__api__user__user_device_key_session_upload(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String session_id,
      String user_public_key,
      String group_keys);

  external void wire__crate__api__user__user_fetch_public_key(
      NativePortType port_, String base_url, String auth_token, String user_id);

  external void wire__crate__api__user__user_fetch_verify_key(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_id,
      String verify_key_id);

  external void wire__crate__api__user__user_finish_key_rotation(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String server_output,
      String pre_group_key,
      String public_key,
      String private_key);

  external void wire__crate__api__user__user_get_done_key_rotation_server_input(
      NativePortType port_, String server_output);

  external void wire__crate__api__user__user_key_rotation(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String public_device_key,
      String pre_user_key);

  external void wire__crate__api__user__user_pre_done_key_rotation(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external void wire__crate__api__user__user_verify_user_public_key(
      NativePortType port_, String verify_key, String public_key);
}
