// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'api/group.dart';
import 'api/user.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw);

  @protected
  Claims dco_decode_claims(dynamic raw);

  @protected
  DeviceKeyData dco_decode_device_key_data(dynamic raw);

  @protected
  GeneratedRegisterData dco_decode_generated_register_data(dynamic raw);

  @protected
  GroupChildrenList dco_decode_group_children_list(dynamic raw);

  @protected
  GroupInviteReqList dco_decode_group_invite_req_list(dynamic raw);

  @protected
  GroupJoinReqList dco_decode_group_join_req_list(dynamic raw);

  @protected
  GroupOutDataLightExport dco_decode_group_out_data_light_export(dynamic raw);

  @protected
  GroupUserListItem dco_decode_group_user_list_item(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<GroupChildrenList> dco_decode_list_group_children_list(dynamic raw);

  @protected
  List<GroupInviteReqList> dco_decode_list_group_invite_req_list(dynamic raw);

  @protected
  List<GroupJoinReqList> dco_decode_list_group_join_req_list(dynamic raw);

  @protected
  List<GroupUserListItem> dco_decode_list_group_user_list_item(dynamic raw);

  @protected
  ListGroups dco_decode_list_groups(dynamic raw);

  @protected
  List<ListGroups> dco_decode_list_list_groups(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<UserDeviceList> dco_decode_list_user_device_list(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw);

  @protected
  OtpRecoveryKeysOutput dco_decode_otp_recovery_keys_output(dynamic raw);

  @protected
  OtpRegister dco_decode_otp_register(dynamic raw);

  @protected
  OtpRegisterUrl dco_decode_otp_register_url(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  UserDataExport dco_decode_user_data_export(dynamic raw);

  @protected
  UserDeviceList dco_decode_user_device_list(dynamic raw);

  @protected
  UserInitServerOutput dco_decode_user_init_server_output(dynamic raw);

  @protected
  UserLoginOut dco_decode_user_login_out(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  Claims sse_decode_claims(SseDeserializer deserializer);

  @protected
  DeviceKeyData sse_decode_device_key_data(SseDeserializer deserializer);

  @protected
  GeneratedRegisterData sse_decode_generated_register_data(
      SseDeserializer deserializer);

  @protected
  GroupChildrenList sse_decode_group_children_list(
      SseDeserializer deserializer);

  @protected
  GroupInviteReqList sse_decode_group_invite_req_list(
      SseDeserializer deserializer);

  @protected
  GroupJoinReqList sse_decode_group_join_req_list(SseDeserializer deserializer);

  @protected
  GroupOutDataLightExport sse_decode_group_out_data_light_export(
      SseDeserializer deserializer);

  @protected
  GroupUserListItem sse_decode_group_user_list_item(
      SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<GroupChildrenList> sse_decode_list_group_children_list(
      SseDeserializer deserializer);

  @protected
  List<GroupInviteReqList> sse_decode_list_group_invite_req_list(
      SseDeserializer deserializer);

  @protected
  List<GroupJoinReqList> sse_decode_list_group_join_req_list(
      SseDeserializer deserializer);

  @protected
  List<GroupUserListItem> sse_decode_list_group_user_list_item(
      SseDeserializer deserializer);

  @protected
  ListGroups sse_decode_list_groups(SseDeserializer deserializer);

  @protected
  List<ListGroups> sse_decode_list_list_groups(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<UserDeviceList> sse_decode_list_user_device_list(
      SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  OtpRecoveryKeysOutput sse_decode_otp_recovery_keys_output(
      SseDeserializer deserializer);

  @protected
  OtpRegister sse_decode_otp_register(SseDeserializer deserializer);

  @protected
  OtpRegisterUrl sse_decode_otp_register_url(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  UserDataExport sse_decode_user_data_export(SseDeserializer deserializer);

  @protected
  UserDeviceList sse_decode_user_device_list(SseDeserializer deserializer);

  @protected
  UserInitServerOutput sse_decode_user_init_server_output(
      SseDeserializer deserializer);

  @protected
  UserLoginOut sse_decode_user_login_out(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  bool cst_encode_box_autoadd_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bool(raw);
  }

  @protected
  int cst_encode_box_autoadd_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw);
  }

  @protected
  JSAny cst_encode_claims(Claims raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.aud),
      cst_encode_String(raw.sub),
      cst_encode_usize(raw.exp),
      cst_encode_usize(raw.iat),
      cst_encode_bool(raw.fresh)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_device_key_data(DeviceKeyData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.privateKey),
      cst_encode_String(raw.publicKey),
      cst_encode_String(raw.signKey),
      cst_encode_String(raw.verifyKey),
      cst_encode_String(raw.exportedPublicKey),
      cst_encode_String(raw.exportedVerifyKey)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_generated_register_data(GeneratedRegisterData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.identifier), cst_encode_String(raw.password)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_group_children_list(GroupChildrenList raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.groupId),
      cst_encode_String(raw.time),
      cst_encode_opt_String(raw.parent)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_invite_req_list(GroupInviteReqList raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.groupId), cst_encode_String(raw.time)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_group_join_req_list(GroupJoinReqList raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.userId),
      cst_encode_String(raw.time),
      cst_encode_i_32(raw.userType)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_out_data_light_export(GroupOutDataLightExport raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.groupId),
      cst_encode_opt_String(raw.parentGroupId),
      cst_encode_i_32(raw.rank),
      cst_encode_String(raw.createdTime),
      cst_encode_String(raw.joinedTime),
      cst_encode_opt_String(raw.accessByGroupAsMember),
      cst_encode_opt_String(raw.accessByParentGroup),
      cst_encode_bool(raw.isConnectedGroup)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_group_user_list_item(GroupUserListItem raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.userId),
      cst_encode_i_32(raw.rank),
      cst_encode_String(raw.joinedTime),
      cst_encode_i_32(raw.userType)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_list_String(List<String> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_String).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_children_list(List<GroupChildrenList> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_children_list).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_invite_req_list(List<GroupInviteReqList> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_invite_req_list).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_join_req_list(List<GroupJoinReqList> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_join_req_list).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_group_user_list_item(List<GroupUserListItem> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_group_user_list_item).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_groups(ListGroups raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.groupId),
      cst_encode_String(raw.time),
      cst_encode_String(raw.joinedTime),
      cst_encode_i_32(raw.rank),
      cst_encode_opt_String(raw.parent)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_list_list_groups(List<ListGroups> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_list_groups).toList().jsify()!;
  }

  @protected
  JSAny cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.jsify()!;
  }

  @protected
  JSAny cst_encode_list_user_device_list(List<UserDeviceList> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_user_device_list).toList().jsify()!;
  }

  @protected
  String? cst_encode_opt_String(String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_String(raw);
  }

  @protected
  bool? cst_encode_opt_box_autoadd_bool(bool? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_bool(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_i_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_i_32(raw);
  }

  @protected
  JSAny cst_encode_otp_recovery_keys_output(OtpRecoveryKeysOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_list_String(raw.keys)].jsify()!;
  }

  @protected
  JSAny cst_encode_otp_register(OtpRegister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.secret),
      cst_encode_String(raw.alg),
      cst_encode_list_String(raw.recover)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_otp_register_url(OtpRegisterUrl raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.url), cst_encode_list_String(raw.recover)]
        .jsify()!;
  }

  @protected
  JSAny cst_encode_user_data_export(UserDataExport raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.jwt),
      cst_encode_String(raw.userId),
      cst_encode_String(raw.deviceId),
      cst_encode_String(raw.refreshToken),
      cst_encode_device_key_data(raw.deviceKeys)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_user_device_list(UserDeviceList raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.deviceId),
      cst_encode_String(raw.time),
      cst_encode_String(raw.deviceIdentifier)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_user_init_server_output(UserInitServerOutput raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.jwt),
      cst_encode_list_group_invite_req_list(raw.invites)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_user_login_out(UserLoginOut raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_opt_String(raw.direct),
      cst_encode_opt_String(raw.masterKey),
      cst_encode_opt_String(raw.authKey)
    ].jsify()!;
  }

  @protected
  JSAny cst_encode_usize(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return castNativeBigInt(raw);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_claims(Claims self, SseSerializer serializer);

  @protected
  void sse_encode_device_key_data(DeviceKeyData self, SseSerializer serializer);

  @protected
  void sse_encode_generated_register_data(
      GeneratedRegisterData self, SseSerializer serializer);

  @protected
  void sse_encode_group_children_list(
      GroupChildrenList self, SseSerializer serializer);

  @protected
  void sse_encode_group_invite_req_list(
      GroupInviteReqList self, SseSerializer serializer);

  @protected
  void sse_encode_group_join_req_list(
      GroupJoinReqList self, SseSerializer serializer);

  @protected
  void sse_encode_group_out_data_light_export(
      GroupOutDataLightExport self, SseSerializer serializer);

  @protected
  void sse_encode_group_user_list_item(
      GroupUserListItem self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_children_list(
      List<GroupChildrenList> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_invite_req_list(
      List<GroupInviteReqList> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_join_req_list(
      List<GroupJoinReqList> self, SseSerializer serializer);

  @protected
  void sse_encode_list_group_user_list_item(
      List<GroupUserListItem> self, SseSerializer serializer);

  @protected
  void sse_encode_list_groups(ListGroups self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_groups(
      List<ListGroups> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_user_device_list(
      List<UserDeviceList> self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_otp_recovery_keys_output(
      OtpRecoveryKeysOutput self, SseSerializer serializer);

  @protected
  void sse_encode_otp_register(OtpRegister self, SseSerializer serializer);

  @protected
  void sse_encode_otp_register_url(
      OtpRegisterUrl self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_user_data_export(
      UserDataExport self, SseSerializer serializer);

  @protected
  void sse_encode_user_device_list(
      UserDeviceList self, SseSerializer serializer);

  @protected
  void sse_encode_user_init_server_output(
      UserInitServerOutput self, SseSerializer serializer);

  @protected
  void sse_encode_user_login_out(UserLoginOut self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void wire__crate__api__user__change_password(
          NativePortType port_,
          String base_url,
          String auth_token,
          String user_identifier,
          String old_password,
          String new_password,
          String? mfa_token,
          bool? mfa_recovery) =>
      wasmModule.wire__crate__api__user__change_password(
          port_,
          base_url,
          auth_token,
          user_identifier,
          old_password,
          new_password,
          mfa_token,
          mfa_recovery);

  void wire__crate__api__user__check_user_identifier_available(
          NativePortType port_,
          String base_url,
          String auth_token,
          String user_identifier) =>
      wasmModule.wire__crate__api__user__check_user_identifier_available(
          port_, base_url, auth_token, user_identifier);

  void wire__crate__api__user__decode_jwt(NativePortType port_, String jwt) =>
      wasmModule.wire__crate__api__user__decode_jwt(port_, jwt);

  void wire__crate__api__user__delete_device(
          NativePortType port_,
          String base_url,
          String auth_token,
          String fresh_jwt,
          String device_id) =>
      wasmModule.wire__crate__api__user__delete_device(
          port_, base_url, auth_token, fresh_jwt, device_id);

  void wire__crate__api__user__delete_user(NativePortType port_,
          String base_url, String auth_token, String fresh_jwt) =>
      wasmModule.wire__crate__api__user__delete_user(
          port_, base_url, auth_token, fresh_jwt);

  void wire__crate__api__user__disable_otp(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__disable_otp(
          port_, base_url, auth_token, jwt);

  void wire__crate__api__user__done_register(
          NativePortType port_, String server_output) =>
      wasmModule.wire__crate__api__user__done_register(port_, server_output);

  void wire__crate__api__user__done_register_device_start(
          NativePortType port_, String server_output) =>
      wasmModule.wire__crate__api__user__done_register_device_start(
          port_, server_output);

  void wire__crate__api__user__extract_user_data(
          NativePortType port_, String data) =>
      wasmModule.wire__crate__api__user__extract_user_data(port_, data);

  void wire__crate__api__user__generate_user_register_data(
          NativePortType port_) =>
      wasmModule.wire__crate__api__user__generate_user_register_data(port_);

  void wire__crate__api__user__get_fresh_jwt(
          NativePortType port_,
          String base_url,
          String auth_token,
          String user_identifier,
          String password,
          String? mfa_token,
          bool? mfa_recovery) =>
      wasmModule.wire__crate__api__user__get_fresh_jwt(port_, base_url,
          auth_token, user_identifier, password, mfa_token, mfa_recovery);

  void wire__crate__api__user__get_otp_recover_keys(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__get_otp_recover_keys(
          port_, base_url, auth_token, jwt);

  void wire__crate__api__user__get_user_devices(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String last_fetched_time,
          String last_fetched_id) =>
      wasmModule.wire__crate__api__user__get_user_devices(
          port_, base_url, auth_token, jwt, last_fetched_time, last_fetched_id);

  void wire__crate__api__group__group_accept_invite(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_accept_invite(
          port_, base_url, auth_token, jwt, id, group_id, group_as_member);

  void wire__crate__api__group__group_accept_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String user_id,
          int? rank,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_accept_join_req(port_, base_url,
          auth_token, jwt, id, user_id, rank, admin_rank, group_as_member);

  void wire__crate__api__group__group_create_child_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String parent_id,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_create_child_group(port_,
          base_url, auth_token, jwt, parent_id, admin_rank, group_as_member);

  void wire__crate__api__group__group_create_connected_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String connected_group_id,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_create_connected_group(
          port_,
          base_url,
          auth_token,
          jwt,
          connected_group_id,
          admin_rank,
          group_as_member);

  void wire__crate__api__group__group_create_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_create_group(
          port_, base_url, auth_token, jwt, group_as_member);

  void wire__crate__api__group__group_delete_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_delete_group(
          port_, base_url, auth_token, jwt, id, admin_rank, group_as_member);

  void wire__crate__api__group__group_delete_sent_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String join_req_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_delete_sent_join_req(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          admin_rank,
          join_req_group_id,
          group_as_member);

  void wire__crate__api__group__group_delete_sent_join_req_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String join_req_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_delete_sent_join_req_user(
          port_, base_url, auth_token, jwt, join_req_group_id, group_as_member);

  void wire__crate__api__group__group_extract_group_data(
          NativePortType port_, String server_output) =>
      wasmModule.wire__crate__api__group__group_extract_group_data(
          port_, server_output);

  void wire__crate__api__group__group_get_all_first_level_children(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_all_first_level_children(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          last_fetched_time,
          last_fetched_group_id,
          group_as_member);

  void wire__crate__api__group__group_get_group_data(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_group_data(
          port_, base_url, auth_token, jwt, id, group_as_member);

  void wire__crate__api__group__group_get_group_updates(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_group_updates(
          port_, base_url, auth_token, jwt, id, group_as_member);

  void wire__crate__api__group__group_get_groups_for_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_id) =>
      wasmModule.wire__crate__api__group__group_get_groups_for_user(
          port_,
          base_url,
          auth_token,
          jwt,
          last_fetched_time,
          last_fetched_group_id,
          group_id);

  void wire__crate__api__group__group_get_invites_for_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_invites_for_user(
          port_,
          base_url,
          auth_token,
          jwt,
          last_fetched_time,
          last_fetched_group_id,
          group_id,
          group_as_member);

  void wire__crate__api__group__group_get_join_reqs(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String last_fetched_time,
          String last_fetched_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_join_reqs(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          admin_rank,
          last_fetched_time,
          last_fetched_id,
          group_as_member);

  void wire__crate__api__group__group_get_member(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String last_fetched_time,
          String last_fetched_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_member(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          last_fetched_time,
          last_fetched_id,
          group_as_member);

  void wire__crate__api__group__group_get_sent_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_sent_join_req(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          admin_rank,
          last_fetched_time,
          last_fetched_group_id,
          group_as_member);

  void wire__crate__api__group__group_get_sent_join_req_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String last_fetched_time,
          String last_fetched_group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_get_sent_join_req_user(
          port_,
          base_url,
          auth_token,
          jwt,
          last_fetched_time,
          last_fetched_group_id,
          group_as_member);

  void wire__crate__api__group__group_invite_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String user_id,
          int? rank,
          int admin_rank,
          bool auto_invite,
          bool group_invite,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_invite_user(
          port_,
          base_url,
          auth_token,
          jwt,
          id,
          user_id,
          rank,
          admin_rank,
          auto_invite,
          group_invite,
          group_as_member);

  void wire__crate__api__group__group_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_join_req(
          port_, base_url, auth_token, jwt, id, group_id, group_as_member);

  void wire__crate__api__group__group_kick_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String user_id,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_kick_user(port_, base_url,
          auth_token, jwt, id, user_id, admin_rank, group_as_member);

  void wire__crate__api__group__group_prepare_update_rank(
          NativePortType port_, String user_id, int rank, int admin_rank) =>
      wasmModule.wire__crate__api__group__group_prepare_update_rank(
          port_, user_id, rank, admin_rank);

  void wire__crate__api__group__group_reject_invite(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_reject_invite(
          port_, base_url, auth_token, jwt, id, group_id, group_as_member);

  void wire__crate__api__group__group_reject_join_req(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String rejected_user_id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_reject_join_req(port_, base_url,
          auth_token, jwt, id, admin_rank, rejected_user_id, group_as_member);

  void wire__crate__api__group__group_stop_group_invites(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_stop_group_invites(
          port_, base_url, auth_token, jwt, id, admin_rank, group_as_member);

  void wire__crate__api__group__group_update_rank(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String user_id,
          int rank,
          int admin_rank,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__group_update_rank(port_, base_url,
          auth_token, jwt, id, user_id, rank, admin_rank, group_as_member);

  void wire__crate__api__user__init_user(NativePortType port_, String base_url,
          String auth_token, String jwt, String refresh_token) =>
      wasmModule.wire__crate__api__user__init_user(
          port_, base_url, auth_token, jwt, refresh_token);

  void wire__crate__api__group__leave_group(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String id,
          String? group_as_member) =>
      wasmModule.wire__crate__api__group__leave_group(
          port_, base_url, auth_token, jwt, id, group_as_member);

  void wire__crate__api__user__login(NativePortType port_, String base_url,
          String auth_token, String user_identifier, String password) =>
      wasmModule.wire__crate__api__user__login(
          port_, base_url, auth_token, user_identifier, password);

  void wire__crate__api__user__mfa_login(
          NativePortType port_,
          String base_url,
          String auth_token,
          String master_key_encryption,
          String auth_key,
          String user_identifier,
          String token,
          bool recovery) =>
      wasmModule.wire__crate__api__user__mfa_login(port_, base_url, auth_token,
          master_key_encryption, auth_key, user_identifier, token, recovery);

  void wire__crate__api__user__prepare_register(
          NativePortType port_, String user_identifier, String password) =>
      wasmModule.wire__crate__api__user__prepare_register(
          port_, user_identifier, password);

  void wire__crate__api__user__refresh_jwt(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String refresh_token) =>
      wasmModule.wire__crate__api__user__refresh_jwt(
          port_, base_url, auth_token, jwt, refresh_token);

  void wire__crate__api__user__register(NativePortType port_, String base_url,
          String auth_token, String user_identifier, String password) =>
      wasmModule.wire__crate__api__user__register(
          port_, base_url, auth_token, user_identifier, password);

  void wire__crate__api__user__register_device(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String server_output) =>
      wasmModule.wire__crate__api__user__register_device(
          port_, base_url, auth_token, jwt, server_output);

  void wire__crate__api__user__register_device_start(
          NativePortType port_,
          String base_url,
          String auth_token,
          String device_identifier,
          String password) =>
      wasmModule.wire__crate__api__user__register_device_start(
          port_, base_url, auth_token, device_identifier, password);

  void wire__crate__api__user__register_otp(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String issuer,
          String audience) =>
      wasmModule.wire__crate__api__user__register_otp(
          port_, base_url, auth_token, jwt, issuer, audience);

  void wire__crate__api__user__register_raw_otp(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__register_raw_otp(
          port_, base_url, auth_token, jwt);

  void wire__crate__api__user__reset_otp(NativePortType port_, String base_url,
          String auth_token, String jwt, String issuer, String audience) =>
      wasmModule.wire__crate__api__user__reset_otp(
          port_, base_url, auth_token, jwt, issuer, audience);

  void wire__crate__api__user__reset_raw_otp(NativePortType port_,
          String base_url, String auth_token, String jwt) =>
      wasmModule.wire__crate__api__user__reset_raw_otp(
          port_, base_url, auth_token, jwt);

  void wire__crate__api__user__update_user(
          NativePortType port_,
          String base_url,
          String auth_token,
          String jwt,
          String user_identifier) =>
      wasmModule.wire__crate__api__user__update_user(
          port_, base_url, auth_token, jwt, user_identifier);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
extension type RustLibWasmModule._(JSObject _) implements JSObject {
  external void wire__crate__api__user__change_password(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier,
      String old_password,
      String new_password,
      String? mfa_token,
      bool? mfa_recovery);

  external void wire__crate__api__user__check_user_identifier_available(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier);

  external void wire__crate__api__user__decode_jwt(
      NativePortType port_, String jwt);

  external void wire__crate__api__user__delete_device(NativePortType port_,
      String base_url, String auth_token, String fresh_jwt, String device_id);

  external void wire__crate__api__user__delete_user(NativePortType port_,
      String base_url, String auth_token, String fresh_jwt);

  external void wire__crate__api__user__disable_otp(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external void wire__crate__api__user__done_register(
      NativePortType port_, String server_output);

  external void wire__crate__api__user__done_register_device_start(
      NativePortType port_, String server_output);

  external void wire__crate__api__user__extract_user_data(
      NativePortType port_, String data);

  external void wire__crate__api__user__generate_user_register_data(
      NativePortType port_);

  external void wire__crate__api__user__get_fresh_jwt(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier,
      String password,
      String? mfa_token,
      bool? mfa_recovery);

  external void wire__crate__api__user__get_otp_recover_keys(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external void wire__crate__api__user__get_user_devices(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String last_fetched_time,
      String last_fetched_id);

  external void wire__crate__api__group__group_accept_invite(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_accept_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String user_id,
      int? rank,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_create_child_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String parent_id,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_create_connected_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String connected_group_id,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_create_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String? group_as_member);

  external void wire__crate__api__group__group_delete_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_delete_sent_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String join_req_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_delete_sent_join_req_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String join_req_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_extract_group_data(
      NativePortType port_, String server_output);

  external void wire__crate__api__group__group_get_all_first_level_children(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_group_data(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_group_updates(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_groups_for_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_id);

  external void wire__crate__api__group__group_get_invites_for_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_join_reqs(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String last_fetched_time,
      String last_fetched_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_member(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String last_fetched_time,
      String last_fetched_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_sent_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_get_sent_join_req_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String last_fetched_time,
      String last_fetched_group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_invite_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String user_id,
      int? rank,
      int admin_rank,
      bool auto_invite,
      bool group_invite,
      String? group_as_member);

  external void wire__crate__api__group__group_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_kick_user(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String user_id,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_prepare_update_rank(
      NativePortType port_, String user_id, int rank, int admin_rank);

  external void wire__crate__api__group__group_reject_invite(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_id,
      String? group_as_member);

  external void wire__crate__api__group__group_reject_join_req(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String rejected_user_id,
      String? group_as_member);

  external void wire__crate__api__group__group_stop_group_invites(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__group__group_update_rank(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String user_id,
      int rank,
      int admin_rank,
      String? group_as_member);

  external void wire__crate__api__user__init_user(NativePortType port_,
      String base_url, String auth_token, String jwt, String refresh_token);

  external void wire__crate__api__group__leave_group(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String id,
      String? group_as_member);

  external void wire__crate__api__user__login(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier,
      String password);

  external void wire__crate__api__user__mfa_login(
      NativePortType port_,
      String base_url,
      String auth_token,
      String master_key_encryption,
      String auth_key,
      String user_identifier,
      String token,
      bool recovery);

  external void wire__crate__api__user__prepare_register(
      NativePortType port_, String user_identifier, String password);

  external void wire__crate__api__user__refresh_jwt(NativePortType port_,
      String base_url, String auth_token, String jwt, String refresh_token);

  external void wire__crate__api__user__register(
      NativePortType port_,
      String base_url,
      String auth_token,
      String user_identifier,
      String password);

  external void wire__crate__api__user__register_device(NativePortType port_,
      String base_url, String auth_token, String jwt, String server_output);

  external void wire__crate__api__user__register_device_start(
      NativePortType port_,
      String base_url,
      String auth_token,
      String device_identifier,
      String password);

  external void wire__crate__api__user__register_otp(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String issuer,
      String audience);

  external void wire__crate__api__user__register_raw_otp(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external void wire__crate__api__user__reset_otp(
      NativePortType port_,
      String base_url,
      String auth_token,
      String jwt,
      String issuer,
      String audience);

  external void wire__crate__api__user__reset_raw_otp(
      NativePortType port_, String base_url, String auth_token, String jwt);

  external void wire__crate__api__user__update_user(NativePortType port_,
      String base_url, String auth_token, String jwt, String user_identifier);
}
