// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class SentcFlutterRustLight {
  Future<Claims> decodeJwt({required String jwt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeJwtConstMeta;

  ///
  ///# Check if the identifier is available for this app
  ///
  Future<bool> checkUserIdentifierAvailable(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCheckUserIdentifierAvailableConstMeta;

  ///
  ///Generates identifier and password for a user or device
  ///
  Future<GeneratedRegisterData> generateUserRegisterData({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateUserRegisterDataConstMeta;

  ///
  ///# Get the user input from the user client
  ///
  ///This is used when the register endpoint should only be called from the backend and not the clients.
  ///
  ///For full register see register()
  ///
  Future<String> prepareRegister(
      {required String userIdentifier, required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterConstMeta;

  ///
  ///# Validates the response of register
  ///
  ///Returns the new user id
  ///
  Future<String> doneRegister({required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneRegisterConstMeta;

  ///
  ///# Register a new user for the app
  ///
  ///Do the full req incl. req.
  ///No checking about spamming and just return the user id.
  ///
  Future<String> register(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterConstMeta;

  Future<String> registerDeviceStart(
      {required String baseUrl,
      required String authToken,
      required String deviceIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceStartConstMeta;

  Future<void> doneRegisterDeviceStart(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDoneRegisterDeviceStartConstMeta;

  Future<void> registerDevice(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String serverOutput,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceConstMeta;

  ///
  ///# Login the user to this app
  ///
  ///Does the login requests. 1. for auth, 2nd to get the keys.
  ///
  ///If there are more data in the backend, then it is possible to call it via the jwt what is returned by the done login request.
  ///
  ///The other backend can validate the jwt
  ///
  Future<UserLoginOut> login(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta;

  Future<UserDataExport> mfaLogin(
      {required String baseUrl,
      required String authToken,
      required String masterKeyEncryption,
      required String authKey,
      required String userIdentifier,
      required String token,
      required bool recovery,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMfaLoginConstMeta;

  Future<String> getFreshJwt(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      String? mfaToken,
      bool? mfaRecovery,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFreshJwtConstMeta;

  Future<String> refreshJwt(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String refreshToken,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRefreshJwtConstMeta;

  Future<UserInitServerOutput> initUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String refreshToken,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitUserConstMeta;

  Future<List<UserDeviceList>> getUserDevices(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUserDevicesConstMeta;

  Future<void> changePassword(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String oldPassword,
      required String newPassword,
      String? mfaToken,
      bool? mfaRecovery,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangePasswordConstMeta;

  Future<void> deleteUser(
      {required String baseUrl,
      required String authToken,
      required String freshJwt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteUserConstMeta;

  Future<void> deleteDevice(
      {required String baseUrl,
      required String authToken,
      required String freshJwt,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteDeviceConstMeta;

  Future<void> updateUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String userIdentifier,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateUserConstMeta;

  Future<OtpRegister> registerRawOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterRawOtpConstMeta;

  Future<OtpRegisterUrl> registerOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String issuer,
      required String audience,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterOtpConstMeta;

  Future<OtpRecoveryKeysOutput> getOtpRecoverKeys(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetOtpRecoverKeysConstMeta;

  Future<OtpRegister> resetRawOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetRawOtpConstMeta;

  Future<OtpRegisterUrl> resetOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String issuer,
      required String audience,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetOtpConstMeta;

  Future<void> disableOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisableOtpConstMeta;

  ///
  ///Create a group with request.
  ///
  ///Only the default values are send to the server, no extra data. If extra data is required, use prepare_create
  ///
  Future<String> groupCreateGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupCreateGroupConstMeta;

  Future<String> groupCreateChildGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String parentId,
      required int adminRank,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupCreateChildGroupConstMeta;

  Future<String> groupCreateConnectedGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String connectedGroupId,
      required int adminRank,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupCreateConnectedGroupConstMeta;

  ///
  ///Get the group data without request.
  ///
  ///Use the parent group private key when fetching child group data.
  ///
  Future<GroupOutDataLightExport> groupExtractGroupData(
      {required String serverOutput, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupExtractGroupDataConstMeta;

  Future<GroupOutDataLightExport> groupGetGroupData(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupDataConstMeta;

  Future<List<GroupUserListItem>> groupGetMember(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String lastFetchedTime,
      required String lastFetchedId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetMemberConstMeta;

  Future<int> groupGetGroupUpdates(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupUpdatesConstMeta;

  Future<List<GroupChildrenList>> groupGetAllFirstLevelChildren(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetAllFirstLevelChildrenConstMeta;

  Future<List<ListGroups>> groupGetGroupsForUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupsForUserConstMeta;

  Future<void> groupInviteUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      int? rank,
      required int adminRank,
      required bool autoInvite,
      required bool groupInvite,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupInviteUserConstMeta;

  Future<List<GroupInviteReqList>> groupGetInvitesForUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetInvitesForUserConstMeta;

  Future<void> groupAcceptInvite(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupAcceptInviteConstMeta;

  Future<void> groupRejectInvite(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupRejectInviteConstMeta;

  Future<List<GroupInviteReqList>> groupGetSentJoinReqUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetSentJoinReqUserConstMeta;

  Future<List<GroupInviteReqList>> groupGetSentJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetSentJoinReqConstMeta;

  Future<void> groupDeleteSentJoinReqUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String joinReqGroupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupDeleteSentJoinReqUserConstMeta;

  Future<void> groupDeleteSentJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String joinReqGroupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupDeleteSentJoinReqConstMeta;

  Future<void> groupJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupJoinReqConstMeta;

  Future<List<GroupJoinReqList>> groupGetJoinReqs(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String lastFetchedTime,
      required String lastFetchedId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupGetJoinReqsConstMeta;

  Future<void> groupRejectJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String rejectedUserId,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupRejectJoinReqConstMeta;

  Future<void> groupAcceptJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      int? rank,
      required int adminRank,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupAcceptJoinReqConstMeta;

  Future<void> groupStopGroupInvites(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupStopGroupInvitesConstMeta;

  Future<void> leaveGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLeaveGroupConstMeta;

  Future<String> groupPrepareUpdateRank(
      {required String userId,
      required int rank,
      required int adminRank,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupPrepareUpdateRankConstMeta;

  Future<void> groupUpdateRank(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      required int rank,
      required int adminRank,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupUpdateRankConstMeta;

  Future<void> groupKickUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      required int adminRank,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupKickUserConstMeta;

  Future<void> groupDeleteGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      String? groupAsMember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupDeleteGroupConstMeta;
}

class Claims {
  final String aud;
  final String sub;
  final int exp;
  final int iat;
  final bool fresh;

  const Claims({
    required this.aud,
    required this.sub,
    required this.exp,
    required this.iat,
    required this.fresh,
  });
}

class DeviceKeyData {
  final String privateKey;
  final String publicKey;
  final String signKey;
  final String verifyKey;
  final String exportedPublicKey;
  final String exportedVerifyKey;

  const DeviceKeyData({
    required this.privateKey,
    required this.publicKey,
    required this.signKey,
    required this.verifyKey,
    required this.exportedPublicKey,
    required this.exportedVerifyKey,
  });
}

class GeneratedRegisterData {
  final String identifier;
  final String password;

  const GeneratedRegisterData({
    required this.identifier,
    required this.password,
  });
}

class GroupChildrenList {
  final String groupId;
  final String time;
  final String? parent;

  const GroupChildrenList({
    required this.groupId,
    required this.time,
    this.parent,
  });
}

class GroupInviteReqList {
  final String groupId;
  final String time;

  const GroupInviteReqList({
    required this.groupId,
    required this.time,
  });
}

class GroupJoinReqList {
  final String userId;
  final String time;
  final int userType;

  const GroupJoinReqList({
    required this.userId,
    required this.time,
    required this.userType,
  });
}

class GroupOutDataLightExport {
  final String groupId;
  final String? parentGroupId;
  final int rank;
  final String createdTime;
  final String joinedTime;
  final String? accessByGroupAsMember;
  final String? accessByParentGroup;
  final bool isConnectedGroup;

  const GroupOutDataLightExport({
    required this.groupId,
    this.parentGroupId,
    required this.rank,
    required this.createdTime,
    required this.joinedTime,
    this.accessByGroupAsMember,
    this.accessByParentGroup,
    required this.isConnectedGroup,
  });
}

class GroupUserListItem {
  final String userId;
  final int rank;
  final String joinedTime;
  final int userType;

  const GroupUserListItem({
    required this.userId,
    required this.rank,
    required this.joinedTime,
    required this.userType,
  });
}

class ListGroups {
  final String groupId;
  final String time;
  final String joinedTime;
  final int rank;
  final String? parent;

  const ListGroups({
    required this.groupId,
    required this.time,
    required this.joinedTime,
    required this.rank,
    this.parent,
  });
}

class OtpRecoveryKeysOutput {
  final List<String> keys;

  const OtpRecoveryKeysOutput({
    required this.keys,
  });
}

class OtpRegister {
  final String secret;
  final String alg;
  final List<String> recover;

  const OtpRegister({
    required this.secret,
    required this.alg,
    required this.recover,
  });
}

class OtpRegisterUrl {
  final String url;
  final List<String> recover;

  const OtpRegisterUrl({
    required this.url,
    required this.recover,
  });
}

class PrepareLoginOtpOutput {
  final String masterKey;
  final String authKey;

  const PrepareLoginOtpOutput({
    required this.masterKey,
    required this.authKey,
  });
}

class UserDataExport {
  final String jwt;
  final String userId;
  final String deviceId;
  final String refreshToken;
  final DeviceKeyData deviceKeys;

  const UserDataExport({
    required this.jwt,
    required this.userId,
    required this.deviceId,
    required this.refreshToken,
    required this.deviceKeys,
  });
}

class UserDeviceList {
  final String deviceId;
  final String time;
  final String deviceIdentifier;

  const UserDeviceList({
    required this.deviceId,
    required this.time,
    required this.deviceIdentifier,
  });
}

class UserInitServerOutput {
  final String jwt;
  final List<GroupInviteReqList> invites;

  const UserInitServerOutput({
    required this.jwt,
    required this.invites,
  });
}

class UserLoginOut {
  final UserDataExport? userData;
  final PrepareLoginOtpOutput? mfa;

  const UserLoginOut({
    this.userData,
    this.mfa,
  });
}

class SentcFlutterRustLightImpl implements SentcFlutterRustLight {
  final SentcFlutterRustLightPlatform _platform;
  factory SentcFlutterRustLightImpl(ExternalLibrary dylib) =>
      SentcFlutterRustLightImpl.raw(SentcFlutterRustLightPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory SentcFlutterRustLightImpl.wasm(FutureOr<WasmModule> module) =>
      SentcFlutterRustLightImpl(module as ExternalLibrary);
  SentcFlutterRustLightImpl.raw(this._platform);
  Future<Claims> decodeJwt({required String jwt, dynamic hint}) {
    var arg0 = _platform.api2wire_String(jwt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_decode_jwt(port_, arg0),
      parseSuccessData: _wire2api_claims,
      constMeta: kDecodeJwtConstMeta,
      argValues: [jwt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeJwtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_jwt",
        argNames: ["jwt"],
      );

  Future<bool> checkUserIdentifierAvailable(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(userIdentifier);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_check_user_identifier_available(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kCheckUserIdentifierAvailableConstMeta,
      argValues: [baseUrl, authToken, userIdentifier],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCheckUserIdentifierAvailableConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "check_user_identifier_available",
        argNames: ["baseUrl", "authToken", "userIdentifier"],
      );

  Future<GeneratedRegisterData> generateUserRegisterData({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_generate_user_register_data(port_),
      parseSuccessData: _wire2api_generated_register_data,
      constMeta: kGenerateUserRegisterDataConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateUserRegisterDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_user_register_data",
        argNames: [],
      );

  Future<String> prepareRegister(
      {required String userIdentifier,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(userIdentifier);
    var arg1 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_prepare_register(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kPrepareRegisterConstMeta,
      argValues: [userIdentifier, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_register",
        argNames: ["userIdentifier", "password"],
      );

  Future<String> doneRegister({required String serverOutput, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serverOutput);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_done_register(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDoneRegisterConstMeta,
      argValues: [serverOutput],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDoneRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_register",
        argNames: ["serverOutput"],
      );

  Future<String> register(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(userIdentifier);
    var arg3 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_register(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kRegisterConstMeta,
      argValues: [baseUrl, authToken, userIdentifier, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register",
        argNames: ["baseUrl", "authToken", "userIdentifier", "password"],
      );

  Future<String> registerDeviceStart(
      {required String baseUrl,
      required String authToken,
      required String deviceIdentifier,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(deviceIdentifier);
    var arg3 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_register_device_start(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kRegisterDeviceStartConstMeta,
      argValues: [baseUrl, authToken, deviceIdentifier, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_device_start",
        argNames: ["baseUrl", "authToken", "deviceIdentifier", "password"],
      );

  Future<void> doneRegisterDeviceStart(
      {required String serverOutput, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serverOutput);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_done_register_device_start(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kDoneRegisterDeviceStartConstMeta,
      argValues: [serverOutput],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDoneRegisterDeviceStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "done_register_device_start",
        argNames: ["serverOutput"],
      );

  Future<void> registerDevice(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String serverOutput,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(serverOutput);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_register_device(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kRegisterDeviceConstMeta,
      argValues: [baseUrl, authToken, jwt, serverOutput],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_device",
        argNames: ["baseUrl", "authToken", "jwt", "serverOutput"],
      );

  Future<UserLoginOut> login(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(userIdentifier);
    var arg3 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_login(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_user_login_out,
      constMeta: kLoginConstMeta,
      argValues: [baseUrl, authToken, userIdentifier, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "login",
        argNames: ["baseUrl", "authToken", "userIdentifier", "password"],
      );

  Future<UserDataExport> mfaLogin(
      {required String baseUrl,
      required String authToken,
      required String masterKeyEncryption,
      required String authKey,
      required String userIdentifier,
      required String token,
      required bool recovery,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(masterKeyEncryption);
    var arg3 = _platform.api2wire_String(authKey);
    var arg4 = _platform.api2wire_String(userIdentifier);
    var arg5 = _platform.api2wire_String(token);
    var arg6 = recovery;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mfa_login(port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_user_data_export,
      constMeta: kMfaLoginConstMeta,
      argValues: [
        baseUrl,
        authToken,
        masterKeyEncryption,
        authKey,
        userIdentifier,
        token,
        recovery
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMfaLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mfa_login",
        argNames: [
          "baseUrl",
          "authToken",
          "masterKeyEncryption",
          "authKey",
          "userIdentifier",
          "token",
          "recovery"
        ],
      );

  Future<String> getFreshJwt(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String password,
      String? mfaToken,
      bool? mfaRecovery,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(userIdentifier);
    var arg3 = _platform.api2wire_String(password);
    var arg4 = _platform.api2wire_opt_String(mfaToken);
    var arg5 = _platform.api2wire_opt_box_autoadd_bool(mfaRecovery);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_fresh_jwt(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      constMeta: kGetFreshJwtConstMeta,
      argValues: [
        baseUrl,
        authToken,
        userIdentifier,
        password,
        mfaToken,
        mfaRecovery
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetFreshJwtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_fresh_jwt",
        argNames: [
          "baseUrl",
          "authToken",
          "userIdentifier",
          "password",
          "mfaToken",
          "mfaRecovery"
        ],
      );

  Future<String> refreshJwt(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String refreshToken,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(refreshToken);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_refresh_jwt(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kRefreshJwtConstMeta,
      argValues: [baseUrl, authToken, jwt, refreshToken],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRefreshJwtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "refresh_jwt",
        argNames: ["baseUrl", "authToken", "jwt", "refreshToken"],
      );

  Future<UserInitServerOutput> initUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String refreshToken,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(refreshToken);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_init_user(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_user_init_server_output,
      constMeta: kInitUserConstMeta,
      argValues: [baseUrl, authToken, jwt, refreshToken],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_user",
        argNames: ["baseUrl", "authToken", "jwt", "refreshToken"],
      );

  Future<List<UserDeviceList>> getUserDevices(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(lastFetchedTime);
    var arg4 = _platform.api2wire_String(lastFetchedId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_user_devices(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_list_user_device_list,
      constMeta: kGetUserDevicesConstMeta,
      argValues: [baseUrl, authToken, jwt, lastFetchedTime, lastFetchedId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetUserDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_user_devices",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedId"
        ],
      );

  Future<void> changePassword(
      {required String baseUrl,
      required String authToken,
      required String userIdentifier,
      required String oldPassword,
      required String newPassword,
      String? mfaToken,
      bool? mfaRecovery,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(userIdentifier);
    var arg3 = _platform.api2wire_String(oldPassword);
    var arg4 = _platform.api2wire_String(newPassword);
    var arg5 = _platform.api2wire_opt_String(mfaToken);
    var arg6 = _platform.api2wire_opt_box_autoadd_bool(mfaRecovery);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_change_password(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_unit,
      constMeta: kChangePasswordConstMeta,
      argValues: [
        baseUrl,
        authToken,
        userIdentifier,
        oldPassword,
        newPassword,
        mfaToken,
        mfaRecovery
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kChangePasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_password",
        argNames: [
          "baseUrl",
          "authToken",
          "userIdentifier",
          "oldPassword",
          "newPassword",
          "mfaToken",
          "mfaRecovery"
        ],
      );

  Future<void> deleteUser(
      {required String baseUrl,
      required String authToken,
      required String freshJwt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(freshJwt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_delete_user(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kDeleteUserConstMeta,
      argValues: [baseUrl, authToken, freshJwt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_user",
        argNames: ["baseUrl", "authToken", "freshJwt"],
      );

  Future<void> deleteDevice(
      {required String baseUrl,
      required String authToken,
      required String freshJwt,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(freshJwt);
    var arg3 = _platform.api2wire_String(deviceId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_delete_device(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kDeleteDeviceConstMeta,
      argValues: [baseUrl, authToken, freshJwt, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_device",
        argNames: ["baseUrl", "authToken", "freshJwt", "deviceId"],
      );

  Future<void> updateUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String userIdentifier,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(userIdentifier);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_update_user(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateUserConstMeta,
      argValues: [baseUrl, authToken, jwt, userIdentifier],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_user",
        argNames: ["baseUrl", "authToken", "jwt", "userIdentifier"],
      );

  Future<OtpRegister> registerRawOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_register_raw_otp(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_otp_register,
      constMeta: kRegisterRawOtpConstMeta,
      argValues: [baseUrl, authToken, jwt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterRawOtpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_raw_otp",
        argNames: ["baseUrl", "authToken", "jwt"],
      );

  Future<OtpRegisterUrl> registerOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String issuer,
      required String audience,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(issuer);
    var arg4 = _platform.api2wire_String(audience);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_register_otp(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_otp_register_url,
      constMeta: kRegisterOtpConstMeta,
      argValues: [baseUrl, authToken, jwt, issuer, audience],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterOtpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_otp",
        argNames: ["baseUrl", "authToken", "jwt", "issuer", "audience"],
      );

  Future<OtpRecoveryKeysOutput> getOtpRecoverKeys(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_otp_recover_keys(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_otp_recovery_keys_output,
      constMeta: kGetOtpRecoverKeysConstMeta,
      argValues: [baseUrl, authToken, jwt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetOtpRecoverKeysConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_otp_recover_keys",
        argNames: ["baseUrl", "authToken", "jwt"],
      );

  Future<OtpRegister> resetRawOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_reset_raw_otp(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_otp_register,
      constMeta: kResetRawOtpConstMeta,
      argValues: [baseUrl, authToken, jwt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResetRawOtpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_raw_otp",
        argNames: ["baseUrl", "authToken", "jwt"],
      );

  Future<OtpRegisterUrl> resetOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String issuer,
      required String audience,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(issuer);
    var arg4 = _platform.api2wire_String(audience);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_reset_otp(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_otp_register_url,
      constMeta: kResetOtpConstMeta,
      argValues: [baseUrl, authToken, jwt, issuer, audience],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResetOtpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_otp",
        argNames: ["baseUrl", "authToken", "jwt", "issuer", "audience"],
      );

  Future<void> disableOtp(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disable_otp(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisableOtpConstMeta,
      argValues: [baseUrl, authToken, jwt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisableOtpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disable_otp",
        argNames: ["baseUrl", "authToken", "jwt"],
      );

  Future<String> groupCreateGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_create_group(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kGroupCreateGroupConstMeta,
      argValues: [baseUrl, authToken, jwt, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupCreateGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_create_group",
        argNames: ["baseUrl", "authToken", "jwt", "groupAsMember"],
      );

  Future<String> groupCreateChildGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String parentId,
      required int adminRank,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(parentId);
    var arg4 = api2wire_i32(adminRank);
    var arg5 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_create_child_group(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      constMeta: kGroupCreateChildGroupConstMeta,
      argValues: [baseUrl, authToken, jwt, parentId, adminRank, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupCreateChildGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_create_child_group",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "parentId",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<String> groupCreateConnectedGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String connectedGroupId,
      required int adminRank,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(connectedGroupId);
    var arg4 = api2wire_i32(adminRank);
    var arg5 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_create_connected_group(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      constMeta: kGroupCreateConnectedGroupConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        connectedGroupId,
        adminRank,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupCreateConnectedGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_create_connected_group",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "connectedGroupId",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<GroupOutDataLightExport> groupExtractGroupData(
      {required String serverOutput, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serverOutput);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_group_extract_group_data(port_, arg0),
      parseSuccessData: _wire2api_group_out_data_light_export,
      constMeta: kGroupExtractGroupDataConstMeta,
      argValues: [serverOutput],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupExtractGroupDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_extract_group_data",
        argNames: ["serverOutput"],
      );

  Future<GroupOutDataLightExport> groupGetGroupData(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_get_group_data(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_group_out_data_light_export,
      constMeta: kGroupGetGroupDataConstMeta,
      argValues: [baseUrl, authToken, jwt, id, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_group_data",
        argNames: ["baseUrl", "authToken", "jwt", "id", "groupAsMember"],
      );

  Future<List<GroupUserListItem>> groupGetMember(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String lastFetchedTime,
      required String lastFetchedId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_String(lastFetchedTime);
    var arg5 = _platform.api2wire_String(lastFetchedId);
    var arg6 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_get_member(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_list_group_user_list_item,
      constMeta: kGroupGetMemberConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        lastFetchedTime,
        lastFetchedId,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetMemberConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_member",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "lastFetchedTime",
          "lastFetchedId",
          "groupAsMember"
        ],
      );

  Future<int> groupGetGroupUpdates(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_get_group_updates(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_i32,
      constMeta: kGroupGetGroupUpdatesConstMeta,
      argValues: [baseUrl, authToken, jwt, id, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupUpdatesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_group_updates",
        argNames: ["baseUrl", "authToken", "jwt", "id", "groupAsMember"],
      );

  Future<List<GroupChildrenList>> groupGetAllFirstLevelChildren(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_String(lastFetchedTime);
    var arg5 = _platform.api2wire_String(lastFetchedGroupId);
    var arg6 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_get_all_first_level_children(
              port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_list_group_children_list,
      constMeta: kGroupGetAllFirstLevelChildrenConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        lastFetchedTime,
        lastFetchedGroupId,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetAllFirstLevelChildrenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_all_first_level_children",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "lastFetchedTime",
          "lastFetchedGroupId",
          "groupAsMember"
        ],
      );

  Future<List<ListGroups>> groupGetGroupsForUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(lastFetchedTime);
    var arg4 = _platform.api2wire_String(lastFetchedGroupId);
    var arg5 = _platform.api2wire_opt_String(groupId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_get_groups_for_user(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_list_list_groups,
      constMeta: kGroupGetGroupsForUserConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        lastFetchedTime,
        lastFetchedGroupId,
        groupId
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetGroupsForUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_groups_for_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedGroupId",
          "groupId"
        ],
      );

  Future<void> groupInviteUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      int? rank,
      required int adminRank,
      required bool autoInvite,
      required bool groupInvite,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_String(userId);
    var arg5 = _platform.api2wire_opt_box_autoadd_i32(rank);
    var arg6 = api2wire_i32(adminRank);
    var arg7 = autoInvite;
    var arg8 = groupInvite;
    var arg9 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_invite_user(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupInviteUserConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        userId,
        rank,
        adminRank,
        autoInvite,
        groupInvite,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupInviteUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_invite_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "userId",
          "rank",
          "adminRank",
          "autoInvite",
          "groupInvite",
          "groupAsMember"
        ],
      );

  Future<List<GroupInviteReqList>> groupGetInvitesForUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(lastFetchedTime);
    var arg4 = _platform.api2wire_String(lastFetchedGroupId);
    var arg5 = _platform.api2wire_opt_String(groupId);
    var arg6 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_get_invites_for_user(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_list_group_invite_req_list,
      constMeta: kGroupGetInvitesForUserConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        lastFetchedTime,
        lastFetchedGroupId,
        groupId,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetInvitesForUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_invites_for_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedGroupId",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<void> groupAcceptInvite(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_opt_String(groupId);
    var arg5 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_accept_invite(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupAcceptInviteConstMeta,
      argValues: [baseUrl, authToken, jwt, id, groupId, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupAcceptInviteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_accept_invite",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<void> groupRejectInvite(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_opt_String(groupId);
    var arg5 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_reject_invite(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupRejectInviteConstMeta,
      argValues: [baseUrl, authToken, jwt, id, groupId, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupRejectInviteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_reject_invite",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<List<GroupInviteReqList>> groupGetSentJoinReqUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(lastFetchedTime);
    var arg4 = _platform.api2wire_String(lastFetchedGroupId);
    var arg5 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_get_sent_join_req_user(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_list_group_invite_req_list,
      constMeta: kGroupGetSentJoinReqUserConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        lastFetchedTime,
        lastFetchedGroupId,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetSentJoinReqUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_sent_join_req_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "lastFetchedTime",
          "lastFetchedGroupId",
          "groupAsMember"
        ],
      );

  Future<List<GroupInviteReqList>> groupGetSentJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String lastFetchedTime,
      required String lastFetchedGroupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = api2wire_i32(adminRank);
    var arg5 = _platform.api2wire_String(lastFetchedTime);
    var arg6 = _platform.api2wire_String(lastFetchedGroupId);
    var arg7 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_get_sent_join_req(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7),
      parseSuccessData: _wire2api_list_group_invite_req_list,
      constMeta: kGroupGetSentJoinReqConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        adminRank,
        lastFetchedTime,
        lastFetchedGroupId,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetSentJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_sent_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "lastFetchedTime",
          "lastFetchedGroupId",
          "groupAsMember"
        ],
      );

  Future<void> groupDeleteSentJoinReqUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String joinReqGroupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(joinReqGroupId);
    var arg4 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_delete_sent_join_req_user(
          port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupDeleteSentJoinReqUserConstMeta,
      argValues: [baseUrl, authToken, jwt, joinReqGroupId, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupDeleteSentJoinReqUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_delete_sent_join_req_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "joinReqGroupId",
          "groupAsMember"
        ],
      );

  Future<void> groupDeleteSentJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String joinReqGroupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = api2wire_i32(adminRank);
    var arg5 = _platform.api2wire_String(joinReqGroupId);
    var arg6 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_delete_sent_join_req(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupDeleteSentJoinReqConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        adminRank,
        joinReqGroupId,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupDeleteSentJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_delete_sent_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "joinReqGroupId",
          "groupAsMember"
        ],
      );

  Future<void> groupJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String groupId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_String(groupId);
    var arg5 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_join_req(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupJoinReqConstMeta,
      argValues: [baseUrl, authToken, jwt, id, groupId, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "groupId",
          "groupAsMember"
        ],
      );

  Future<List<GroupJoinReqList>> groupGetJoinReqs(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String lastFetchedTime,
      required String lastFetchedId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = api2wire_i32(adminRank);
    var arg5 = _platform.api2wire_String(lastFetchedTime);
    var arg6 = _platform.api2wire_String(lastFetchedId);
    var arg7 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_get_join_reqs(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7),
      parseSuccessData: _wire2api_list_group_join_req_list,
      constMeta: kGroupGetJoinReqsConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        adminRank,
        lastFetchedTime,
        lastFetchedId,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupGetJoinReqsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_get_join_reqs",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "lastFetchedTime",
          "lastFetchedId",
          "groupAsMember"
        ],
      );

  Future<void> groupRejectJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      required String rejectedUserId,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = api2wire_i32(adminRank);
    var arg5 = _platform.api2wire_String(rejectedUserId);
    var arg6 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_reject_join_req(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupRejectJoinReqConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        adminRank,
        rejectedUserId,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupRejectJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_reject_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "rejectedUserId",
          "groupAsMember"
        ],
      );

  Future<void> groupAcceptJoinReq(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      int? rank,
      required int adminRank,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_String(userId);
    var arg5 = _platform.api2wire_opt_box_autoadd_i32(rank);
    var arg6 = api2wire_i32(adminRank);
    var arg7 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_accept_join_req(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupAcceptJoinReqConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        userId,
        rank,
        adminRank,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupAcceptJoinReqConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_accept_join_req",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "userId",
          "rank",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<void> groupStopGroupInvites(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = api2wire_i32(adminRank);
    var arg5 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_stop_group_invites(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupStopGroupInvitesConstMeta,
      argValues: [baseUrl, authToken, jwt, id, adminRank, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupStopGroupInvitesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_stop_group_invites",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<void> leaveGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_leave_group(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kLeaveGroupConstMeta,
      argValues: [baseUrl, authToken, jwt, id, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLeaveGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "leave_group",
        argNames: ["baseUrl", "authToken", "jwt", "id", "groupAsMember"],
      );

  Future<String> groupPrepareUpdateRank(
      {required String userId,
      required int rank,
      required int adminRank,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = api2wire_i32(rank);
    var arg2 = api2wire_i32(adminRank);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_prepare_update_rank(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kGroupPrepareUpdateRankConstMeta,
      argValues: [userId, rank, adminRank],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupPrepareUpdateRankConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_prepare_update_rank",
        argNames: ["userId", "rank", "adminRank"],
      );

  Future<void> groupUpdateRank(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      required int rank,
      required int adminRank,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_String(userId);
    var arg5 = api2wire_i32(rank);
    var arg6 = api2wire_i32(adminRank);
    var arg7 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_update_rank(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupUpdateRankConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        userId,
        rank,
        adminRank,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupUpdateRankConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_update_rank",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "userId",
          "rank",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<void> groupKickUser(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required String userId,
      required int adminRank,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = _platform.api2wire_String(userId);
    var arg5 = api2wire_i32(adminRank);
    var arg6 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_group_kick_user(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupKickUserConstMeta,
      argValues: [
        baseUrl,
        authToken,
        jwt,
        id,
        userId,
        adminRank,
        groupAsMember
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupKickUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_kick_user",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "userId",
          "adminRank",
          "groupAsMember"
        ],
      );

  Future<void> groupDeleteGroup(
      {required String baseUrl,
      required String authToken,
      required String jwt,
      required String id,
      required int adminRank,
      String? groupAsMember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(baseUrl);
    var arg1 = _platform.api2wire_String(authToken);
    var arg2 = _platform.api2wire_String(jwt);
    var arg3 = _platform.api2wire_String(id);
    var arg4 = api2wire_i32(adminRank);
    var arg5 = _platform.api2wire_opt_String(groupAsMember);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_group_delete_group(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      constMeta: kGroupDeleteGroupConstMeta,
      argValues: [baseUrl, authToken, jwt, id, adminRank, groupAsMember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupDeleteGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "group_delete_group",
        argNames: [
          "baseUrl",
          "authToken",
          "jwt",
          "id",
          "adminRank",
          "groupAsMember"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  PrepareLoginOtpOutput _wire2api_box_autoadd_prepare_login_otp_output(
      dynamic raw) {
    return _wire2api_prepare_login_otp_output(raw);
  }

  UserDataExport _wire2api_box_autoadd_user_data_export(dynamic raw) {
    return _wire2api_user_data_export(raw);
  }

  Claims _wire2api_claims(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Claims(
      aud: _wire2api_String(arr[0]),
      sub: _wire2api_String(arr[1]),
      exp: _wire2api_usize(arr[2]),
      iat: _wire2api_usize(arr[3]),
      fresh: _wire2api_bool(arr[4]),
    );
  }

  DeviceKeyData _wire2api_device_key_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return DeviceKeyData(
      privateKey: _wire2api_String(arr[0]),
      publicKey: _wire2api_String(arr[1]),
      signKey: _wire2api_String(arr[2]),
      verifyKey: _wire2api_String(arr[3]),
      exportedPublicKey: _wire2api_String(arr[4]),
      exportedVerifyKey: _wire2api_String(arr[5]),
    );
  }

  GeneratedRegisterData _wire2api_generated_register_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GeneratedRegisterData(
      identifier: _wire2api_String(arr[0]),
      password: _wire2api_String(arr[1]),
    );
  }

  GroupChildrenList _wire2api_group_children_list(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return GroupChildrenList(
      groupId: _wire2api_String(arr[0]),
      time: _wire2api_String(arr[1]),
      parent: _wire2api_opt_String(arr[2]),
    );
  }

  GroupInviteReqList _wire2api_group_invite_req_list(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GroupInviteReqList(
      groupId: _wire2api_String(arr[0]),
      time: _wire2api_String(arr[1]),
    );
  }

  GroupJoinReqList _wire2api_group_join_req_list(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return GroupJoinReqList(
      userId: _wire2api_String(arr[0]),
      time: _wire2api_String(arr[1]),
      userType: _wire2api_i32(arr[2]),
    );
  }

  GroupOutDataLightExport _wire2api_group_out_data_light_export(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return GroupOutDataLightExport(
      groupId: _wire2api_String(arr[0]),
      parentGroupId: _wire2api_opt_String(arr[1]),
      rank: _wire2api_i32(arr[2]),
      createdTime: _wire2api_String(arr[3]),
      joinedTime: _wire2api_String(arr[4]),
      accessByGroupAsMember: _wire2api_opt_String(arr[5]),
      accessByParentGroup: _wire2api_opt_String(arr[6]),
      isConnectedGroup: _wire2api_bool(arr[7]),
    );
  }

  GroupUserListItem _wire2api_group_user_list_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return GroupUserListItem(
      userId: _wire2api_String(arr[0]),
      rank: _wire2api_i32(arr[1]),
      joinedTime: _wire2api_String(arr[2]),
      userType: _wire2api_i32(arr[3]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<GroupChildrenList> _wire2api_list_group_children_list(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_group_children_list).toList();
  }

  List<GroupInviteReqList> _wire2api_list_group_invite_req_list(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_group_invite_req_list).toList();
  }

  List<GroupJoinReqList> _wire2api_list_group_join_req_list(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_group_join_req_list).toList();
  }

  List<GroupUserListItem> _wire2api_list_group_user_list_item(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_group_user_list_item).toList();
  }

  ListGroups _wire2api_list_groups(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ListGroups(
      groupId: _wire2api_String(arr[0]),
      time: _wire2api_String(arr[1]),
      joinedTime: _wire2api_String(arr[2]),
      rank: _wire2api_i32(arr[3]),
      parent: _wire2api_opt_String(arr[4]),
    );
  }

  List<ListGroups> _wire2api_list_list_groups(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_list_groups).toList();
  }

  List<UserDeviceList> _wire2api_list_user_device_list(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_user_device_list).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  PrepareLoginOtpOutput? _wire2api_opt_box_autoadd_prepare_login_otp_output(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_prepare_login_otp_output(raw);
  }

  UserDataExport? _wire2api_opt_box_autoadd_user_data_export(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_user_data_export(raw);
  }

  OtpRecoveryKeysOutput _wire2api_otp_recovery_keys_output(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OtpRecoveryKeysOutput(
      keys: _wire2api_StringList(arr[0]),
    );
  }

  OtpRegister _wire2api_otp_register(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return OtpRegister(
      secret: _wire2api_String(arr[0]),
      alg: _wire2api_String(arr[1]),
      recover: _wire2api_StringList(arr[2]),
    );
  }

  OtpRegisterUrl _wire2api_otp_register_url(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OtpRegisterUrl(
      url: _wire2api_String(arr[0]),
      recover: _wire2api_StringList(arr[1]),
    );
  }

  PrepareLoginOtpOutput _wire2api_prepare_login_otp_output(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PrepareLoginOtpOutput(
      masterKey: _wire2api_String(arr[0]),
      authKey: _wire2api_String(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UserDataExport _wire2api_user_data_export(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UserDataExport(
      jwt: _wire2api_String(arr[0]),
      userId: _wire2api_String(arr[1]),
      deviceId: _wire2api_String(arr[2]),
      refreshToken: _wire2api_String(arr[3]),
      deviceKeys: _wire2api_device_key_data(arr[4]),
    );
  }

  UserDeviceList _wire2api_user_device_list(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UserDeviceList(
      deviceId: _wire2api_String(arr[0]),
      time: _wire2api_String(arr[1]),
      deviceIdentifier: _wire2api_String(arr[2]),
    );
  }

  UserInitServerOutput _wire2api_user_init_server_output(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UserInitServerOutput(
      jwt: _wire2api_String(arr[0]),
      invites: _wire2api_list_group_invite_req_list(arr[1]),
    );
  }

  UserLoginOut _wire2api_user_login_out(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UserLoginOut(
      userData: _wire2api_opt_box_autoadd_user_data_export(arr[0]),
      mfa: _wire2api_opt_box_autoadd_prepare_login_otp_output(arr[1]),
    );
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class SentcFlutterRustLightPlatform
    extends FlutterRustBridgeBase<SentcFlutterRustLightWire> {
  SentcFlutterRustLightPlatform(ffi.DynamicLibrary dylib)
      : super(SentcFlutterRustLightWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32_0(api2wire_i32(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_box_autoadd_i32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i32(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class SentcFlutterRustLightWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SentcFlutterRustLightWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SentcFlutterRustLightWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_decode_jwt(
    int port_,
    ffi.Pointer<wire_uint_8_list> jwt,
  ) {
    return _wire_decode_jwt(
      port_,
      jwt,
    );
  }

  late final _wire_decode_jwtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_decode_jwt');
  late final _wire_decode_jwt = _wire_decode_jwtPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_check_user_identifier_available(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_check_user_identifier_available(
      port_,
      base_url,
      auth_token,
      user_identifier,
    );
  }

  late final _wire_check_user_identifier_availablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_check_user_identifier_available');
  late final _wire_check_user_identifier_available =
      _wire_check_user_identifier_availablePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_user_register_data(
    int port_,
  ) {
    return _wire_generate_user_register_data(
      port_,
    );
  }

  late final _wire_generate_user_register_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_generate_user_register_data');
  late final _wire_generate_user_register_data =
      _wire_generate_user_register_dataPtr.asFunction<void Function(int)>();

  void wire_prepare_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_prepare_register(
      port_,
      user_identifier,
      password,
    );
  }

  late final _wire_prepare_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_prepare_register');
  late final _wire_prepare_register = _wire_prepare_registerPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_register(
      port_,
      server_output,
    );
  }

  late final _wire_done_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_done_register');
  late final _wire_done_register = _wire_done_registerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_register(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
    );
  }

  late final _wire_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register');
  late final _wire_register = _wire_registerPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_device_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> device_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_register_device_start(
      port_,
      base_url,
      auth_token,
      device_identifier,
      password,
    );
  }

  late final _wire_register_device_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_device_start');
  late final _wire_register_device_start =
      _wire_register_device_startPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_done_register_device_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_done_register_device_start(
      port_,
      server_output,
    );
  }

  late final _wire_done_register_device_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_done_register_device_start');
  late final _wire_done_register_device_start =
      _wire_done_register_device_startPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_register_device(
      port_,
      base_url,
      auth_token,
      jwt,
      server_output,
    );
  }

  late final _wire_register_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_device');
  late final _wire_register_device = _wire_register_devicePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_login(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
    );
  }

  late final _wire_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_login');
  late final _wire_login = _wire_loginPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_mfa_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> master_key_encryption,
    ffi.Pointer<wire_uint_8_list> auth_key,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> token,
    bool recovery,
  ) {
    return _wire_mfa_login(
      port_,
      base_url,
      auth_token,
      master_key_encryption,
      auth_key,
      user_identifier,
      token,
      recovery,
    );
  }

  late final _wire_mfa_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_mfa_login');
  late final _wire_mfa_login = _wire_mfa_loginPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          bool)>();

  void wire_get_fresh_jwt(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> mfa_token,
    ffi.Pointer<ffi.Bool> mfa_recovery,
  ) {
    return _wire_get_fresh_jwt(
      port_,
      base_url,
      auth_token,
      user_identifier,
      password,
      mfa_token,
      mfa_recovery,
    );
  }

  late final _wire_get_fresh_jwtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Bool>)>>('wire_get_fresh_jwt');
  late final _wire_get_fresh_jwt = _wire_get_fresh_jwtPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<ffi.Bool>)>();

  void wire_refresh_jwt(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> refresh_token,
  ) {
    return _wire_refresh_jwt(
      port_,
      base_url,
      auth_token,
      jwt,
      refresh_token,
    );
  }

  late final _wire_refresh_jwtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_refresh_jwt');
  late final _wire_refresh_jwt = _wire_refresh_jwtPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> refresh_token,
  ) {
    return _wire_init_user(
      port_,
      base_url,
      auth_token,
      jwt,
      refresh_token,
    );
  }

  late final _wire_init_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_init_user');
  late final _wire_init_user = _wire_init_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_user_devices(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_id,
  ) {
    return _wire_get_user_devices(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_id,
    );
  }

  late final _wire_get_user_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_user_devices');
  late final _wire_get_user_devices = _wire_get_user_devicesPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_change_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> user_identifier,
    ffi.Pointer<wire_uint_8_list> old_password,
    ffi.Pointer<wire_uint_8_list> new_password,
    ffi.Pointer<wire_uint_8_list> mfa_token,
    ffi.Pointer<ffi.Bool> mfa_recovery,
  ) {
    return _wire_change_password(
      port_,
      base_url,
      auth_token,
      user_identifier,
      old_password,
      new_password,
      mfa_token,
      mfa_recovery,
    );
  }

  late final _wire_change_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Bool>)>>('wire_change_password');
  late final _wire_change_password = _wire_change_passwordPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<ffi.Bool>)>();

  void wire_delete_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> fresh_jwt,
  ) {
    return _wire_delete_user(
      port_,
      base_url,
      auth_token,
      fresh_jwt,
    );
  }

  late final _wire_delete_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_user');
  late final _wire_delete_user = _wire_delete_userPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_delete_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> fresh_jwt,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_delete_device(
      port_,
      base_url,
      auth_token,
      fresh_jwt,
      device_id,
    );
  }

  late final _wire_delete_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_device');
  late final _wire_delete_device = _wire_delete_devicePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_update_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> user_identifier,
  ) {
    return _wire_update_user(
      port_,
      base_url,
      auth_token,
      jwt,
      user_identifier,
    );
  }

  late final _wire_update_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_update_user');
  late final _wire_update_user = _wire_update_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_raw_otp(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
  ) {
    return _wire_register_raw_otp(
      port_,
      base_url,
      auth_token,
      jwt,
    );
  }

  late final _wire_register_raw_otpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_raw_otp');
  late final _wire_register_raw_otp = _wire_register_raw_otpPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_otp(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> issuer,
    ffi.Pointer<wire_uint_8_list> audience,
  ) {
    return _wire_register_otp(
      port_,
      base_url,
      auth_token,
      jwt,
      issuer,
      audience,
    );
  }

  late final _wire_register_otpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_otp');
  late final _wire_register_otp = _wire_register_otpPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_otp_recover_keys(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
  ) {
    return _wire_get_otp_recover_keys(
      port_,
      base_url,
      auth_token,
      jwt,
    );
  }

  late final _wire_get_otp_recover_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_otp_recover_keys');
  late final _wire_get_otp_recover_keys =
      _wire_get_otp_recover_keysPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_reset_raw_otp(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
  ) {
    return _wire_reset_raw_otp(
      port_,
      base_url,
      auth_token,
      jwt,
    );
  }

  late final _wire_reset_raw_otpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_reset_raw_otp');
  late final _wire_reset_raw_otp = _wire_reset_raw_otpPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_reset_otp(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> issuer,
    ffi.Pointer<wire_uint_8_list> audience,
  ) {
    return _wire_reset_otp(
      port_,
      base_url,
      auth_token,
      jwt,
      issuer,
      audience,
    );
  }

  late final _wire_reset_otpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_reset_otp');
  late final _wire_reset_otp = _wire_reset_otpPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_disable_otp(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
  ) {
    return _wire_disable_otp(
      port_,
      base_url,
      auth_token,
      jwt,
    );
  }

  late final _wire_disable_otpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_disable_otp');
  late final _wire_disable_otp = _wire_disable_otpPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_create_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_create_group(
      port_,
      base_url,
      auth_token,
      jwt,
      group_as_member,
    );
  }

  late final _wire_group_create_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_create_group');
  late final _wire_group_create_group = _wire_group_create_groupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_create_child_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> parent_id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_create_child_group(
      port_,
      base_url,
      auth_token,
      jwt,
      parent_id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_create_child_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_create_child_group');
  late final _wire_group_create_child_group =
      _wire_group_create_child_groupPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_create_connected_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> connected_group_id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_create_connected_group(
      port_,
      base_url,
      auth_token,
      jwt,
      connected_group_id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_create_connected_groupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Int32,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_create_connected_group');
  late final _wire_group_create_connected_group =
      _wire_group_create_connected_groupPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_extract_group_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> server_output,
  ) {
    return _wire_group_extract_group_data(
      port_,
      server_output,
    );
  }

  late final _wire_group_extract_group_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_extract_group_data');
  late final _wire_group_extract_group_data = _wire_group_extract_group_dataPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_group_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_group_data(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_as_member,
    );
  }

  late final _wire_group_get_group_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_group_data');
  late final _wire_group_get_group_data =
      _wire_group_get_group_dataPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_member(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_member(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      last_fetched_time,
      last_fetched_id,
      group_as_member,
    );
  }

  late final _wire_group_get_memberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_member');
  late final _wire_group_get_member = _wire_group_get_memberPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_group_updates(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_group_updates(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_as_member,
    );
  }

  late final _wire_group_get_group_updatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_group_updates');
  late final _wire_group_get_group_updates =
      _wire_group_get_group_updatesPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_all_first_level_children(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_all_first_level_children(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      last_fetched_time,
      last_fetched_group_id,
      group_as_member,
    );
  }

  late final _wire_group_get_all_first_level_childrenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_all_first_level_children');
  late final _wire_group_get_all_first_level_children =
      _wire_group_get_all_first_level_childrenPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_groups_for_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
    ffi.Pointer<wire_uint_8_list> group_id,
  ) {
    return _wire_group_get_groups_for_user(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_group_id,
      group_id,
    );
  }

  late final _wire_group_get_groups_for_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_groups_for_user');
  late final _wire_group_get_groups_for_user =
      _wire_group_get_groups_for_userPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_invite_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<ffi.Int32> rank,
    int admin_rank,
    bool auto_invite,
    bool group_invite,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_invite_user(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      user_id,
      rank,
      admin_rank,
      auto_invite,
      group_invite,
      group_as_member,
    );
  }

  late final _wire_group_invite_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_invite_user');
  late final _wire_group_invite_user = _wire_group_invite_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<ffi.Int32>,
          int,
          bool,
          bool,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_invites_for_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_invites_for_user(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_group_id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_group_get_invites_for_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_invites_for_user');
  late final _wire_group_get_invites_for_user =
      _wire_group_get_invites_for_userPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_accept_invite(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_accept_invite(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_group_accept_invitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_accept_invite');
  late final _wire_group_accept_invite =
      _wire_group_accept_invitePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_reject_invite(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_reject_invite(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_group_reject_invitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_reject_invite');
  late final _wire_group_reject_invite =
      _wire_group_reject_invitePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_sent_join_req_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_sent_join_req_user(
      port_,
      base_url,
      auth_token,
      jwt,
      last_fetched_time,
      last_fetched_group_id,
      group_as_member,
    );
  }

  late final _wire_group_get_sent_join_req_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_get_sent_join_req_user');
  late final _wire_group_get_sent_join_req_user =
      _wire_group_get_sent_join_req_userPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_sent_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_sent_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      last_fetched_time,
      last_fetched_group_id,
      group_as_member,
    );
  }

  late final _wire_group_get_sent_join_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_sent_join_req');
  late final _wire_group_get_sent_join_req =
      _wire_group_get_sent_join_reqPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_delete_sent_join_req_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> join_req_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_delete_sent_join_req_user(
      port_,
      base_url,
      auth_token,
      jwt,
      join_req_group_id,
      group_as_member,
    );
  }

  late final _wire_group_delete_sent_join_req_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_delete_sent_join_req_user');
  late final _wire_group_delete_sent_join_req_user =
      _wire_group_delete_sent_join_req_userPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_delete_sent_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> join_req_group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_delete_sent_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      join_req_group_id,
      group_as_member,
    );
  }

  late final _wire_group_delete_sent_join_reqPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Int32,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_group_delete_sent_join_req');
  late final _wire_group_delete_sent_join_req =
      _wire_group_delete_sent_join_reqPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_id,
      group_as_member,
    );
  }

  late final _wire_group_join_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_join_req');
  late final _wire_group_join_req = _wire_group_join_reqPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_get_join_reqs(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> last_fetched_time,
    ffi.Pointer<wire_uint_8_list> last_fetched_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_get_join_reqs(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      last_fetched_time,
      last_fetched_id,
      group_as_member,
    );
  }

  late final _wire_group_get_join_reqsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_get_join_reqs');
  late final _wire_group_get_join_reqs =
      _wire_group_get_join_reqsPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_reject_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> rejected_user_id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_reject_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      rejected_user_id,
      group_as_member,
    );
  }

  late final _wire_group_reject_join_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_reject_join_req');
  late final _wire_group_reject_join_req =
      _wire_group_reject_join_reqPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_accept_join_req(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<ffi.Int32> rank,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_accept_join_req(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      user_id,
      rank,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_accept_join_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_accept_join_req');
  late final _wire_group_accept_join_req =
      _wire_group_accept_join_reqPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Int32>,
              int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_stop_group_invites(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_stop_group_invites(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_stop_group_invitesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_stop_group_invites');
  late final _wire_group_stop_group_invites =
      _wire_group_stop_group_invitesPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_leave_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_leave_group(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      group_as_member,
    );
  }

  late final _wire_leave_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_leave_group');
  late final _wire_leave_group = _wire_leave_groupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_prepare_update_rank(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    int rank,
    int admin_rank,
  ) {
    return _wire_group_prepare_update_rank(
      port_,
      user_id,
      rank,
      admin_rank,
    );
  }

  late final _wire_group_prepare_update_rankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Int32)>>('wire_group_prepare_update_rank');
  late final _wire_group_prepare_update_rank =
      _wire_group_prepare_update_rankPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_group_update_rank(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> user_id,
    int rank,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_update_rank(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      user_id,
      rank,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_update_rankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_update_rank');
  late final _wire_group_update_rank = _wire_group_update_rankPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_kick_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> user_id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_kick_user(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      user_id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_kick_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_kick_user');
  late final _wire_group_kick_user = _wire_group_kick_userPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_delete_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> base_url,
    ffi.Pointer<wire_uint_8_list> auth_token,
    ffi.Pointer<wire_uint_8_list> jwt,
    ffi.Pointer<wire_uint_8_list> id,
    int admin_rank,
    ffi.Pointer<wire_uint_8_list> group_as_member,
  ) {
    return _wire_group_delete_group(
      port_,
      base_url,
      auth_token,
      jwt,
      id,
      admin_rank,
      group_as_member,
    );
  }

  late final _wire_group_delete_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_group_delete_group');
  late final _wire_group_delete_group = _wire_group_delete_groupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr
      .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_i32_0(
    int value,
  ) {
    return _new_box_autoadd_i32_0(
      value,
    );
  }

  late final _new_box_autoadd_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'new_box_autoadd_i32_0');
  late final _new_box_autoadd_i32_0 = _new_box_autoadd_i32_0Ptr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
